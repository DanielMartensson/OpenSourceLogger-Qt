
PLC STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800a478  0800a478  0001a478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8d4  0800a8d4  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8d4  0800a8d4  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8d4  0800a8d4  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d8  0800a8d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800a8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001954  20000350  0800ac28  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  0800ac28  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027339  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b39  00000000  00000000  000476b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000135c6  00000000  00000000  0004e1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  000617b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002310  00000000  00000000  00062d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cfb  00000000  00000000  00065030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000291d3  00000000  00000000  00088d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af7d3  00000000  00000000  000b1efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001616d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004aac  00000000  00000000  00161724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a45c 	.word	0x0800a45c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800a45c 	.word	0x0800a45c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <STM32_PLC_Analog_Input>:
static int16_t SDADC3_Differential[5];
static SDADC_HandleTypeDef* handler_sdadc1;
static SDADC_HandleTypeDef* handler_sdadc2;
static SDADC_HandleTypeDef* handler_sdadc3;

void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	4607      	mov	r7, r0
 8000bac:	4608      	mov	r0, r1
	 * Timer clock: 48 Mhz
	 * Prescaler: 99
	 * Counter: 48000 (0xbb80)
	 * Update frequency: 10 Hz
	 */
	HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1); /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000bae:	2100      	movs	r1, #0
void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	9e06      	ldr	r6, [sp, #24]
	HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1); /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000bb6:	f005 f957 	bl	8005e68 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(htim12, TIM_CHANNEL_1); /* TIM12 Channel 1 is trigger source for SDADC2 */
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4638      	mov	r0, r7
 8000bbe:	f005 f953 	bl	8005e68 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(htim12, TIM_CHANNEL_2); /* TIM12 Channel 2 is trigger source for SDADC3 */
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4638      	mov	r0, r7
 8000bc6:	f005 f94f 	bl	8005e68 <HAL_TIM_OC_Start>
	if (HAL_SDADC_CalibrationStart(hsdadc1, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f004 fa81 	bl	80050d4 <HAL_SDADC_CalibrationStart>
 8000bd2:	b108      	cbz	r0, 8000bd8 <STM32_PLC_Analog_Input+0x30>
		Error_Handler();
 8000bd4:	f000 fdb2 	bl	800173c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc1, HAL_MAX_DELAY) != HAL_OK)
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f004 fa9f 	bl	8005120 <HAL_SDADC_PollForCalibEvent>
 8000be2:	b108      	cbz	r0, 8000be8 <STM32_PLC_Analog_Input+0x40>
		Error_Handler();
 8000be4:	f000 fdaa 	bl	800173c <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc2, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000be8:	2104      	movs	r1, #4
 8000bea:	4620      	mov	r0, r4
 8000bec:	f004 fa72 	bl	80050d4 <HAL_SDADC_CalibrationStart>
 8000bf0:	b108      	cbz	r0, 8000bf6 <STM32_PLC_Analog_Input+0x4e>
		Error_Handler();
 8000bf2:	f000 fda3 	bl	800173c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc2, HAL_MAX_DELAY) != HAL_OK)
 8000bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f004 fa90 	bl	8005120 <HAL_SDADC_PollForCalibEvent>
 8000c00:	b108      	cbz	r0, 8000c06 <STM32_PLC_Analog_Input+0x5e>
		Error_Handler();
 8000c02:	f000 fd9b 	bl	800173c <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc3, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000c06:	2104      	movs	r1, #4
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f004 fa63 	bl	80050d4 <HAL_SDADC_CalibrationStart>
 8000c0e:	b108      	cbz	r0, 8000c14 <STM32_PLC_Analog_Input+0x6c>
		Error_Handler();
 8000c10:	f000 fd94 	bl	800173c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc3, HAL_MAX_DELAY) != HAL_OK)
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	4630      	mov	r0, r6
 8000c1a:	f004 fa81 	bl	8005120 <HAL_SDADC_PollForCalibEvent>
 8000c1e:	b108      	cbz	r0, 8000c24 <STM32_PLC_Analog_Input+0x7c>
		Error_Handler();
 8000c20:	f000 fd8c 	bl	800173c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc1, (uint32_t*)SDADC1_Single, 9) != HAL_OK)
 8000c24:	490f      	ldr	r1, [pc, #60]	; (8000c64 <STM32_PLC_Analog_Input+0xbc>)
 8000c26:	2209      	movs	r2, #9
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f004 fa9d 	bl	8005168 <HAL_SDADC_InjectedStart_DMA>
 8000c2e:	b108      	cbz	r0, 8000c34 <STM32_PLC_Analog_Input+0x8c>
		Error_Handler();
 8000c30:	f000 fd84 	bl	800173c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc2, (uint32_t*)SDADC2_Single, 3) != HAL_OK)
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <STM32_PLC_Analog_Input+0xc0>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f004 fa95 	bl	8005168 <HAL_SDADC_InjectedStart_DMA>
 8000c3e:	b108      	cbz	r0, 8000c44 <STM32_PLC_Analog_Input+0x9c>
		Error_Handler();
 8000c40:	f000 fd7c 	bl	800173c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc3, (uint32_t*)SDADC3_Differential, 5) != HAL_OK)
 8000c44:	4909      	ldr	r1, [pc, #36]	; (8000c6c <STM32_PLC_Analog_Input+0xc4>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	4630      	mov	r0, r6
 8000c4a:	f004 fa8d 	bl	8005168 <HAL_SDADC_InjectedStart_DMA>
 8000c4e:	b108      	cbz	r0, 8000c54 <STM32_PLC_Analog_Input+0xac>
		Error_Handler();
 8000c50:	f000 fd74 	bl	800173c <Error_Handler>


	/* Save */
	handler_sdadc1 = hsdadc1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <STM32_PLC_Analog_Input+0xc8>)
 8000c56:	601d      	str	r5, [r3, #0]
	handler_sdadc2 = hsdadc2;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <STM32_PLC_Analog_Input+0xcc>)
 8000c5a:	601c      	str	r4, [r3, #0]
	handler_sdadc3 = hsdadc3;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <STM32_PLC_Analog_Input+0xd0>)
 8000c5e:	601e      	str	r6, [r3, #0]

}
 8000c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000036c 	.word	0x2000036c
 8000c68:	2000037e 	.word	0x2000037e
 8000c6c:	20000384 	.word	0x20000384
 8000c70:	20000390 	.word	0x20000390
 8000c74:	20000394 	.word	0x20000394
 8000c78:	20000398 	.word	0x20000398

08000c7c <STM32_PLC_Analog_Input_Set_Gain>:
void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
	/* Initial selection */
	SDADC_HandleTypeDef *hsdadc;
	int16_t *DMA_address;
	uint8_t DMA_length;
	switch(sdadc){
 8000c7c:	2802      	cmp	r0, #2
void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
 8000c7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c82:	4606      	mov	r6, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	4693      	mov	fp, r2
 8000c88:	461f      	mov	r7, r3
	switch(sdadc){
 8000c8a:	d058      	beq.n	8000d3e <STM32_PLC_Analog_Input_Set_Gain+0xc2>
 8000c8c:	2803      	cmp	r0, #3
 8000c8e:	d05d      	beq.n	8000d4c <STM32_PLC_Analog_Input_Set_Gain+0xd0>
	case 1:
		hsdadc = handler_sdadc1;
 8000c90:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <STM32_PLC_Analog_Input_Set_Gain+0x134>)
		DMA_length = 9;
		DMA_address = SDADC1_Single;
 8000c92:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000dbc <STM32_PLC_Analog_Input_Set_Gain+0x140>
		hsdadc = handler_sdadc1;
 8000c96:	681d      	ldr	r5, [r3, #0]
		DMA_length = 9;
 8000c98:	f04f 0a09 	mov.w	sl, #9
		DMA_address = SDADC1_Single;
		break;
	}

	/* Stop SDADC with DMA */
	if(HAL_SDADC_InjectedStop_DMA(hsdadc) != HAL_OK)
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f004 faa1 	bl	80051e4 <HAL_SDADC_InjectedStop_DMA>
 8000ca2:	b108      	cbz	r0, 8000ca8 <STM32_PLC_Analog_Input_Set_Gain+0x2c>
		Error_Handler();
 8000ca4:	f000 fd4a 	bl	800173c <Error_Handler>

	/* 0: Check if SDADC is ready */
	if(hsdadc->State != HAL_SDADC_STATE_READY)
 8000ca8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d001      	beq.n	8000cb4 <STM32_PLC_Analog_Input_Set_Gain+0x38>
		Error_Handler();
 8000cb0:	f000 fd44 	bl	800173c <Error_Handler>

	/* 1: Enter init-mode for the control register */
	hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8000cb4:	682a      	ldr	r2, [r5, #0]
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cbc:	6013      	str	r3, [r2, #0]
	uint32_t tickstart = HAL_GetTick();
 8000cbe:	f001 fec1 	bl	8002a44 <HAL_GetTick>
	bool isAtInitMode = true;
 8000cc2:	2301      	movs	r3, #1
	uint32_t tickstart = HAL_GetTick();
 8000cc4:	4602      	mov	r2, r0
	/* Wait for INITRDY bit on SDADC_ISR */
	while ((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t) RESET) {
 8000cc6:	682c      	ldr	r4, [r5, #0]
 8000cc8:	68a1      	ldr	r1, [r4, #8]
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	da45      	bge.n	8000d5a <STM32_PLC_Analog_Input_Set_Gain+0xde>
		}
	}

	/* 2: If init mode, then set gain and offset registers */
	gain = gain & 0b111; /* Only make sure that we don't implement larger then value 0b111 */
	if(isAtInitMode){
 8000cce:	b1b3      	cbz	r3, 8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
		switch(configuration_index){
 8000cd0:	f1b8 0f01 	cmp.w	r8, #1
	gain = gain & 0b111; /* Only make sure that we don't implement larger then value 0b111 */
 8000cd4:	f00b 0107 	and.w	r1, fp, #7
		switch(configuration_index){
 8000cd8:	d04a      	beq.n	8000d70 <STM32_PLC_Analog_Input_Set_Gain+0xf4>
 8000cda:	f1b8 0f02 	cmp.w	r8, #2
 8000cde:	d055      	beq.n	8000d8c <STM32_PLC_Analog_Input_Set_Gain+0x110>
 8000ce0:	f1b8 0f00 	cmp.w	r8, #0
 8000ce4:	d10b      	bne.n	8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
		case SDADC_CONF_INDEX_0:
			hsdadc->Instance->CONF0R &=  ~(0b111 << 20); /* Clear */
 8000ce6:	6a23      	ldr	r3, [r4, #32]
 8000ce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000cec:	6223      	str	r3, [r4, #32]
			hsdadc->Instance->CONF0R |= gain << 20; /* Bits 22:20 GAIN0[2:0]: */
 8000cee:	6a23      	ldr	r3, [r4, #32]
 8000cf0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000cf4:	6223      	str	r3, [r4, #32]
			if(save_to_flash)
 8000cf6:	b117      	cbz	r7, 8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
				STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(sdadc, gain);
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 fa25 	bl	8001148 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>
			break;
		}
	}

	/* 3: Leave init-mode for the control register */
	hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8000cfe:	682a      	ldr	r2, [r5, #0]
 8000d00:	6813      	ldr	r3, [r2, #0]
 8000d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d06:	6013      	str	r3, [r2, #0]


	/* Start ADC again */
	if (HAL_SDADC_CalibrationStart(hsdadc, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f004 f9e2 	bl	80050d4 <HAL_SDADC_CalibrationStart>
 8000d10:	b108      	cbz	r0, 8000d16 <STM32_PLC_Analog_Input_Set_Gain+0x9a>
		Error_Handler();
 8000d12:	f000 fd13 	bl	800173c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc, HAL_MAX_DELAY) != HAL_OK)
 8000d16:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f004 fa00 	bl	8005120 <HAL_SDADC_PollForCalibEvent>
 8000d20:	b108      	cbz	r0, 8000d26 <STM32_PLC_Analog_Input_Set_Gain+0xaa>
		Error_Handler();
 8000d22:	f000 fd0b 	bl	800173c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc, (uint32_t*)DMA_address, DMA_length) != HAL_OK)
 8000d26:	4652      	mov	r2, sl
 8000d28:	4649      	mov	r1, r9
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	f004 fa1c 	bl	8005168 <HAL_SDADC_InjectedStart_DMA>
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d039      	beq.n	8000da8 <STM32_PLC_Analog_Input_Set_Gain+0x12c>
		Error_Handler();
}
 8000d34:	b003      	add	sp, #12
 8000d36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Error_Handler();
 8000d3a:	f000 bcff 	b.w	800173c <Error_Handler>
		hsdadc = handler_sdadc2;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <STM32_PLC_Analog_Input_Set_Gain+0x138>)
		DMA_address = SDADC2_Single;
 8000d40:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000dc0 <STM32_PLC_Analog_Input_Set_Gain+0x144>
		hsdadc = handler_sdadc2;
 8000d44:	681d      	ldr	r5, [r3, #0]
		DMA_length = 3;
 8000d46:	f04f 0a03 	mov.w	sl, #3
		break;
 8000d4a:	e7a7      	b.n	8000c9c <STM32_PLC_Analog_Input_Set_Gain+0x20>
		hsdadc = handler_sdadc3;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <STM32_PLC_Analog_Input_Set_Gain+0x13c>)
		DMA_address = SDADC3_Differential;
 8000d4e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8000dc4 <STM32_PLC_Analog_Input_Set_Gain+0x148>
		hsdadc = handler_sdadc3;
 8000d52:	681d      	ldr	r5, [r3, #0]
		DMA_length = 5;
 8000d54:	f04f 0a05 	mov.w	sl, #5
		break;
 8000d58:	e7a0      	b.n	8000c9c <STM32_PLC_Analog_Input_Set_Gain+0x20>
 8000d5a:	e9cd 3200 	strd	r3, r2, [sp]
		if ((HAL_GetTick() - tickstart) > 200) {
 8000d5e:	f001 fe71 	bl	8002a44 <HAL_GetTick>
 8000d62:	9a01      	ldr	r2, [sp, #4]
			isAtInitMode = false;
 8000d64:	9b00      	ldr	r3, [sp, #0]
		if ((HAL_GetTick() - tickstart) > 200) {
 8000d66:	1a80      	subs	r0, r0, r2
			isAtInitMode = false;
 8000d68:	28c9      	cmp	r0, #201	; 0xc9
 8000d6a:	bf28      	it	cs
 8000d6c:	2300      	movcs	r3, #0
 8000d6e:	e7aa      	b.n	8000cc6 <STM32_PLC_Analog_Input_Set_Gain+0x4a>
			hsdadc->Instance->CONF1R &=  ~(0b111 << 20); /* Clear */
 8000d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000d76:	6263      	str	r3, [r4, #36]	; 0x24
			hsdadc->Instance->CONF1R |= gain << 20;
 8000d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d7a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000d7e:	6263      	str	r3, [r4, #36]	; 0x24
			if(save_to_flash)
 8000d80:	2f00      	cmp	r7, #0
 8000d82:	d0bc      	beq.n	8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
				STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(sdadc, gain);
 8000d84:	4630      	mov	r0, r6
 8000d86:	f000 f9ef 	bl	8001168 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>
 8000d8a:	e7b8      	b.n	8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
			hsdadc->Instance->CONF2R &=  ~(0b111 << 20); /* Clear */
 8000d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000d92:	62a3      	str	r3, [r4, #40]	; 0x28
			hsdadc->Instance->CONF2R |= gain << 20;
 8000d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d96:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000d9a:	62a3      	str	r3, [r4, #40]	; 0x28
			if(save_to_flash)
 8000d9c:	2f00      	cmp	r7, #0
 8000d9e:	d0ae      	beq.n	8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
				STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(sdadc, gain);
 8000da0:	4630      	mov	r0, r6
 8000da2:	f000 f9f1 	bl	8001188 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>
 8000da6:	e7aa      	b.n	8000cfe <STM32_PLC_Analog_Input_Set_Gain+0x82>
}
 8000da8:	b003      	add	sp, #12
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dae:	bf00      	nop
 8000db0:	20000390 	.word	0x20000390
 8000db4:	20000394 	.word	0x20000394
 8000db8:	20000398 	.word	0x20000398
 8000dbc:	2000036c 	.word	0x2000036c
 8000dc0:	2000037e 	.word	0x2000037e
 8000dc4:	20000384 	.word	0x20000384

08000dc8 <STM32_PLC_Analog_Input_ADC_Get_Raw>:

/* Get raw ADC0 to ADC11 */
uint16_t STM32_PLC_Analog_Input_ADC_Get_Raw(uint8_t i) {
	int16_t value = 0;
	switch (i) {
 8000dc8:	280b      	cmp	r0, #11
 8000dca:	d834      	bhi.n	8000e36 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x6e>
 8000dcc:	e8df f000 	tbb	[pc, r0]
 8000dd0:	15110d06 	.word	0x15110d06
 8000dd4:	25211d19 	.word	0x25211d19
 8000dd8:	312f2d29 	.word	0x312f2d29
	case 0:
		value = SDADC1_Single[6];
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000dde:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
		break;
	case 11:
		value = SDADC2_Single[0];
		break;
	}
	return value + 0x8000;
 8000de2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
}
 8000de6:	b280      	uxth	r0, r0
 8000de8:	4770      	bx	lr
		value = SDADC1_Single[5];
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000dec:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
		break;
 8000df0:	e7f7      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[4];
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000df4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 8000df8:	e7f3      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[3];
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000dfc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8000e00:	e7ef      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[8];
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000e04:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
		break;
 8000e08:	e7eb      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[7];
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000e0c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
		break;
 8000e10:	e7e7      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[2];
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[2];
 8000e14:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 8000e18:	e7e3      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[1];
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[1];
 8000e1c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8000e20:	e7df      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[0];
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[0];
 8000e24:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 8000e28:	e7db      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC2_Single[2];
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000e2c:	e7f2      	b.n	8000e14 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x4c>
		value = SDADC2_Single[1];
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000e30:	e7f4      	b.n	8000e1c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x54>
		value = SDADC2_Single[0];
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000e34:	e7f6      	b.n	8000e24 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x5c>
	switch (i) {
 8000e36:	2000      	movs	r0, #0
 8000e38:	e7d3      	b.n	8000de2 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
 8000e3a:	bf00      	nop
 8000e3c:	2000036c 	.word	0x2000036c
 8000e40:	2000037e 	.word	0x2000037e

08000e44 <STM32_PLC_Analog_Input_DADC_Get_Raw>:

/* Get raw DADC0 to DADC4 */
int16_t STM32_PLC_Analog_Input_DADC_Get_Raw(uint8_t i) {
	int16_t value = 0;
	switch(i){
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d818      	bhi.n	8000e7a <STM32_PLC_Analog_Input_DADC_Get_Raw+0x36>
 8000e48:	e8df f000 	tbb	[pc, r0]
 8000e4c:	0f0b0703 	.word	0x0f0b0703
 8000e50:	13          	.byte	0x13
 8000e51:	00          	.byte	0x00
	case 0:
		value = SDADC3_Differential[4];
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8000e54:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 8000e58:	4770      	bx	lr
	case 1:
		value = SDADC3_Differential[3];
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8000e5c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8000e60:	4770      	bx	lr
	case 2:
		value = SDADC3_Differential[2];
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8000e64:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 8000e68:	4770      	bx	lr
	case 3:
		value = SDADC3_Differential[1];
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8000e6c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8000e70:	4770      	bx	lr
	case 4:
		value = SDADC3_Differential[0];
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8000e74:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 8000e78:	4770      	bx	lr
	switch(i){
 8000e7a:	2000      	movs	r0, #0
	}
	return value;
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000384 	.word	0x20000384

08000e84 <STM32_PLC_Analog_Output>:
#include "Functions.h"

static DAC_HandleTypeDef* hanalog1;
static DAC_HandleTypeDef* hanalog2;

void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4604      	mov	r4, r0
	 * Timer clock: 48 Mhz
	 * Prescaler: 99
	 * Counter: 48000 (0xbb80)
	 * Update frequency: 10 Hz
	 */
	HAL_TIM_Base_Start(htim6);
 8000e88:	4610      	mov	r0, r2
void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 8000e8a:	460d      	mov	r5, r1
	HAL_TIM_Base_Start(htim6);
 8000e8c:	f004 fa12 	bl	80052b4 <HAL_TIM_Base_Start>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_1) != HAL_OK)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4620      	mov	r0, r4
 8000e94:	f002 f961 	bl	800315a <HAL_DAC_Start>
 8000e98:	b108      	cbz	r0, 8000e9e <STM32_PLC_Analog_Output+0x1a>
		Error_Handler();
 8000e9a:	f000 fc4f 	bl	800173c <Error_Handler>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_2) != HAL_OK)
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f002 f95a 	bl	800315a <HAL_DAC_Start>
 8000ea6:	b108      	cbz	r0, 8000eac <STM32_PLC_Analog_Output+0x28>
		Error_Handler();
 8000ea8:	f000 fc48 	bl	800173c <Error_Handler>
	if(HAL_DAC_Start(hdac2, DAC2_CHANNEL_1) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f002 f953 	bl	800315a <HAL_DAC_Start>
 8000eb4:	b108      	cbz	r0, 8000eba <STM32_PLC_Analog_Output+0x36>
		Error_Handler();
 8000eb6:	f000 fc41 	bl	800173c <Error_Handler>
	hanalog1 = hdac1;
 8000eba:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <STM32_PLC_Analog_Output+0x40>)
 8000ebc:	601c      	str	r4, [r3, #0]
	hanalog2 = hdac2;
 8000ebe:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <STM32_PLC_Analog_Output+0x44>)
 8000ec0:	601d      	str	r5, [r3, #0]
}
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
 8000ec4:	2000039c 	.word	0x2000039c
 8000ec8:	200003a0 	.word	0x200003a0

08000ecc <STM32_PLC_Analog_Output_Set>:

void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
	/* Safety */
	if(output > 4095)
 8000ecc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf28      	it	cs
 8000ed4:	460b      	movcs	r3, r1
		output = 4095;
	switch(i){
 8000ed6:	2801      	cmp	r0, #1
void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
 8000ed8:	4602      	mov	r2, r0
	switch(i){
 8000eda:	d007      	beq.n	8000eec <STM32_PLC_Analog_Output_Set+0x20>
 8000edc:	2802      	cmp	r0, #2
 8000ede:	d008      	beq.n	8000ef2 <STM32_PLC_Analog_Output_Set+0x26>
 8000ee0:	b958      	cbnz	r0, 8000efa <STM32_PLC_Analog_Output_Set+0x2e>
	case 0:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8000ee2:	4601      	mov	r1, r0
		break;
	case 1:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <STM32_PLC_Analog_Output_Set+0x30>)
		break;
	case 2:
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8000ee6:	6800      	ldr	r0, [r0, #0]
 8000ee8:	f002 b925 	b.w	8003136 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2110      	movs	r1, #16
 8000ef0:	e7f8      	b.n	8000ee4 <STM32_PLC_Analog_Output_Set+0x18>
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <STM32_PLC_Analog_Output_Set+0x34>)
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	e7f5      	b.n	8000ee6 <STM32_PLC_Analog_Output_Set+0x1a>
		break;
	}
}
 8000efa:	4770      	bx	lr
 8000efc:	2000039c 	.word	0x2000039c
 8000f00:	200003a0 	.word	0x200003a0

08000f04 <STM32_PLC_Analog_Output_Reset>:

void STM32_PLC_Analog_Output_Reset() {
 8000f04:	b508      	push	{r3, lr}
	for(uint8_t i = 0; i < 3; i++)
		STM32_PLC_Analog_Output_Set(i, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	4608      	mov	r0, r1
 8000f0a:	f7ff ffdf 	bl	8000ecc <STM32_PLC_Analog_Output_Set>
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff ffdb 	bl	8000ecc <STM32_PLC_Analog_Output_Set>
}
 8000f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		STM32_PLC_Analog_Output_Set(i, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff bfd5 	b.w	8000ecc <STM32_PLC_Analog_Output_Set>
	...

08000f24 <STM32_PLC_CAN>:

static CAN_HandleTypeDef *can_handler;
static void Create_CAN_Filter(CAN_HandleTypeDef *hcan);
static void Create_CAN_Interrupt(CAN_HandleTypeDef *hcan);

void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8000f24:	b510      	push	{r4, lr}
	can_handler = hcan;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <STM32_PLC_CAN+0x54>)
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8000f28:	b08a      	sub	sp, #40	; 0x28
	can_handler = hcan;
 8000f2a:	6018      	str	r0, [r3, #0]
			Error_Handler();
}

static void Create_CAN_Filter(CAN_HandleTypeDef *hcan) {
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000f2c:	2300      	movs	r3, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2e:	2201      	movs	r2, #1
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f30:	e9cd 3305 	strd	r3, r3, [sp, #20]
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
 8000f34:	e9cd 3300 	strd	r3, r3, [sp]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000f38:	e9cd 3302 	strd	r3, r3, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f3c:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000f3e:	4669      	mov	r1, sp
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f40:	230e      	movs	r3, #14
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8000f42:	4604      	mov	r4, r0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f44:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f46:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f48:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000f4a:	f001 fe10 	bl	8002b6e <HAL_CAN_ConfigFilter>
 8000f4e:	b108      	cbz	r0, 8000f54 <STM32_PLC_CAN+0x30>
		Error_Handler();
 8000f50:	f000 fbf4 	bl	800173c <Error_Handler>
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000f54:	4620      	mov	r0, r4
 8000f56:	f001 fe79 	bl	8002c4c <HAL_CAN_Start>
 8000f5a:	b108      	cbz	r0, 8000f60 <STM32_PLC_CAN+0x3c>
		Error_Handler();
 8000f5c:	f000 fbee 	bl	800173c <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f60:	2102      	movs	r1, #2
 8000f62:	4620      	mov	r0, r4
 8000f64:	f001 ff67 	bl	8002e36 <HAL_CAN_ActivateNotification>
 8000f68:	b120      	cbz	r0, 8000f74 <STM32_PLC_CAN+0x50>
}
 8000f6a:	b00a      	add	sp, #40	; 0x28
 8000f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Error_Handler();
 8000f70:	f000 bbe4 	b.w	800173c <Error_Handler>
}
 8000f74:	b00a      	add	sp, #40	; 0x28
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	200003a4 	.word	0x200003a4

08000f7c <STM32_PLC_CAN_Transmit>:
HAL_StatusTypeDef STM32_PLC_CAN_Transmit(uint8_t TxData[], CAN_TxHeaderTypeDef *TxHeader) {
 8000f7c:	b507      	push	{r0, r1, r2, lr}
 8000f7e:	4602      	mov	r2, r0
	return HAL_CAN_AddTxMessage(can_handler, TxHeader, TxData, &TxMailbox);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <STM32_PLC_CAN_Transmit+0x14>)
 8000f82:	ab01      	add	r3, sp, #4
 8000f84:	6800      	ldr	r0, [r0, #0]
 8000f86:	f001 fe8f 	bl	8002ca8 <HAL_CAN_AddTxMessage>
}
 8000f8a:	b003      	add	sp, #12
 8000f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f90:	200003a4 	.word	0x200003a4

08000f94 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f94:	b510      	push	{r4, lr}
	CAN_RxHeaderTypeDef rxHeader = {0};
 8000f96:	221c      	movs	r2, #28
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f98:	b08e      	sub	sp, #56	; 0x38
	uint8_t rxData[8] = {0};
 8000f9a:	2400      	movs	r4, #0
	CAN_RxHeaderTypeDef rxHeader = {0};
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	eb0d 0002 	add.w	r0, sp, r2
	uint8_t rxData[8] = {0};
 8000fa2:	e9cd 4400 	strd	r4, r4, [sp]
	CAN_RxHeaderTypeDef rxHeader = {0};
 8000fa6:	f006 fd49 	bl	8007a3c <memset>
	if (HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8000faa:	4819      	ldr	r0, [pc, #100]	; (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000fac:	466b      	mov	r3, sp
 8000fae:	6800      	ldr	r0, [r0, #0]
 8000fb0:	aa07      	add	r2, sp, #28
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f001 fec8 	bl	8002d48 <HAL_CAN_GetRxMessage>
 8000fb8:	b108      	cbz	r0, 8000fbe <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		Error_Handler();
 8000fba:	f000 fbbf 	bl	800173c <Error_Handler>
	uint8_t send_data_array[20] = {0};
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	a803      	add	r0, sp, #12
 8000fc4:	9402      	str	r4, [sp, #8]
 8000fc6:	f006 fd39 	bl	8007a3c <memset>
	uint32_t ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 8000fca:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
	send_data_array[index++] = rxHeader.IDE;
 8000fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fd0:	f88d 2009 	strb.w	r2, [sp, #9]
	uint32_t ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	bf18      	it	ne
 8000fd8:	460b      	movne	r3, r1
	send_data_array[index++] = ID >> 24;
 8000fda:	0e1a      	lsrs	r2, r3, #24
 8000fdc:	f88d 200a 	strb.w	r2, [sp, #10]
	send_data_array[index++] = ID >> 16;
 8000fe0:	0c1a      	lsrs	r2, r3, #16
 8000fe2:	f88d 200b 	strb.w	r2, [sp, #11]
	send_data_array[index++] = ID;
 8000fe6:	f88d 300d 	strb.w	r3, [sp, #13]
	send_data_array[index++] = ID >> 8;
 8000fea:	0a1a      	lsrs	r2, r3, #8
	send_data_array[index++] = rxHeader.DLC;
 8000fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000fee:	f88d 300e 	strb.w	r3, [sp, #14]
		send_data_array[index++] = rxData[i];
 8000ff2:	466b      	mov	r3, sp
 8000ff4:	cb03      	ldmia	r3!, {r0, r1}
 8000ff6:	f8cd 000f 	str.w	r0, [sp, #15]
 8000ffa:	f8cd 1013 	str.w	r1, [sp, #19]
	CDC_Transmit_FS(send_data_array, index);
 8000ffe:	4618      	mov	r0, r3
 8001000:	210f      	movs	r1, #15
	send_data_array[index++] = ID >> 8;
 8001002:	f88d 200c 	strb.w	r2, [sp, #12]
	CDC_Transmit_FS(send_data_array, index);
 8001006:	f006 fb0f 	bl	8007628 <CDC_Transmit_FS>
}
 800100a:	b00e      	add	sp, #56	; 0x38
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop
 8001010:	200003a4 	.word	0x200003a4

08001014 <STM32_PLC_Digital_Input_Get>:
 *      Author: Daniel Mårtensson
 */

#include "Functions.h"

bool STM32_PLC_Digital_Input_Get(uint8_t i) {
 8001014:	b508      	push	{r3, lr}
	switch (i) {
 8001016:	2808      	cmp	r0, #8
 8001018:	d824      	bhi.n	8001064 <STM32_PLC_Digital_Input_Get+0x50>
 800101a:	e8df f000 	tbb	[pc, r0]
 800101e:	0d05      	.short	0x0d05
 8001020:	1513110f 	.word	0x1513110f
 8001024:	1d19      	.short	0x1d19
 8001026:	20          	.byte	0x20
 8001027:	00          	.byte	0x00
	case 0:
		return HAL_GPIO_ReadPin(DI0_GPIO_Port, DI0_Pin);
 8001028:	2104      	movs	r1, #4
	case 1:
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <STM32_PLC_Digital_Input_Get+0x54>)
	case 6:
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
	case 7:
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
	case 8:
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 800102c:	f002 fba8 	bl	8003780 <HAL_GPIO_ReadPin>
 8001030:	3800      	subs	r0, #0
 8001032:	bf18      	it	ne
 8001034:	2001      	movne	r0, #1
	default:
		return 0;
	}
}
 8001036:	bd08      	pop	{r3, pc}
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001038:	2108      	movs	r1, #8
 800103a:	e7f6      	b.n	800102a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 800103c:	2110      	movs	r1, #16
 800103e:	e7f4      	b.n	800102a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8001040:	2120      	movs	r1, #32
 8001042:	e7f2      	b.n	800102a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	e7f0      	b.n	800102a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <STM32_PLC_Digital_Input_Get+0x58>)
 800104e:	e7ed      	b.n	800102c <STM32_PLC_Digital_Input_Get+0x18>
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <STM32_PLC_Digital_Input_Get+0x5c>)
 8001056:	e7e9      	b.n	800102c <STM32_PLC_Digital_Input_Get+0x18>
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	e7fa      	b.n	8001054 <STM32_PLC_Digital_Input_Get+0x40>
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	e7f3      	b.n	800104c <STM32_PLC_Digital_Input_Get+0x38>
	switch (i) {
 8001064:	2000      	movs	r0, #0
 8001066:	e7e6      	b.n	8001036 <STM32_PLC_Digital_Input_Get+0x22>
 8001068:	48001000 	.word	0x48001000
 800106c:	48000800 	.word	0x48000800
 8001070:	48001400 	.word	0x48001400

08001074 <STM32_PLC_Encoder>:
#include "Functions.h"

static TIM_HandleTypeDef* tim4_handle;
static TIM_HandleTypeDef* tim19_handle;

void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19) {
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	460c      	mov	r4, r1
	/* Encoder - Prescaler does not effect encoder */
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 8001078:	213c      	movs	r1, #60	; 0x3c
void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19) {
 800107a:	4605      	mov	r5, r0
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 800107c:	f004 f985 	bl	800538a <HAL_TIM_Encoder_Start>
 8001080:	b108      	cbz	r0, 8001086 <STM32_PLC_Encoder+0x12>
		Error_Handler();
 8001082:	f000 fb5b 	bl	800173c <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim19, TIM_CHANNEL_ALL) != HAL_OK)
 8001086:	213c      	movs	r1, #60	; 0x3c
 8001088:	4620      	mov	r0, r4
 800108a:	f004 f97e 	bl	800538a <HAL_TIM_Encoder_Start>
 800108e:	b108      	cbz	r0, 8001094 <STM32_PLC_Encoder+0x20>
		Error_Handler();
 8001090:	f000 fb54 	bl	800173c <Error_Handler>

	/* Save */
	tim4_handle = htim4;
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <STM32_PLC_Encoder+0x2c>)
 8001096:	601d      	str	r5, [r3, #0]
	tim19_handle = htim19;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <STM32_PLC_Encoder+0x30>)
 800109a:	601c      	str	r4, [r3, #0]
}
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop
 80010a0:	200003ac 	.word	0x200003ac
 80010a4:	200003a8 	.word	0x200003a8

080010a8 <STM32_PLC_Encoder_Get_Raw>:


uint16_t STM32_PLC_Encoder_Get_Raw(uint8_t i) {
	if(i == 0)
 80010a8:	b928      	cbnz	r0, 80010b6 <STM32_PLC_Encoder_Get_Raw+0xe>
		return __HAL_TIM_GET_COUNTER(tim4_handle);
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <STM32_PLC_Encoder_Get_Raw+0x14>)
	else
		return __HAL_TIM_GET_COUNTER(tim19_handle);
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010b2:	b280      	uxth	r0, r0
}
 80010b4:	4770      	bx	lr
		return __HAL_TIM_GET_COUNTER(tim19_handle);
 80010b6:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <STM32_PLC_Encoder_Get_Raw+0x18>)
 80010b8:	e7f8      	b.n	80010ac <STM32_PLC_Encoder_Get_Raw+0x4>
 80010ba:	bf00      	nop
 80010bc:	200003ac 	.word	0x200003ac
 80010c0:	200003a8 	.word	0x200003a8

080010c4 <read_flash.constprop.0>:
	*prescaler_for_PWM_0_3 = data[9];
	*prescaler_for_PWM_4_7 = data[10];
}

static void read_flash(uint16_t data[], uint8_t length){
	uint32_t address = ADDR_FLASH_PAGE_127;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <read_flash.constprop.0+0x14>)
	for(uint8_t i = 0; i < length; i++){
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <read_flash.constprop.0+0x18>)
 80010c8:	3802      	subs	r0, #2
		data[i] = *(__IO uint16_t*)address;
 80010ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80010ce:	f820 1f02 	strh.w	r1, [r0, #2]!
	for(uint8_t i = 0; i < length; i++){
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d1f9      	bne.n	80010ca <read_flash.constprop.0+0x6>
		address += 2;
	}
}
 80010d6:	4770      	bx	lr
 80010d8:	0803f800 	.word	0x0803f800
 80010dc:	0803f816 	.word	0x0803f816

080010e0 <write_flash>:

static void write_flash(uint16_t value, uint8_t overwrite_index){
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	4605      	mov	r5, r0

	/* Create the data */
	uint16_t data[FLASH_LENGTH_DATA];
	read_flash(data, FLASH_LENGTH_DATA);
 80010e6:	a804      	add	r0, sp, #16
static void write_flash(uint16_t value, uint8_t overwrite_index){
 80010e8:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 80010ea:	f7ff ffeb 	bl	80010c4 <read_flash.constprop.0>

	/* Overwrite */
	data[overwrite_index] = value;
 80010ee:	ab0a      	add	r3, sp, #40	; 0x28
 80010f0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80010f4:	f824 5c18 	strh.w	r5, [r4, #-24]

	/* Unlock */
	HAL_FLASH_Unlock();
 80010f8:	f002 f97a 	bl	80033f0 <HAL_FLASH_Unlock>

	/* Erase */
	FLASH_EraseInitTypeDef eraseInitStruct;
	eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
	eraseInitStruct.PageAddress = ADDR_FLASH_PAGE_127;
 80010fc:	4a10      	ldr	r2, [pc, #64]	; (8001140 <write_flash+0x60>)
 80010fe:	2300      	movs	r3, #0
 8001100:	e9cd 3201 	strd	r3, r2, [sp, #4]
	eraseInitStruct.NbPages     = 1;
	uint32_t PageError = 0;
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 8001104:	4669      	mov	r1, sp
	eraseInitStruct.NbPages     = 1;
 8001106:	2201      	movs	r2, #1
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 8001108:	a801      	add	r0, sp, #4
	eraseInitStruct.NbPages     = 1;
 800110a:	9203      	str	r2, [sp, #12]
	uint32_t PageError = 0;
 800110c:	9300      	str	r3, [sp, #0]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 800110e:	f002 fa25 	bl	800355c <HAL_FLASHEx_Erase>
 8001112:	b108      	cbz	r0, 8001118 <write_flash+0x38>
		Error_Handler();
 8001114:	f000 fb12 	bl	800173c <Error_Handler>
static void write_flash(uint16_t value, uint8_t overwrite_index){
 8001118:	4d09      	ldr	r5, [pc, #36]	; (8001140 <write_flash+0x60>)

	/* Write data */
	uint32_t index = 0;
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 800111a:	4e0a      	ldr	r6, [pc, #40]	; (8001144 <write_flash+0x64>)
 800111c:	ac04      	add	r4, sp, #16
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ADDR_FLASH_PAGE_127 + index, data[i]) != HAL_OK)
 800111e:	f834 2b02 	ldrh.w	r2, [r4], #2
 8001122:	2300      	movs	r3, #0
 8001124:	4629      	mov	r1, r5
 8001126:	2001      	movs	r0, #1
 8001128:	f002 f9a4 	bl	8003474 <HAL_FLASH_Program>
 800112c:	b108      	cbz	r0, 8001132 <write_flash+0x52>
			Error_Handler();
 800112e:	f000 fb05 	bl	800173c <Error_Handler>
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 8001132:	3502      	adds	r5, #2
 8001134:	42b5      	cmp	r5, r6
 8001136:	d1f2      	bne.n	800111e <write_flash+0x3e>
		index += 2;
	}

	/* Lock */
	HAL_FLASH_Lock();
 8001138:	f002 f96c 	bl	8003414 <HAL_FLASH_Lock>
}
 800113c:	b00a      	add	sp, #40	; 0x28
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	0803f800 	.word	0x0803f800
 8001144:	0803f816 	.word	0x0803f816

08001148 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 8001148:	4603      	mov	r3, r0
	switch(sdadc){
 800114a:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 800114c:	4608      	mov	r0, r1
	switch(sdadc){
 800114e:	d006      	beq.n	800115e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x16>
 8001150:	2b03      	cmp	r3, #3
 8001152:	d006      	beq.n	8001162 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1a>
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1e>
		write_flash(gain, 0);
 8001158:	2100      	movs	r1, #0
		write_flash(gain, 6);
 800115a:	f7ff bfc1 	b.w	80010e0 <write_flash>
		write_flash(gain, 3);
 800115e:	2103      	movs	r1, #3
 8001160:	e7fb      	b.n	800115a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
		write_flash(gain, 6);
 8001162:	2106      	movs	r1, #6
 8001164:	e7f9      	b.n	800115a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
}
 8001166:	4770      	bx	lr

08001168 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 8001168:	4603      	mov	r3, r0
	switch(sdadc){
 800116a:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 800116c:	4608      	mov	r0, r1
	switch(sdadc){
 800116e:	d006      	beq.n	800117e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x16>
 8001170:	2b03      	cmp	r3, #3
 8001172:	d006      	beq.n	8001182 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1a>
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1e>
		write_flash(gain, 1);
 8001178:	4619      	mov	r1, r3
		write_flash(gain, 7);
 800117a:	f7ff bfb1 	b.w	80010e0 <write_flash>
		write_flash(gain, 4);
 800117e:	2104      	movs	r1, #4
 8001180:	e7fb      	b.n	800117a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
		write_flash(gain, 7);
 8001182:	2107      	movs	r1, #7
 8001184:	e7f9      	b.n	800117a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
}
 8001186:	4770      	bx	lr

08001188 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 8001188:	4603      	mov	r3, r0
	switch(sdadc){
 800118a:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 800118c:	4608      	mov	r0, r1
	switch(sdadc){
 800118e:	d006      	beq.n	800119e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x16>
 8001190:	2b03      	cmp	r3, #3
 8001192:	d006      	beq.n	80011a2 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1a>
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1e>
		write_flash(gain, 2);
 8001198:	2102      	movs	r1, #2
		write_flash(gain, 8);
 800119a:	f7ff bfa1 	b.w	80010e0 <write_flash>
		write_flash(gain, 5);
 800119e:	2105      	movs	r1, #5
 80011a0:	e7fb      	b.n	800119a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
		write_flash(gain, 8);
 80011a2:	2108      	movs	r1, #8
 80011a4:	e7f9      	b.n	800119a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
}
 80011a6:	4770      	bx	lr

080011a8 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>:
	write_flash(prescaler, 9);
 80011a8:	2109      	movs	r1, #9
 80011aa:	f7ff bf99 	b.w	80010e0 <write_flash>

080011ae <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>:
	write_flash(prescaler, 10);
 80011ae:	210a      	movs	r1, #10
 80011b0:	f7ff bf96 	b.w	80010e0 <write_flash>

080011b4 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80011ba:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80011bc:	460d      	mov	r5, r1
 80011be:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80011c0:	f7ff ff80 	bl	80010c4 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[0];
 80011c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80011c8:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[1];
 80011ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011ce:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[2];
 80011d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80011d4:	7023      	strb	r3, [r4, #0]
}
 80011d6:	b006      	add	sp, #24
 80011d8:	bd70      	pop	{r4, r5, r6, pc}

080011da <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80011da:	b570      	push	{r4, r5, r6, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80011e0:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80011e2:	460d      	mov	r5, r1
 80011e4:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80011e6:	f7ff ff6d 	bl	80010c4 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[3];
 80011ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80011ee:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[4];
 80011f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80011f4:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[5];
 80011f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80011fa:	7023      	strb	r3, [r4, #0]
}
 80011fc:	b006      	add	sp, #24
 80011fe:	bd70      	pop	{r4, r5, r6, pc}

08001200 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001206:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 8001208:	460d      	mov	r5, r1
 800120a:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 800120c:	f7ff ff5a 	bl	80010c4 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[6];
 8001210:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001214:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[7];
 8001216:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800121a:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[8];
 800121c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001220:	7023      	strb	r3, [r4, #0]
}
 8001222:	b006      	add	sp, #24
 8001224:	bd70      	pop	{r4, r5, r6, pc}

08001226 <STM32_PLC_Flash_Get_PWM_Prescalers>:
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 8001226:	b530      	push	{r4, r5, lr}
 8001228:	b087      	sub	sp, #28
 800122a:	4605      	mov	r5, r0
	read_flash(data, FLASH_LENGTH_DATA);
 800122c:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 800122e:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 8001230:	f7ff ff48 	bl	80010c4 <read_flash.constprop.0>
	*prescaler_for_PWM_0_3 = data[9];
 8001234:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001238:	802b      	strh	r3, [r5, #0]
	*prescaler_for_PWM_4_7 = data[10];
 800123a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800123e:	8023      	strh	r3, [r4, #0]
}
 8001240:	b007      	add	sp, #28
 8001242:	bd30      	pop	{r4, r5, pc}

08001244 <compute_period>:

}

static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
	/* Find the index - i0 and i1 can never be larger than LENGTH_ARRAY and lower than 0 */
	uint8_t a = 2*LENGTH_ARRAY - left;
 8001244:	f1c1 01c8 	rsb	r1, r1, #200	; 0xc8
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 8001248:	b2c9      	uxtb	r1, r1
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	1e4b      	subs	r3, r1, #1
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 800124e:	3902      	subs	r1, #2
static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
 8001250:	b510      	push	{r4, lr}
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 8001252:	fb93 f4f2 	sdiv	r4, r3, r2
 8001256:	fb02 3314 	mls	r3, r2, r4, r3
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 800125a:	fb91 f4f2 	sdiv	r4, r1, r2
 800125e:	fb02 1114 	mls	r1, r2, r4, r1

	/* Check absolute value */
	if(input_capture[i1] > input_capture[i0])
 8001262:	b2db      	uxtb	r3, r3
 8001264:	b2c9      	uxtb	r1, r1
 8001266:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800126a:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 800126e:	4293      	cmp	r3, r2
 8001270:	d902      	bls.n	8001278 <compute_period+0x34>
		return input_capture[i1] - input_capture[i0];
 8001272:	1a98      	subs	r0, r3, r2
	else if(input_capture[i1] < input_capture[i0])
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 8001274:	b280      	uxth	r0, r0
	else
		return 0;
}
 8001276:	bd10      	pop	{r4, pc}
	else if(input_capture[i1] < input_capture[i0])
 8001278:	d202      	bcs.n	8001280 <compute_period+0x3c>
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	1a80      	subs	r0, r0, r2
 800127e:	e7f9      	b.n	8001274 <compute_period+0x30>
		return 0;
 8001280:	2000      	movs	r0, #0
 8001282:	e7f8      	b.n	8001276 <compute_period+0x32>

08001284 <STM32_PLC_Input_Capture>:
void STM32_PLC_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16) {
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	460c      	mov	r4, r1
 8001288:	4605      	mov	r5, r0
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, LENGTH_ARRAY) != HAL_OK)
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <STM32_PLC_Input_Capture+0x34>)
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2100      	movs	r1, #0
 8001290:	4620      	mov	r0, r4
 8001292:	f004 fe51 	bl	8005f38 <HAL_TIM_IC_Start_DMA>
 8001296:	b108      	cbz	r0, 800129c <STM32_PLC_Input_Capture+0x18>
		Error_Handler();
 8001298:	f000 fa50 	bl	800173c <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim17, TIM_CHANNEL_1, (uint32_t*)input_capture0, LENGTH_ARRAY) != HAL_OK)
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <STM32_PLC_Input_Capture+0x38>)
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	2100      	movs	r1, #0
 80012a2:	4628      	mov	r0, r5
 80012a4:	f004 fe48 	bl	8005f38 <HAL_TIM_IC_Start_DMA>
 80012a8:	b108      	cbz	r0, 80012ae <STM32_PLC_Input_Capture+0x2a>
		Error_Handler();
 80012aa:	f000 fa47 	bl	800173c <Error_Handler>
	handler_tim17 = htim17;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <STM32_PLC_Input_Capture+0x3c>)
 80012b0:	601d      	str	r5, [r3, #0]
	handler_tim16 = htim16;
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <STM32_PLC_Input_Capture+0x40>)
 80012b4:	601c      	str	r4, [r3, #0]
}
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	20000480 	.word	0x20000480
 80012bc:	200003b8 	.word	0x200003b8
 80012c0:	200003b4 	.word	0x200003b4
 80012c4:	200003b0 	.word	0x200003b0

080012c8 <STM32_PLC_Input_Capture_Get_Raw>:


uint16_t STM32_PLC_Input_Capture_Get_Raw(uint8_t i){
	if(i == 0)
 80012c8:	b940      	cbnz	r0, 80012dc <STM32_PLC_Input_Capture_Get_Raw+0x14>
		return compute_period(input_capture0, handler_tim17->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <STM32_PLC_Input_Capture_Get_Raw+0x24>)
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <STM32_PLC_Input_Capture_Get_Raw+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	b2c9      	uxtb	r1, r1
	else
		return compute_period(input_capture1, handler_tim16->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 80012d8:	f7ff bfb4 	b.w	8001244 <compute_period>
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <STM32_PLC_Input_Capture_Get_Raw+0x2c>)
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <STM32_PLC_Input_Capture_Get_Raw+0x30>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	b2c9      	uxtb	r1, r1
 80012ea:	e7f5      	b.n	80012d8 <STM32_PLC_Input_Capture_Get_Raw+0x10>
 80012ec:	200003b4 	.word	0x200003b4
 80012f0:	200003b8 	.word	0x200003b8
 80012f4:	200003b0 	.word	0x200003b0
 80012f8:	20000480 	.word	0x20000480

080012fc <STM32_PLC_LED>:
#include "Functions.h"

static void LED(uint8_t binary[]);

/* Select a program number between 0 and 31 e.g 5-bit. 0 is no program activated */
void STM32_PLC_LED(uint8_t binary_value){
 80012fc:	b510      	push	{r4, lr}
 80012fe:	4604      	mov	r4, r0
	binary[0] = binary_value & 0b0001;
	LED(binary);
}

static void LED(uint8_t binary[]) {
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, binary[0]);
 8001300:	f004 0201 	and.w	r2, r4, #1
 8001304:	480e      	ldr	r0, [pc, #56]	; (8001340 <STM32_PLC_LED+0x44>)
 8001306:	2120      	movs	r1, #32
 8001308:	f002 fa40 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, binary[1]);
 800130c:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <STM32_PLC_LED+0x44>)
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	f002 fa3a 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, binary[2]);
 8001318:	f3c4 0280 	ubfx	r2, r4, #2, #1
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <STM32_PLC_LED+0x44>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	f002 fa34 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, binary[3]);
 8001324:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <STM32_PLC_LED+0x48>)
 800132a:	2110      	movs	r1, #16
 800132c:	f002 fa2e 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, binary[4]);
 8001330:	0922      	lsrs	r2, r4, #4
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <STM32_PLC_LED+0x48>)
}
 8001334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, binary[4]);
 8001338:	2120      	movs	r1, #32
 800133a:	f002 ba27 	b.w	800378c <HAL_GPIO_WritePin>
 800133e:	bf00      	nop
 8001340:	48000c00 	.word	0x48000c00
 8001344:	48000400 	.word	0x48000400

08001348 <STM32_PLC_PWM>:

static TIM_HandleTypeDef *PWM_TIM_0_3;
static TIM_HandleTypeDef *PWM_TIM_4_7;
static uint16_t PWM[8] = { 0 };

void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	460c      	mov	r4, r1
	/* See PWM frequencies at PWM_frequency_settings_frame.c */
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 800134c:	2100      	movs	r1, #0
void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 800134e:	4605      	mov	r5, r0
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001350:	f004 fdf0 	bl	8005f34 <HAL_TIM_PWM_Start>
 8001354:	b108      	cbz	r0, 800135a <STM32_PLC_PWM+0x12>
		Error_Handler();
 8001356:	f000 f9f1 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2)  != HAL_OK)
 800135a:	2104      	movs	r1, #4
 800135c:	4628      	mov	r0, r5
 800135e:	f004 fde9 	bl	8005f34 <HAL_TIM_PWM_Start>
 8001362:	b108      	cbz	r0, 8001368 <STM32_PLC_PWM+0x20>
			Error_Handler();
 8001364:	f000 f9ea 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3)  != HAL_OK)
 8001368:	2108      	movs	r1, #8
 800136a:	4628      	mov	r0, r5
 800136c:	f004 fde2 	bl	8005f34 <HAL_TIM_PWM_Start>
 8001370:	b108      	cbz	r0, 8001376 <STM32_PLC_PWM+0x2e>
			Error_Handler();
 8001372:	f000 f9e3 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4)  != HAL_OK)
 8001376:	210c      	movs	r1, #12
 8001378:	4628      	mov	r0, r5
 800137a:	f004 fddb 	bl	8005f34 <HAL_TIM_PWM_Start>
 800137e:	b108      	cbz	r0, 8001384 <STM32_PLC_PWM+0x3c>
			Error_Handler();
 8001380:	f000 f9dc 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_1)  != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4620      	mov	r0, r4
 8001388:	f004 fdd4 	bl	8005f34 <HAL_TIM_PWM_Start>
 800138c:	b108      	cbz	r0, 8001392 <STM32_PLC_PWM+0x4a>
		Error_Handler();
 800138e:	f000 f9d5 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_2)  != HAL_OK)
 8001392:	2104      	movs	r1, #4
 8001394:	4620      	mov	r0, r4
 8001396:	f004 fdcd 	bl	8005f34 <HAL_TIM_PWM_Start>
 800139a:	b108      	cbz	r0, 80013a0 <STM32_PLC_PWM+0x58>
			Error_Handler();
 800139c:	f000 f9ce 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_3)  != HAL_OK)
 80013a0:	2108      	movs	r1, #8
 80013a2:	4620      	mov	r0, r4
 80013a4:	f004 fdc6 	bl	8005f34 <HAL_TIM_PWM_Start>
 80013a8:	b108      	cbz	r0, 80013ae <STM32_PLC_PWM+0x66>
			Error_Handler();
 80013aa:	f000 f9c7 	bl	800173c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_4)  != HAL_OK)
 80013ae:	210c      	movs	r1, #12
 80013b0:	4620      	mov	r0, r4
 80013b2:	f004 fdbf 	bl	8005f34 <HAL_TIM_PWM_Start>
 80013b6:	b108      	cbz	r0, 80013bc <STM32_PLC_PWM+0x74>
			Error_Handler();
 80013b8:	f000 f9c0 	bl	800173c <Error_Handler>
	PWM_TIM_4_7 = htim2;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <STM32_PLC_PWM+0x80>)
 80013be:	601d      	str	r5, [r3, #0]
	PWM_TIM_0_3 = htim5;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <STM32_PLC_PWM+0x84>)
 80013c2:	601c      	str	r4, [r3, #0]
}
 80013c4:	bd38      	pop	{r3, r4, r5, pc}
 80013c6:	bf00      	nop
 80013c8:	2000055c 	.word	0x2000055c
 80013cc:	20000558 	.word	0x20000558

080013d0 <STM32_PLC_PWM_Set>:

void STM32_PLC_PWM_Set(uint8_t i, uint16_t ON_Period) {
	switch (i) {
 80013d0:	2807      	cmp	r0, #7
 80013d2:	d83c      	bhi.n	800144e <STM32_PLC_PWM_Set+0x7e>
 80013d4:	e8df f000 	tbb	[pc, r0]
 80013d8:	19120b04 	.word	0x19120b04
 80013dc:	352e2720 	.word	0x352e2720
	case 0:
		PWM_TIM_0_3->Instance->CCR1 = ON_Period;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <STM32_PLC_PWM_Set+0x80>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[0] = ON_Period;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 80013ea:	8019      	strh	r1, [r3, #0]
		break;
 80013ec:	4770      	bx	lr
	case 1:
		PWM_TIM_0_3->Instance->CCR2 = ON_Period;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <STM32_PLC_PWM_Set+0x80>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[1] = ON_Period;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 80013f8:	8059      	strh	r1, [r3, #2]
		break;
 80013fa:	4770      	bx	lr
	case 2:
		PWM_TIM_0_3->Instance->CCR3 = ON_Period;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <STM32_PLC_PWM_Set+0x80>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[2] = ON_Period;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 8001406:	8099      	strh	r1, [r3, #4]
		break;
 8001408:	4770      	bx	lr
	case 3:
		PWM_TIM_0_3->Instance->CCR4 = ON_Period;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <STM32_PLC_PWM_Set+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[3] = ON_Period;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 8001414:	80d9      	strh	r1, [r3, #6]
		break;
 8001416:	4770      	bx	lr
	case 4:
		PWM_TIM_4_7->Instance->CCR1 = ON_Period;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <STM32_PLC_PWM_Set+0x88>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[4] = ON_Period;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 8001422:	8119      	strh	r1, [r3, #8]
		break;
 8001424:	4770      	bx	lr
	case 5:
		PWM_TIM_4_7->Instance->CCR2 = ON_Period;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <STM32_PLC_PWM_Set+0x88>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[5] = ON_Period;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 8001430:	8159      	strh	r1, [r3, #10]
		break;
 8001432:	4770      	bx	lr
	case 6:
		PWM_TIM_4_7->Instance->CCR3 = ON_Period;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <STM32_PLC_PWM_Set+0x88>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[6] = ON_Period;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 800143e:	8199      	strh	r1, [r3, #12]
		break;
 8001440:	4770      	bx	lr
	case 7:
		PWM_TIM_4_7->Instance->CCR4 = ON_Period;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <STM32_PLC_PWM_Set+0x88>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[7] = ON_Period;
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <STM32_PLC_PWM_Set+0x84>)
 800144c:	81d9      	strh	r1, [r3, #14]
		break;
	}
}
 800144e:	4770      	bx	lr
 8001450:	20000558 	.word	0x20000558
 8001454:	20000548 	.word	0x20000548
 8001458:	2000055c 	.word	0x2000055c

0800145c <STM32_PLC_PWM_Reset>:

uint16_t STM32_PLC_PWM_Get(uint8_t i) {
	return PWM[i];
}

void STM32_PLC_PWM_Reset() {
 800145c:	b508      	push	{r3, lr}
 800145e:	2200      	movs	r2, #0
	for(uint8_t i = 0; i < 8; i++)
		STM32_PLC_PWM_Set(i, 0);
 8001460:	b2d0      	uxtb	r0, r2
 8001462:	2100      	movs	r1, #0
	for(uint8_t i = 0; i < 8; i++)
 8001464:	3201      	adds	r2, #1
		STM32_PLC_PWM_Set(i, 0);
 8001466:	f7ff ffb3 	bl	80013d0 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++)
 800146a:	2a08      	cmp	r2, #8
 800146c:	d1f8      	bne.n	8001460 <STM32_PLC_PWM_Reset+0x4>
}
 800146e:	bd08      	pop	{r3, pc}

08001470 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>:

void STM32_PLC_PWM0_To_PWM3_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0x10>)
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 8001478:	b109      	cbz	r1, 800147e <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3(prescaler);
 800147a:	f7ff be95 	b.w	80011a8 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>
}
 800147e:	4770      	bx	lr
 8001480:	20000558 	.word	0x20000558

08001484 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>:

void STM32_PLC_PWM4_To_PWM7_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_4_7->Instance->PSC = prescaler;
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0x10>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 800148c:	b109      	cbz	r1, 8001492 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7(prescaler);
 800148e:	f7ff be8e 	b.w	80011ae <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>
}
 8001492:	4770      	bx	lr
 8001494:	2000055c 	.word	0x2000055c

08001498 <CDC_ReceiveCallback>:
 *
 * }
 * is there below
 */

void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Read all bytes as they where packages */
	uint32_t byte_index = 0;
 800149c:	2500      	movs	r5, #0
void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 800149e:	b095      	sub	sp, #84	; 0x54
 80014a0:	4606      	mov	r6, r0
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4689      	mov	r9, r1
	return byte_index;
}

static uint32_t send_back_adc_gains(uint32_t byte_index, uint8_t *receive_buf){
	/* Create array of gains */
	uint8_t send_data_array[4] = {0};
 80014a6:	46a8      	mov	r8, r5
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
		break;
	}

	/* Fill the array */
	send_data_array[index++] = SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE;
 80014a8:	f04f 0a07 	mov.w	sl, #7
	while(byte_index < receive_len){
 80014ac:	454d      	cmp	r5, r9
 80014ae:	d303      	bcc.n	80014b8 <CDC_ReceiveCallback+0x20>
}
 80014b0:	3754      	adds	r7, #84	; 0x54
 80014b2:	46bd      	mov	sp, r7
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(message_type){
 80014b8:	5d73      	ldrb	r3, [r6, r5]
 80014ba:	3b01      	subs	r3, #1
		uint8_t message_type = receive_buf[byte_index++];
 80014bc:	1c6c      	adds	r4, r5, #1
		switch(message_type){
 80014be:	2b06      	cmp	r3, #6
 80014c0:	f200 812f 	bhi.w	8001722 <CDC_ReceiveCallback+0x28a>
 80014c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80014c8:	012d0007 	.word	0x012d0007
 80014cc:	00d10033 	.word	0x00d10033
 80014d0:	00db00be 	.word	0x00db00be
 80014d4:	00f6      	.short	0x00f6
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 80014d6:	1972      	adds	r2, r6, r5
	TxHeader.IDE = receive_buf[byte_index++]; /* CAN_ID_STD or CAN_ID_EXT */
 80014d8:	5d33      	ldrb	r3, [r6, r4]
 80014da:	61fb      	str	r3, [r7, #28]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 80014dc:	78d3      	ldrb	r3, [r2, #3]
 80014de:	7891      	ldrb	r1, [r2, #2]
	TxHeader.DLC = receive_buf[byte_index++];
 80014e0:	7994      	ldrb	r4, [r2, #6]
 80014e2:	627c      	str	r4, [r7, #36]	; 0x24
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80014ea:	7951      	ldrb	r1, [r2, #5]
	CAN_TxHeaderTypeDef TxHeader = {0};
 80014ec:	f8c7 8020 	str.w	r8, [r7, #32]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 80014f0:	430b      	orrs	r3, r1
 80014f2:	7911      	ldrb	r1, [r2, #4]
	CAN_TxHeaderTypeDef TxHeader = {0};
 80014f4:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 80014f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	TxHeader.ExtId = ID;
 80014fc:	e9c7 3305 	strd	r3, r3, [r7, #20]
	uint8_t data[TxHeader.DLC];
 8001500:	1de3      	adds	r3, r4, #7
 8001502:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
static uint32_t read_can_bus_message_from_open_source_logger(uint32_t byte_index, uint8_t *receive_buf){
 8001506:	46eb      	mov	fp, sp
	TxHeader.DLC = receive_buf[byte_index++];
 8001508:	3507      	adds	r5, #7
	uint8_t data[TxHeader.DLC];
 800150a:	ebad 0d03 	sub.w	sp, sp, r3
		data[i] = receive_buf[byte_index++];
 800150e:	4622      	mov	r2, r4
 8001510:	1971      	adds	r1, r6, r5
 8001512:	4668      	mov	r0, sp
 8001514:	f006 fa84 	bl	8007a20 <memcpy>
	STM32_PLC_CAN_Transmit(data, &TxHeader);
 8001518:	4668      	mov	r0, sp
 800151a:	f107 0114 	add.w	r1, r7, #20
 800151e:	f7ff fd2d 	bl	8000f7c <STM32_PLC_CAN_Transmit>
 8001522:	442c      	add	r4, r5
	return byte_index;
 8001524:	46dd      	mov	sp, fp
			STM32_PLC_LED(READ_CAN_BUS_MESSAGE_TYPE);
 8001526:	2001      	movs	r0, #1
			STM32_PLC_LED(READ_SET_ANALOG_INPUT_GAIN_MESSAGE_TYPE);
 8001528:	f7ff fee8 	bl	80012fc <STM32_PLC_LED>
			break;
 800152c:	e088      	b.n	8001640 <CDC_ReceiveCallback+0x1a8>
 800152e:	4434      	add	r4, r6
		switch(message_type){
 8001530:	4623      	mov	r3, r4
 8001532:	f04f 0b00 	mov.w	fp, #0
		STM32_PLC_PWM_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 8001536:	7819      	ldrb	r1, [r3, #0]
 8001538:	785a      	ldrb	r2, [r3, #1]
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	fa5f f08b 	uxtb.w	r0, fp
 8001540:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8001544:	f7ff ff44 	bl	80013d0 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++){
 8001548:	f10b 0b01 	add.w	fp, fp, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1bb 0f08 	cmp.w	fp, #8
 8001552:	f103 0302 	add.w	r3, r3, #2
 8001556:	d1ee      	bne.n	8001536 <CDC_ReceiveCallback+0x9e>
 8001558:	f04f 0b00 	mov.w	fp, #0
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 800155c:	7c21      	ldrb	r1, [r4, #16]
 800155e:	7c63      	ldrb	r3, [r4, #17]
 8001560:	fa5f f08b 	uxtb.w	r0, fp
 8001564:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	for(uint8_t i = 0; i < 3; i++){
 8001568:	f10b 0b01 	add.w	fp, fp, #1
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 800156c:	f7ff fcae 	bl	8000ecc <STM32_PLC_Analog_Output_Set>
	for(uint8_t i = 0; i < 3; i++){
 8001570:	f1bb 0f03 	cmp.w	fp, #3
 8001574:	f104 0402 	add.w	r4, r4, #2
 8001578:	d1f0      	bne.n	800155c <CDC_ReceiveCallback+0xc4>
	uint8_t send_data_array[60] = {0};
 800157a:	2238      	movs	r2, #56	; 0x38
 800157c:	2100      	movs	r1, #0
 800157e:	f107 0018 	add.w	r0, r7, #24
		byte_index += 2;
 8001582:	f105 0417 	add.w	r4, r5, #23
	uint8_t send_data_array[60] = {0};
 8001586:	f8c7 8014 	str.w	r8, [r7, #20]
 800158a:	f107 0514 	add.w	r5, r7, #20
 800158e:	f006 fa55 	bl	8007a3c <memset>
	send_data_array[index++] = SEND_MEASUREMENTS_MESSAGE_TYPE;
 8001592:	2302      	movs	r3, #2
 8001594:	753b      	strb	r3, [r7, #20]
 8001596:	462a      	mov	r2, r5
 8001598:	2300      	movs	r3, #0
 800159a:	46ab      	mov	fp, r5
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	603a      	str	r2, [r7, #0]
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	f7ff fd37 	bl	8001014 <STM32_PLC_Digital_Input_Get>
	for (uint8_t i = 0; i < 9; i++)
 80015a6:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80015a8:	683a      	ldr	r2, [r7, #0]
	for (uint8_t i = 0; i < 9; i++)
 80015aa:	3301      	adds	r3, #1
 80015ac:	2b09      	cmp	r3, #9
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80015ae:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < 9; i++)
 80015b2:	d1f3      	bne.n	800159c <CDC_ReceiveCallback+0x104>
 80015b4:	462a      	mov	r2, r5
 80015b6:	2300      	movs	r3, #0
		uint16_t adc_value = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	603a      	str	r2, [r7, #0]
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	f7ff fc03 	bl	8000dc8 <STM32_PLC_Analog_Input_ADC_Get_Raw>
	for (uint8_t i = 0; i < 12; i++) {
 80015c2:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] =  adc_value>> 8;
 80015c4:	683a      	ldr	r2, [r7, #0]
	for (uint8_t i = 0; i < 12; i++) {
 80015c6:	3301      	adds	r3, #1
		send_data_array[index++] =  adc_value>> 8;
 80015c8:	0a01      	lsrs	r1, r0, #8
	for (uint8_t i = 0; i < 12; i++) {
 80015ca:	2b0c      	cmp	r3, #12
		send_data_array[index++] =  adc_value>> 8;
 80015cc:	7291      	strb	r1, [r2, #10]
		send_data_array[index++] = adc_value;
 80015ce:	72d0      	strb	r0, [r2, #11]
	for (uint8_t i = 0; i < 12; i++) {
 80015d0:	f102 0202 	add.w	r2, r2, #2
 80015d4:	d1f0      	bne.n	80015b8 <CDC_ReceiveCallback+0x120>
 80015d6:	2300      	movs	r3, #0
		uint16_t adc_value = STM32_PLC_Analog_Input_DADC_Get_Raw(i);
 80015d8:	b2d8      	uxtb	r0, r3
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	f7ff fc32 	bl	8000e44 <STM32_PLC_Analog_Input_DADC_Get_Raw>
	for (uint8_t i = 0; i < 5; i++) {
 80015e0:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] = adc_value;
 80015e2:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
	for (uint8_t i = 0; i < 5; i++) {
 80015e6:	3301      	adds	r3, #1
		send_data_array[index++] = adc_value >> 8;
 80015e8:	f3c0 2207 	ubfx	r2, r0, #8, #8
	for (uint8_t i = 0; i < 5; i++) {
 80015ec:	2b05      	cmp	r3, #5
		send_data_array[index++] = adc_value >> 8;
 80015ee:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	for (uint8_t i = 0; i < 5; i++) {
 80015f2:	f105 0502 	add.w	r5, r5, #2
 80015f6:	d1ef      	bne.n	80015d8 <CDC_ReceiveCallback+0x140>
		uint16_t input_capture_value = STM32_PLC_Input_Capture_Get_Raw(i);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fe65 	bl	80012c8 <STM32_PLC_Input_Capture_Get_Raw>
		send_data_array[index++] = input_capture_value >> 8;
 80015fe:	0a03      	lsrs	r3, r0, #8
		send_data_array[index++] = input_capture_value;
 8001600:	f887 0041 	strb.w	r0, [r7, #65]	; 0x41
		uint16_t input_capture_value = STM32_PLC_Input_Capture_Get_Raw(i);
 8001604:	2001      	movs	r0, #1
		send_data_array[index++] = input_capture_value >> 8;
 8001606:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		uint16_t input_capture_value = STM32_PLC_Input_Capture_Get_Raw(i);
 800160a:	f7ff fe5d 	bl	80012c8 <STM32_PLC_Input_Capture_Get_Raw>
		send_data_array[index++] = input_capture_value >> 8;
 800160e:	0a03      	lsrs	r3, r0, #8
		send_data_array[index++] = input_capture_value;
 8001610:	f887 0043 	strb.w	r0, [r7, #67]	; 0x43
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 8001614:	2000      	movs	r0, #0
		send_data_array[index++] = input_capture_value >> 8;
 8001616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 800161a:	f7ff fd45 	bl	80010a8 <STM32_PLC_Encoder_Get_Raw>
		send_data_array[index++] = encoder_value >> 8;
 800161e:	0a03      	lsrs	r3, r0, #8
		send_data_array[index++] = encoder_value;
 8001620:	f887 0045 	strb.w	r0, [r7, #69]	; 0x45
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 8001624:	2001      	movs	r0, #1
		send_data_array[index++] = encoder_value >> 8;
 8001626:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 800162a:	f7ff fd3d 	bl	80010a8 <STM32_PLC_Encoder_Get_Raw>
	CDC_Transmit_FS(send_data_array, index);
 800162e:	2134      	movs	r1, #52	; 0x34
		send_data_array[index++] = encoder_value >> 8;
 8001630:	0a03      	lsrs	r3, r0, #8
		send_data_array[index++] = encoder_value;
 8001632:	f887 0047 	strb.w	r0, [r7, #71]	; 0x47
	CDC_Transmit_FS(send_data_array, index);
 8001636:	4658      	mov	r0, fp
		send_data_array[index++] = encoder_value >> 8;
 8001638:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CDC_Transmit_FS(send_data_array, index);
 800163c:	f005 fff4 	bl	8007628 <CDC_Transmit_FS>
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 8001640:	4625      	mov	r5, r4
 8001642:	e733      	b.n	80014ac <CDC_ReceiveCallback+0x14>
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 8001644:	1973      	adds	r3, r6, r5
	uint8_t pwm_peripheral = receive_buf[byte_index++];
 8001646:	5d31      	ldrb	r1, [r6, r4]
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 8001648:	789a      	ldrb	r2, [r3, #2]
 800164a:	78d8      	ldrb	r0, [r3, #3]
	byte_index += 2;
 800164c:	1d2c      	adds	r4, r5, #4
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 800164e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	switch(pwm_peripheral){
 8001652:	b119      	cbz	r1, 800165c <CDC_ReceiveCallback+0x1c4>
 8001654:	2901      	cmp	r1, #1
 8001656:	d005      	beq.n	8001664 <CDC_ReceiveCallback+0x1cc>
			STM32_PLC_LED(READ_SET_PWM_PRESCALER_MESSAGE_TYPE);
 8001658:	2005      	movs	r0, #5
 800165a:	e765      	b.n	8001528 <CDC_ReceiveCallback+0x90>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 800165c:	2101      	movs	r1, #1
 800165e:	f7ff ff07 	bl	8001470 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
		break;
 8001662:	e7f9      	b.n	8001658 <CDC_ReceiveCallback+0x1c0>
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);
 8001664:	f7ff ff0e 	bl	8001484 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
		break;
 8001668:	e7f6      	b.n	8001658 <CDC_ReceiveCallback+0x1c0>
	uint8_t sdadc = receive_buf[byte_index++];
 800166a:	5d30      	ldrb	r0, [r6, r4]
	uint8_t gain = receive_buf[byte_index++];
 800166c:	1d2c      	adds	r4, r5, #4
 800166e:	4435      	add	r5, r6
	STM32_PLC_Analog_Input_Set_Gain(sdadc, configuration_index, gain, true);
 8001670:	2301      	movs	r3, #1
 8001672:	78ea      	ldrb	r2, [r5, #3]
 8001674:	78a9      	ldrb	r1, [r5, #2]
 8001676:	f7ff fb01 	bl	8000c7c <STM32_PLC_Analog_Input_Set_Gain>
			STM32_PLC_LED(READ_SET_ANALOG_INPUT_GAIN_MESSAGE_TYPE);
 800167a:	2004      	movs	r0, #4
 800167c:	e754      	b.n	8001528 <CDC_ReceiveCallback+0x90>
	uint8_t send_data_array[5] = {0};
	uint8_t index = 0;

	/* Get the prescalers */
	uint16_t prescaler_for_PWM_0_3, prescaler_for_PWM_4_7;
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 800167e:	f107 0112 	add.w	r1, r7, #18
 8001682:	f107 0010 	add.w	r0, r7, #16
	uint8_t send_data_array[5] = {0};
 8001686:	f8c7 8014 	str.w	r8, [r7, #20]
 800168a:	f887 8018 	strb.w	r8, [r7, #24]
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 800168e:	f7ff fdca 	bl	8001226 <STM32_PLC_Flash_Get_PWM_Prescalers>

	/* Fill the array */
	send_data_array[index++] = SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE;
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 8001692:	8a3b      	ldrh	r3, [r7, #16]
	send_data_array[index++] = prescaler_for_PWM_0_3;
 8001694:	75bb      	strb	r3, [r7, #22]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 8001696:	0a1a      	lsrs	r2, r3, #8
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 8001698:	8a7b      	ldrh	r3, [r7, #18]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 800169a:	757a      	strb	r2, [r7, #21]
	send_data_array[index++] = SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE;
 800169c:	2506      	movs	r5, #6
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 800169e:	0a1a      	lsrs	r2, r3, #8
	send_data_array[index++] = prescaler_for_PWM_4_7;

	/* Send the data via USB */
	CDC_Transmit_FS(send_data_array, index);
 80016a0:	2105      	movs	r1, #5
 80016a2:	f107 0014 	add.w	r0, r7, #20
	send_data_array[index++] = SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE;
 80016a6:	753d      	strb	r5, [r7, #20]
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 80016a8:	75fa      	strb	r2, [r7, #23]
	send_data_array[index++] = prescaler_for_PWM_4_7;
 80016aa:	763b      	strb	r3, [r7, #24]
	CDC_Transmit_FS(send_data_array, index);
 80016ac:	f005 ffbc 	bl	8007628 <CDC_Transmit_FS>
			STM32_PLC_LED(SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE);
 80016b0:	4628      	mov	r0, r5
 80016b2:	e739      	b.n	8001528 <CDC_ReceiveCallback+0x90>
	uint8_t sdadc = receive_buf[byte_index++];
 80016b4:	5d33      	ldrb	r3, [r6, r4]
	uint8_t send_data_array[4] = {0};
 80016b6:	f8c7 8014 	str.w	r8, [r7, #20]
	switch(sdadc){
 80016ba:	2b02      	cmp	r3, #2
	uint8_t sdadc = receive_buf[byte_index++];
 80016bc:	f105 0502 	add.w	r5, r5, #2
	switch(sdadc){
 80016c0:	d01d      	beq.n	80016fe <CDC_ReceiveCallback+0x266>
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d024      	beq.n	8001710 <CDC_ReceiveCallback+0x278>
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <CDC_ReceiveCallback+0x242>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 80016ca:	f107 0212 	add.w	r2, r7, #18
 80016ce:	f107 0110 	add.w	r1, r7, #16
 80016d2:	f107 000f 	add.w	r0, r7, #15
 80016d6:	f7ff fd6d 	bl	80011b4 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	send_data_array[index++] = gain_for_configuration_index_0;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	757b      	strb	r3, [r7, #21]
	send_data_array[index++] = gain_for_configuration_index_1;
 80016de:	7c3b      	ldrb	r3, [r7, #16]
 80016e0:	75bb      	strb	r3, [r7, #22]
	CDC_Transmit_FS(send_data_array, index);
 80016e2:	2104      	movs	r1, #4
	send_data_array[index++] = gain_for_configuration_index_2;
 80016e4:	7cbb      	ldrb	r3, [r7, #18]
 80016e6:	75fb      	strb	r3, [r7, #23]
	CDC_Transmit_FS(send_data_array, index);
 80016e8:	f107 0014 	add.w	r0, r7, #20
	send_data_array[index++] = SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE;
 80016ec:	f887 a014 	strb.w	sl, [r7, #20]
	CDC_Transmit_FS(send_data_array, index);
 80016f0:	f005 ff9a 	bl	8007628 <CDC_Transmit_FS>
			STM32_PLC_LED(SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE);
 80016f4:	2007      	movs	r0, #7
 80016f6:	f7ff fe01 	bl	80012fc <STM32_PLC_LED>
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 80016fa:	462c      	mov	r4, r5
			break;
 80016fc:	e7a0      	b.n	8001640 <CDC_ReceiveCallback+0x1a8>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 80016fe:	f107 0212 	add.w	r2, r7, #18
 8001702:	f107 0110 	add.w	r1, r7, #16
 8001706:	f107 000f 	add.w	r0, r7, #15
 800170a:	f7ff fd66 	bl	80011da <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
		break;
 800170e:	e7e4      	b.n	80016da <CDC_ReceiveCallback+0x242>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8001710:	f107 0212 	add.w	r2, r7, #18
 8001714:	f107 0110 	add.w	r1, r7, #16
 8001718:	f107 000f 	add.w	r0, r7, #15
 800171c:	f7ff fd70 	bl	8001200 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
		break;
 8001720:	e7db      	b.n	80016da <CDC_ReceiveCallback+0x242>
		switch(message_type){
 8001722:	464d      	mov	r5, r9
 8001724:	e6c2      	b.n	80014ac <CDC_ReceiveCallback+0x14>
	...

08001728 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001728:	6802      	ldr	r2, [r0, #0]
 800172a:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800172c:	429a      	cmp	r2, r3
 800172e:	d101      	bne.n	8001734 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001730:	f001 b97c 	b.w	8002a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40001400 	.word	0x40001400

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(1000);
 8001740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001744:	f001 f984 	bl	8002a50 <HAL_Delay>
	  STM32_PLC_LED(0x1F);
 8001748:	201f      	movs	r0, #31
 800174a:	f7ff fdd7 	bl	80012fc <STM32_PLC_LED>
	  HAL_Delay(1000);
 800174e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001752:	f001 f97d 	bl	8002a50 <HAL_Delay>
	  STM32_PLC_LED(0x0);
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fdd0 	bl	80012fc <STM32_PLC_LED>
  while (1)
 800175c:	e7f0      	b.n	8001740 <Error_Handler+0x4>

0800175e <SystemClock_Config>:
{
 800175e:	b530      	push	{r4, r5, lr}
 8001760:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	2214      	movs	r2, #20
 8001764:	2100      	movs	r1, #0
 8001766:	a807      	add	r0, sp, #28
 8001768:	f006 f968 	bl	8007a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	2214      	movs	r2, #20
 800176e:	2100      	movs	r1, #0
 8001770:	4668      	mov	r0, sp
 8001772:	f006 f963 	bl	8007a3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001776:	222c      	movs	r2, #44	; 0x2c
 8001778:	2100      	movs	r1, #0
 800177a:	a80f      	add	r0, sp, #60	; 0x3c
 800177c:	f006 f95e 	bl	8007a3c <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001780:	2401      	movs	r4, #1
 8001782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001788:	e9cd 4305 	strd	r4, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178c:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001790:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001792:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001796:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001798:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f002 fe85 	bl	80044a8 <HAL_RCC_OscConfig>
 800179e:	b108      	cbz	r0, 80017a4 <SystemClock_Config+0x46>
    Error_Handler();
 80017a0:	f7ff ffcc 	bl	800173c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ae:	e9cd 5003 	strd	r5, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017b4:	4621      	mov	r1, r4
 80017b6:	4668      	mov	r0, sp
 80017b8:	f003 f92a 	bl	8004a10 <HAL_RCC_ClockConfig>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1ef      	bne.n	80017a0 <SystemClock_Config+0x42>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDADC;
 80017c0:	f44f 3302 	mov.w	r3, #133120	; 0x20800
 80017c4:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ca:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 80017ce:	f04f 4318 	mov.w	r3, #2550136832	; 0x98000000
 80017d2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f003 f9fe 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1e1      	bne.n	80017a0 <SystemClock_Config+0x42>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80017dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017e0:	f002 fe4c 	bl	800447c <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 80017e4:	4628      	mov	r0, r5
 80017e6:	f002 fe49 	bl	800447c <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 80017ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017ee:	f002 fe45 	bl	800447c <HAL_PWREx_EnableSDADC>
}
 80017f2:	b01b      	add	sp, #108	; 0x6c
 80017f4:	bd30      	pop	{r4, r5, pc}
	...

080017f8 <main>:
{
 80017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fc:	4c5f      	ldr	r4, [pc, #380]	; (800197c <main+0x184>)
{
 80017fe:	b0e8      	sub	sp, #416	; 0x1a0
  HAL_Init();
 8001800:	f001 f902 	bl	8002a08 <HAL_Init>
  SystemClock_Config();
 8001804:	f7ff ffab 	bl	800175e <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	2214      	movs	r2, #20
 800180a:	2100      	movs	r1, #0
 800180c:	a85f      	add	r0, sp, #380	; 0x17c
 800180e:	f006 f915 	bl	8007a3c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001812:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001814:	485a      	ldr	r0, [pc, #360]	; (8001980 <main+0x188>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181a:	6163      	str	r3, [r4, #20]
 800181c:	6963      	ldr	r3, [r4, #20]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	9304      	str	r3, [sp, #16]
 8001824:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	6963      	ldr	r3, [r4, #20]
 8001828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800182c:	6163      	str	r3, [r4, #20]
 800182e:	6963      	ldr	r3, [r4, #20]
 8001830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001834:	9305      	str	r3, [sp, #20]
 8001836:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001838:	6963      	ldr	r3, [r4, #20]
 800183a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800183e:	6163      	str	r3, [r4, #20]
 8001840:	6963      	ldr	r3, [r4, #20]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	6963      	ldr	r3, [r4, #20]
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	6163      	str	r3, [r4, #20]
 8001852:	6963      	ldr	r3, [r4, #20]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	9307      	str	r3, [sp, #28]
 800185a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	6963      	ldr	r3, [r4, #20]
 800185e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001862:	6163      	str	r3, [r4, #20]
 8001864:	6963      	ldr	r3, [r4, #20]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	9308      	str	r3, [sp, #32]
 800186c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	6963      	ldr	r3, [r4, #20]
 8001870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001874:	6163      	str	r3, [r4, #20]
 8001876:	6963      	ldr	r3, [r4, #20]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	21e0      	movs	r1, #224	; 0xe0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001884:	f001 ff82 	bl	800378c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	483e      	ldr	r0, [pc, #248]	; (8001984 <main+0x18c>)
 800188c:	2130      	movs	r1, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001890:	f001 ff7c 	bl	800378c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001894:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	237c      	movs	r3, #124	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	483b      	ldr	r0, [pc, #236]	; (8001988 <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800189a:	9661      	str	r6, [sp, #388]	; 0x184
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189c:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	e9cd 355f 	strd	r3, r5, [sp, #380]	; 0x17c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a2:	f001 fea9 	bl	80035f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI5_Pin|DI8_Pin;
 80018a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	4838      	ldr	r0, [pc, #224]	; (800198c <main+0x194>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ac:	9661      	str	r6, [sp, #388]	; 0x184
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	e9cd 355f 	strd	r3, r5, [sp, #380]	; 0x17c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f001 fea0 	bl	80035f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI6_Pin|DI7_Pin;
 80018b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018bc:	4834      	ldr	r0, [pc, #208]	; (8001990 <main+0x198>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018be:	9661      	str	r6, [sp, #388]	; 0x184
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c0:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	e9cd 355f 	strd	r3, r5, [sp, #380]	; 0x17c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c8:	f001 fe96 	bl	80035f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ce:	482c      	ldr	r0, [pc, #176]	; (8001980 <main+0x188>)
 80018d0:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	e9cd 365f 	strd	r3, r6, [sp, #380]	; 0x17c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	e9cd 5561 	strd	r5, r5, [sp, #388]	; 0x184
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	f001 fe8d 	bl	80035f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80018de:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	4828      	ldr	r0, [pc, #160]	; (8001984 <main+0x18c>)
 80018e2:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	e9cd 365f 	strd	r3, r6, [sp, #380]	; 0x17c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	e9cd 5561 	strd	r5, r5, [sp, #388]	; 0x184
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f001 fe84 	bl	80035f8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f0:	6963      	ldr	r3, [r4, #20]
 80018f2:	4333      	orrs	r3, r6
 80018f4:	6163      	str	r3, [r4, #20]
 80018f6:	6963      	ldr	r3, [r4, #20]
 80018f8:	4033      	ands	r3, r6
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018fe:	6963      	ldr	r3, [r4, #20]
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6163      	str	r3, [r4, #20]
 8001906:	6963      	ldr	r3, [r4, #20]
  hdac1.Instance = DAC1;
 8001908:	4c22      	ldr	r4, [pc, #136]	; (8001994 <main+0x19c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800190e:	462a      	mov	r2, r5
 8001910:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001912:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001914:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001916:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001918:	f001 fbba 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800191c:	200b      	movs	r0, #11
 800191e:	f001 fbe9 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001922:	462a      	mov	r2, r5
 8001924:	4629      	mov	r1, r5
 8001926:	200d      	movs	r0, #13
 8001928:	f001 fbb2 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800192c:	200d      	movs	r0, #13
 800192e:	f001 fbe1 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001932:	462a      	mov	r2, r5
 8001934:	4629      	mov	r1, r5
 8001936:	203a      	movs	r0, #58	; 0x3a
 8001938:	f001 fbaa 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800193c:	203a      	movs	r0, #58	; 0x3a
 800193e:	f001 fbd9 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001942:	462a      	mov	r2, r5
 8001944:	4629      	mov	r1, r5
 8001946:	203b      	movs	r0, #59	; 0x3b
 8001948:	f001 fba2 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800194c:	203b      	movs	r0, #59	; 0x3b
 800194e:	f001 fbd1 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001952:	462a      	mov	r2, r5
 8001954:	4629      	mov	r1, r5
 8001956:	203c      	movs	r0, #60	; 0x3c
 8001958:	f001 fb9a 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800195c:	203c      	movs	r0, #60	; 0x3c
 800195e:	f001 fbc9 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <main+0x1a0>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001964:	9519      	str	r5, [sp, #100]	; 0x64
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001966:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 8001968:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  hdac1.Instance = DAC1;
 800196c:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800196e:	f001 fbcf 	bl	8003110 <HAL_DAC_Init>
 8001972:	4602      	mov	r2, r0
 8001974:	b190      	cbz	r0, 800199c <main+0x1a4>
    Error_Handler();
 8001976:	f7ff fee1 	bl	800173c <Error_Handler>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48000400 	.word	0x48000400
 8001988:	48001000 	.word	0x48001000
 800198c:	48000800 	.word	0x48000800
 8001990:	48001400 	.word	0x48001400
 8001994:	20000588 	.word	0x20000588
 8001998:	40007400 	.word	0x40007400
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800199c:	2504      	movs	r5, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800199e:	e9cd 5017 	strd	r5, r0, [sp, #92]	; 0x5c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019a2:	a917      	add	r1, sp, #92	; 0x5c
 80019a4:	4620      	mov	r0, r4
 80019a6:	f001 fbfe 	bl	80031a6 <HAL_DAC_ConfigChannel>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d1e3      	bne.n	8001976 <main+0x17e>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019ae:	2210      	movs	r2, #16
 80019b0:	a917      	add	r1, sp, #92	; 0x5c
 80019b2:	4620      	mov	r0, r4
 80019b4:	f001 fbf7 	bl	80031a6 <HAL_DAC_ConfigChannel>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1dc      	bne.n	8001976 <main+0x17e>
  hdac2.Instance = DAC2;
 80019bc:	4cc7      	ldr	r4, [pc, #796]	; (8001cdc <main+0x4e4>)
 80019be:	4bc8      	ldr	r3, [pc, #800]	; (8001ce0 <main+0x4e8>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80019c0:	9016      	str	r0, [sp, #88]	; 0x58
 80019c2:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80019c6:	4620      	mov	r0, r4
  hdac2.Instance = DAC2;
 80019c8:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80019ca:	f001 fba1 	bl	8003110 <HAL_DAC_Init>
 80019ce:	4602      	mov	r2, r0
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d1d0      	bne.n	8001976 <main+0x17e>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019d4:	e9cd 5014 	strd	r5, r0, [sp, #80]	; 0x50
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019d8:	a914      	add	r1, sp, #80	; 0x50
 80019da:	4620      	mov	r0, r4
 80019dc:	f001 fbe3 	bl	80031a6 <HAL_DAC_ConfigChannel>
 80019e0:	4605      	mov	r5, r0
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d1c7      	bne.n	8001976 <main+0x17e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	4601      	mov	r1, r0
 80019e8:	2210      	movs	r2, #16
 80019ea:	a836      	add	r0, sp, #216	; 0xd8
 80019ec:	f006 f826 	bl	8007a3c <memset>
  htim2.Instance = TIM2;
 80019f0:	4cbc      	ldr	r4, [pc, #752]	; (8001ce4 <main+0x4ec>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	221c      	movs	r2, #28
 80019f4:	4629      	mov	r1, r5
 80019f6:	a84f      	add	r0, sp, #316	; 0x13c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fc:	f006 f81e 	bl	8007a3c <memset>
  htim2.Instance = TIM2;
 8001a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001a04:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a08:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffff;
 8001a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a16:	f003 fea5 	bl	8005764 <HAL_TIM_Base_Init>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d1ab      	bne.n	8001976 <main+0x17e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a22:	a936      	add	r1, sp, #216	; 0xd8
 8001a24:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f004 f973 	bl	8005d12 <HAL_TIM_ConfigClockSource>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1a2      	bne.n	8001976 <main+0x17e>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a30:	4620      	mov	r0, r4
 8001a32:	f003 feef 	bl	8005814 <HAL_TIM_PWM_Init>
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d19d      	bne.n	8001976 <main+0x17e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3e:	a912      	add	r1, sp, #72	; 0x48
 8001a40:	4620      	mov	r0, r4
 8001a42:	f004 fb5d 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	4602      	mov	r2, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d194      	bne.n	8001976 <main+0x17e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001a4e:	e9cd 304f 	strd	r3, r0, [sp, #316]	; 0x13c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	9051      	str	r0, [sp, #324]	; 0x144
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	9053      	str	r0, [sp, #332]	; 0x14c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a56:	a94f      	add	r1, sp, #316	; 0x13c
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f004 f804 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d189      	bne.n	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a62:	2204      	movs	r2, #4
 8001a64:	a94f      	add	r1, sp, #316	; 0x13c
 8001a66:	4620      	mov	r0, r4
 8001a68:	f003 fffd 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d182      	bne.n	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a70:	2208      	movs	r2, #8
 8001a72:	a94f      	add	r1, sp, #316	; 0x13c
 8001a74:	4620      	mov	r0, r4
 8001a76:	f003 fff6 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	f47f af7b 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a80:	220c      	movs	r2, #12
 8001a82:	a94f      	add	r1, sp, #316	; 0x13c
 8001a84:	4620      	mov	r0, r4
 8001a86:	f003 ffee 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	f47f af72 	bne.w	8001976 <main+0x17e>
  HAL_TIM_MspPostInit(&htim2);
 8001a92:	4620      	mov	r0, r4
 8001a94:	f000 fe76 	bl	8002784 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	a832      	add	r0, sp, #200	; 0xc8
 8001a9e:	f005 ffcd 	bl	8007a3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	a848      	add	r0, sp, #288	; 0x120
  htim5.Instance = TIM5;
 8001aa8:	4c8f      	ldr	r4, [pc, #572]	; (8001ce8 <main+0x4f0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aaa:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	f005 ffc5 	bl	8007a3c <memset>
  htim5.Instance = TIM5;
 8001ab2:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <main+0x4f4>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	60a5      	str	r5, [r4, #8]
  htim5.Init.Prescaler = 0;
 8001ab6:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aba:	4620      	mov	r0, r4
  htim5.Init.Period = 0xffff;
 8001abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ac6:	f003 fe4d 	bl	8005764 <HAL_TIM_Base_Init>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	f47f af53 	bne.w	8001976 <main+0x17e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ad4:	a932      	add	r1, sp, #200	; 0xc8
 8001ad6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ada:	f004 f91a 	bl	8005d12 <HAL_TIM_ConfigClockSource>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	f47f af49 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f003 fe95 	bl	8005814 <HAL_TIM_PWM_Init>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f47f af43 	bne.w	8001976 <main+0x17e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001af4:	a910      	add	r1, sp, #64	; 0x40
 8001af6:	4620      	mov	r0, r4
 8001af8:	f004 fb02 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4602      	mov	r2, r0
 8001afe:	2800      	cmp	r0, #0
 8001b00:	f47f af39 	bne.w	8001976 <main+0x17e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001b06:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0a:	904a      	str	r0, [sp, #296]	; 0x128
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0c:	904c      	str	r0, [sp, #304]	; 0x130
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	a948      	add	r1, sp, #288	; 0x120
 8001b10:	4620      	mov	r0, r4
 8001b12:	f003 ffa8 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	f47f af2d 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	a948      	add	r1, sp, #288	; 0x120
 8001b20:	4620      	mov	r0, r4
 8001b22:	f003 ffa0 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	f47f af25 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	a948      	add	r1, sp, #288	; 0x120
 8001b30:	4620      	mov	r0, r4
 8001b32:	f003 ff98 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	f47f af1d 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	220c      	movs	r2, #12
 8001b40:	a948      	add	r1, sp, #288	; 0x120
 8001b42:	f003 ff90 	bl	8005a66 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4604      	mov	r4, r0
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	f47f af14 	bne.w	8001976 <main+0x17e>
  HAL_TIM_MspPostInit(&htim5);
 8001b4e:	4866      	ldr	r0, [pc, #408]	; (8001ce8 <main+0x4f0>)
  htim4.Instance = TIM4;
 8001b50:	4d67      	ldr	r5, [pc, #412]	; (8001cf0 <main+0x4f8>)
  HAL_TIM_MspPostInit(&htim5);
 8001b52:	f000 fe17 	bl	8002784 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b56:	4621      	mov	r1, r4
 8001b58:	2220      	movs	r2, #32
 8001b5a:	a860      	add	r0, sp, #384	; 0x180
 8001b5c:	f005 ff6e 	bl	8007a3c <memset>
  htim4.Instance = TIM4;
 8001b60:	4b64      	ldr	r3, [pc, #400]	; (8001cf4 <main+0x4fc>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 0;
 8001b64:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 65535;
 8001b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2601      	movs	r6, #1
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b72:	a95f      	add	r1, sp, #380	; 0x17c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b74:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b76:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b7e:	935f      	str	r3, [sp, #380]	; 0x17c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b80:	9661      	str	r6, [sp, #388]	; 0x184
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b82:	9665      	str	r6, [sp, #404]	; 0x194
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b84:	f003 fe9e 	bl	80058c4 <HAL_TIM_Encoder_Init>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	f47f aef4 	bne.w	8001976 <main+0x17e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b92:	a90e      	add	r1, sp, #56	; 0x38
 8001b94:	4628      	mov	r0, r5
 8001b96:	f004 fab3 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	f47f aeea 	bne.w	8001976 <main+0x17e>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	a82e      	add	r0, sp, #184	; 0xb8
 8001ba8:	f005 ff48 	bl	8007a3c <memset>
  hsdadc1.Instance = SDADC1;
 8001bac:	4c52      	ldr	r4, [pc, #328]	; (8001cf8 <main+0x500>)
 8001bae:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <main+0x504>)
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001bb0:	6125      	str	r5, [r4, #16]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001bb2:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001bb6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8001bba:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8001bbe:	2502      	movs	r5, #2
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001bc0:	4620      	mov	r0, r4
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8001bc2:	e9c4 570b 	strd	r5, r7, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001bc6:	f003 f97b 	bl	8004ec0 <HAL_SDADC_Init>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	f47f aed2 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f003 fa60 	bl	8005098 <HAL_SDADC_SelectInjectedDelay>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	f47f aecb 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc1, SDADC_EXT_TRIG_TIM13_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8001be0:	463a      	mov	r2, r7
 8001be2:	4620      	mov	r0, r4
 8001be4:	f003 fa38 	bl	8005058 <HAL_SDADC_SelectInjectedExtTrigger>
 8001be8:	2800      	cmp	r0, #0
 8001bea:	f47f aec4 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8001bee:	4629      	mov	r1, r5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f003 fa1f 	bl	8005034 <HAL_SDADC_SelectInjectedTrigger>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	f47f aebd 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8001bfc:	4940      	ldr	r1, [pc, #256]	; (8001d00 <main+0x508>)
 8001bfe:	4632      	mov	r2, r6
 8001c00:	4620      	mov	r0, r4
 8001c02:	f003 f9f5 	bl	8004ff0 <HAL_SDADC_InjectedConfigChannel>
 8001c06:	4601      	mov	r1, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	f47f aeb4 	bne.w	8001976 <main+0x17e>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001c0e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001c12:	e9cd 302e 	strd	r3, r0, [sp, #184]	; 0xb8
  ConfParamStruct.Offset = 0;
 8001c16:	e9cd 0030 	strd	r0, r0, [sp, #192]	; 0xc0
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001c1a:	aa2e      	add	r2, sp, #184	; 0xb8
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f003 f997 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	f47f aea7 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8001c28:	aa2e      	add	r2, sp, #184	; 0xb8
 8001c2a:	4631      	mov	r1, r6
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f003 f98f 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f47f ae9f 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8001c38:	aa2e      	add	r2, sp, #184	; 0xb8
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f003 f987 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	f47f ae97 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8001c48:	462a      	mov	r2, r5
 8001c4a:	4631      	mov	r1, r6
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f003 f9a1 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	f47f ae8f 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_1, SDADC_CONF_INDEX_2) != HAL_OK)
 8001c58:	492a      	ldr	r1, [pc, #168]	; (8001d04 <main+0x50c>)
 8001c5a:	462a      	mov	r2, r5
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f003 f999 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	f47f ae87 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_2, SDADC_CONF_INDEX_2) != HAL_OK)
 8001c68:	4927      	ldr	r1, [pc, #156]	; (8001d08 <main+0x510>)
 8001c6a:	462a      	mov	r2, r5
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f003 f991 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	f47f ae7f 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_3, SDADC_CONF_INDEX_1) != HAL_OK)
 8001c78:	4632      	mov	r2, r6
 8001c7a:	4924      	ldr	r1, [pc, #144]	; (8001d0c <main+0x514>)
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f003 f989 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001c82:	4602      	mov	r2, r0
 8001c84:	2800      	cmp	r0, #0
 8001c86:	f47f ae76 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8001c8a:	4921      	ldr	r1, [pc, #132]	; (8001d10 <main+0x518>)
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f003 f981 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001c92:	4602      	mov	r2, r0
 8001c94:	2800      	cmp	r0, #0
 8001c96:	f47f ae6e 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 8001c9a:	491e      	ldr	r1, [pc, #120]	; (8001d14 <main+0x51c>)
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f003 f979 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	f47f ae66 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8001caa:	491b      	ldr	r1, [pc, #108]	; (8001d18 <main+0x520>)
 8001cac:	4620      	mov	r0, r4
 8001cae:	f003 f971 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	f47f ae5f 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_1) != HAL_OK)
 8001cb8:	4918      	ldr	r1, [pc, #96]	; (8001d1c <main+0x524>)
 8001cba:	4632      	mov	r2, r6
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f003 f969 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f47f ae57 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 8001cc8:	4915      	ldr	r1, [pc, #84]	; (8001d20 <main+0x528>)
 8001cca:	4632      	mov	r2, r6
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f003 f961 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	f47f ae4f 	bne.w	8001976 <main+0x17e>
 8001cd8:	e024      	b.n	8001d24 <main+0x52c>
 8001cda:	bf00      	nop
 8001cdc:	2000059c 	.word	0x2000059c
 8001ce0:	40009800 	.word	0x40009800
 8001ce4:	2000094c 	.word	0x2000094c
 8001ce8:	200009e4 	.word	0x200009e4
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	20000998 	.word	0x20000998
 8001cf4:	40000800 	.word	0x40000800
 8001cf8:	20000704 	.word	0x20000704
 8001cfc:	40016000 	.word	0x40016000
 8001d00:	000f01ff 	.word	0x000f01ff
 8001d04:	00010002 	.word	0x00010002
 8001d08:	00020004 	.word	0x00020004
 8001d0c:	00030008 	.word	0x00030008
 8001d10:	00040010 	.word	0x00040010
 8001d14:	00050020 	.word	0x00050020
 8001d18:	00060040 	.word	0x00060040
 8001d1c:	00070080 	.word	0x00070080
 8001d20:	00080100 	.word	0x00080100
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001d24:	2100      	movs	r1, #0
 8001d26:	2210      	movs	r2, #16
 8001d28:	a82a      	add	r0, sp, #168	; 0xa8
 8001d2a:	f005 fe87 	bl	8007a3c <memset>
  hsdadc2.Instance = SDADC2;
 8001d2e:	4cca      	ldr	r4, [pc, #808]	; (8002058 <main+0x860>)
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001d30:	48ca      	ldr	r0, [pc, #808]	; (800205c <main+0x864>)
  hsdadc2.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8001d32:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8001d3a:	4620      	mov	r0, r4
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001d3c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001d40:	6123      	str	r3, [r4, #16]
  hsdadc2.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8001d42:	6327      	str	r7, [r4, #48]	; 0x30
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8001d44:	f003 f8bc 	bl	8004ec0 <HAL_SDADC_Init>
 8001d48:	4601      	mov	r1, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f47f ae13 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc2, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001d50:	4620      	mov	r0, r4
 8001d52:	f003 f9a1 	bl	8005098 <HAL_SDADC_SelectInjectedDelay>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	f47f ae0d 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc2, SDADC_EXT_TRIG_TIM12_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8001d5c:	463a      	mov	r2, r7
 8001d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d62:	4620      	mov	r0, r4
 8001d64:	f003 f978 	bl	8005058 <HAL_SDADC_SelectInjectedExtTrigger>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	f47f ae04 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc2, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4620      	mov	r0, r4
 8001d72:	f003 f95f 	bl	8005034 <HAL_SDADC_SelectInjectedTrigger>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	f47f adfd 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc2, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8001d7c:	49b8      	ldr	r1, [pc, #736]	; (8002060 <main+0x868>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4620      	mov	r0, r4
 8001d82:	f003 f935 	bl	8004ff0 <HAL_SDADC_InjectedConfigChannel>
 8001d86:	4601      	mov	r1, r0
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	f47f adf4 	bne.w	8001976 <main+0x17e>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001d8e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001d92:	e9cd 302a 	strd	r3, r0, [sp, #168]	; 0xa8
  ConfParamStruct.Offset = 0;
 8001d96:	e9cd 002c 	strd	r0, r0, [sp, #176]	; 0xb0
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001d9a:	aa2a      	add	r2, sp, #168	; 0xa8
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f003 f8d7 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	f47f ade7 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8001da8:	aa2a      	add	r2, sp, #168	; 0xa8
 8001daa:	2101      	movs	r1, #1
 8001dac:	4620      	mov	r0, r4
 8001dae:	f003 f8cf 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001db2:	2800      	cmp	r0, #0
 8001db4:	f47f addf 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8001db8:	aa2a      	add	r2, sp, #168	; 0xa8
 8001dba:	4629      	mov	r1, r5
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f003 f8c7 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f47f add7 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8001dc8:	462a      	mov	r2, r5
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f003 f8e1 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	f47f adcf 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_1, SDADC_CONF_INDEX_1) != HAL_OK)
 8001dd8:	49a2      	ldr	r1, [pc, #648]	; (8002064 <main+0x86c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f003 f8d9 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	f47f adc7 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 8001de8:	499f      	ldr	r1, [pc, #636]	; (8002068 <main+0x870>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	4620      	mov	r0, r4
 8001dee:	f003 f8d1 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001df2:	4605      	mov	r5, r0
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f47f adbe 	bne.w	8001976 <main+0x17e>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	a826      	add	r0, sp, #152	; 0x98
 8001e00:	f005 fe1c 	bl	8007a3c <memset>
  hsdadc3.Instance = SDADC3;
 8001e04:	4c99      	ldr	r4, [pc, #612]	; (800206c <main+0x874>)
 8001e06:	4b9a      	ldr	r3, [pc, #616]	; (8002070 <main+0x878>)
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001e08:	6125      	str	r5, [r4, #16]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001e0a:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001e0e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8001e12:	4620      	mov	r0, r4
  hsdadc3.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8001e14:	2502      	movs	r5, #2
  hsdadc3.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8001e16:	e9c4 570b 	strd	r5, r7, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8001e1a:	f003 f851 	bl	8004ec0 <HAL_SDADC_Init>
 8001e1e:	4601      	mov	r1, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	f47f ada8 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f003 f936 	bl	8005098 <HAL_SDADC_SelectInjectedDelay>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	f47f ada2 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc3, SDADC_EXT_TRIG_TIM12_CC2, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8001e32:	463a      	mov	r2, r7
 8001e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f003 f90d 	bl	8005058 <HAL_SDADC_SelectInjectedExtTrigger>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	f47f ad99 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f003 f8f4 	bl	8005034 <HAL_SDADC_SelectInjectedTrigger>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f47f ad92 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 8001e52:	4988      	ldr	r1, [pc, #544]	; (8002074 <main+0x87c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	4620      	mov	r0, r4
 8001e58:	f003 f8ca 	bl	8004ff0 <HAL_SDADC_InjectedConfigChannel>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f47f ad89 	bne.w	8001976 <main+0x17e>
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001e64:	e9cd 0026 	strd	r0, r0, [sp, #152]	; 0x98
  ConfParamStruct.Offset = 0;
 8001e68:	e9cd 0028 	strd	r0, r0, [sp, #160]	; 0xa0
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001e6c:	aa26      	add	r2, sp, #152	; 0x98
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f003 f86e 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	f47f ad7e 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8001e7a:	aa26      	add	r2, sp, #152	; 0x98
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f003 f866 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	f47f ad76 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8001e8a:	aa26      	add	r2, sp, #152	; 0x98
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f003 f85e 	bl	8004f50 <HAL_SDADC_PrepareChannelConfig>
 8001e94:	2800      	cmp	r0, #0
 8001e96:	f47f ad6e 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8001e9a:	462a      	mov	r2, r5
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f003 f878 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	f47f ad66 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_2, SDADC_CONF_INDEX_1) != HAL_OK)
 8001eaa:	496f      	ldr	r1, [pc, #444]	; (8002068 <main+0x870>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f003 f870 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f47f ad5e 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_4, SDADC_CONF_INDEX_1) != HAL_OK)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	496e      	ldr	r1, [pc, #440]	; (8002078 <main+0x880>)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f003 f868 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	f47f ad55 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8001ecc:	496b      	ldr	r1, [pc, #428]	; (800207c <main+0x884>)
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f003 f860 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	f47f ad4d 	bne.w	8001976 <main+0x17e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8001edc:	4968      	ldr	r1, [pc, #416]	; (8002080 <main+0x888>)
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f003 f858 	bl	8004f94 <HAL_SDADC_AssociateChannelConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	f47f ad45 	bne.w	8001976 <main+0x17e>
  hcan.Instance = CAN;
 8001eec:	4865      	ldr	r0, [pc, #404]	; (8002084 <main+0x88c>)
  hcan.Init.Prescaler = 16;
 8001eee:	4a66      	ldr	r2, [pc, #408]	; (8002088 <main+0x890>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001ef0:	6183      	str	r3, [r0, #24]
  hcan.Init.Prescaler = 16;
 8001ef2:	2610      	movs	r6, #16
 8001ef4:	e9c0 2600 	strd	r2, r6, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ef8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f00:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f02:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f06:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f0a:	f000 fdb5 	bl	8002a78 <HAL_CAN_Init>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	f47f ad31 	bne.w	8001976 <main+0x17e>
  htim6.Instance = TIM6;
 8001f14:	4c5d      	ldr	r4, [pc, #372]	; (800208c <main+0x894>)
  htim6.Init.Prescaler = 99;
 8001f16:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <main+0x898>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	60a0      	str	r0, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim6.Init.Prescaler = 99;
 8001f1e:	f04f 0863 	mov.w	r8, #99	; 0x63
  htim6.Init.Period = 0xbb80;
 8001f22:	f64b 3780 	movw	r7, #48000	; 0xbb80
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f28:	4620      	mov	r0, r4
  htim6.Init.Prescaler = 99;
 8001f2a:	e9c4 3800 	strd	r3, r8, [r4]
  htim6.Init.Period = 0xbb80;
 8001f2e:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f30:	f003 fc18 	bl	8005764 <HAL_TIM_Base_Init>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	f47f ad1e 	bne.w	8001976 <main+0x17e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f3a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f40:	a90c      	add	r1, sp, #48	; 0x30
 8001f42:	4620      	mov	r0, r4
 8001f44:	f004 f8dc 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001f48:	4605      	mov	r5, r0
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	f47f ad13 	bne.w	8001976 <main+0x17e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f50:	4601      	mov	r1, r0
 8001f52:	4632      	mov	r2, r6
 8001f54:	a822      	add	r0, sp, #136	; 0x88
 8001f56:	f005 fd71 	bl	8007a3c <memset>
  htim12.Instance = TIM12;
 8001f5a:	4c4e      	ldr	r4, [pc, #312]	; (8002094 <main+0x89c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5c:	221c      	movs	r2, #28
 8001f5e:	4629      	mov	r1, r5
 8001f60:	a841      	add	r0, sp, #260	; 0x104
 8001f62:	f005 fd6b 	bl	8007a3c <memset>
  htim12.Instance = TIM12;
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <main+0x8a0>)
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001f6a:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 99;
 8001f6c:	e9c4 3800 	strd	r3, r8, [r4]
  htim12.Init.Period = 0xbb80;
 8001f70:	e9c4 5702 	strd	r5, r7, [r4, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001f76:	f003 fbf5 	bl	8005764 <HAL_TIM_Base_Init>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	f47f acfb 	bne.w	8001976 <main+0x17e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001f84:	a922      	add	r1, sp, #136	; 0x88
 8001f86:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f003 fec2 	bl	8005d12 <HAL_TIM_ConfigClockSource>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	f47f acf1 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8001f94:	4620      	mov	r0, r4
 8001f96:	f003 fc11 	bl	80057bc <HAL_TIM_OC_Init>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	f47f aceb 	bne.w	8001976 <main+0x17e>
  sConfigOC.Pulse = 0;
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2630      	movs	r6, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa4:	a941      	add	r1, sp, #260	; 0x104
 8001fa6:	4620      	mov	r0, r4
  sConfigOC.Pulse = 0;
 8001fa8:	e9cd 6241 	strd	r6, r2, [sp, #260]	; 0x104
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	9243      	str	r2, [sp, #268]	; 0x10c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fae:	9245      	str	r2, [sp, #276]	; 0x114
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb0:	f003 fd0a 	bl	80059c8 <HAL_TIM_OC_ConfigChannel>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	f47f acde 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fba:	2204      	movs	r2, #4
 8001fbc:	a941      	add	r1, sp, #260	; 0x104
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f003 fd02 	bl	80059c8 <HAL_TIM_OC_ConfigChannel>
 8001fc4:	4605      	mov	r5, r0
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	f47f acd5 	bne.w	8001976 <main+0x17e>
  htim13.Instance = TIM13;
 8001fcc:	4c33      	ldr	r4, [pc, #204]	; (800209c <main+0x8a4>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	4601      	mov	r1, r0
 8001fd0:	221c      	movs	r2, #28
 8001fd2:	a83a      	add	r0, sp, #232	; 0xe8
 8001fd4:	f005 fd32 	bl	8007a3c <memset>
  htim13.Instance = TIM13;
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <main+0x8a8>)
 8001fda:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001fdc:	4620      	mov	r0, r4
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	e9c4 8501 	strd	r8, r5, [r4, #4]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	e9c4 7503 	strd	r7, r5, [r4, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001fe8:	f003 fbbc 	bl	8005764 <HAL_TIM_Base_Init>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	f47f acc2 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f003 fbe2 	bl	80057bc <HAL_TIM_OC_Init>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	f47f acbb 	bne.w	8001976 <main+0x17e>
  sConfigOC.Pulse = 0;
 8002000:	e9cd 603a 	strd	r6, r0, [sp, #232]	; 0xe8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002004:	903c      	str	r0, [sp, #240]	; 0xf0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	903e      	str	r0, [sp, #248]	; 0xf8
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002008:	a93a      	add	r1, sp, #232	; 0xe8
 800200a:	4620      	mov	r0, r4
 800200c:	f003 fcdc 	bl	80059c8 <HAL_TIM_OC_ConfigChannel>
 8002010:	4605      	mov	r5, r0
 8002012:	2800      	cmp	r0, #0
 8002014:	f47f acaf 	bne.w	8001976 <main+0x17e>
  htim16.Instance = TIM16;
 8002018:	4c22      	ldr	r4, [pc, #136]	; (80020a4 <main+0x8ac>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 800201a:	4601      	mov	r1, r0
 800201c:	2210      	movs	r2, #16
 800201e:	a81e      	add	r0, sp, #120	; 0x78
 8002020:	f005 fd0c 	bl	8007a3c <memset>
  htim16.Init.Prescaler = 4799;
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <main+0x8b0>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	60a5      	str	r5, [r4, #8]
  htim16.Init.Prescaler = 4799;
 8002028:	f241 27bf 	movw	r7, #4799	; 0x12bf
  htim16.Init.Period = 0xffff;
 800202c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002030:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 4799;
 8002032:	e9c4 3700 	strd	r3, r7, [r4]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002036:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	e9c4 5505 	strd	r5, r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800203e:	f003 fb91 	bl	8005764 <HAL_TIM_Base_Init>
 8002042:	2800      	cmp	r0, #0
 8002044:	f47f ac97 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002048:	4620      	mov	r0, r4
 800204a:	f003 fc0f 	bl	800586c <HAL_TIM_IC_Init>
 800204e:	4602      	mov	r2, r0
 8002050:	2800      	cmp	r0, #0
 8002052:	f47f ac90 	bne.w	8001976 <main+0x17e>
 8002056:	e029      	b.n	80020ac <main+0x8b4>
 8002058:	20000748 	.word	0x20000748
 800205c:	40016400 	.word	0x40016400
 8002060:	00030007 	.word	0x00030007
 8002064:	00010002 	.word	0x00010002
 8002068:	00020004 	.word	0x00020004
 800206c:	2000078c 	.word	0x2000078c
 8002070:	40016800 	.word	0x40016800
 8002074:	000e0155 	.word	0x000e0155
 8002078:	00040010 	.word	0x00040010
 800207c:	00060040 	.word	0x00060040
 8002080:	00080100 	.word	0x00080100
 8002084:	20000560 	.word	0x20000560
 8002088:	40006400 	.word	0x40006400
 800208c:	20000a30 	.word	0x20000a30
 8002090:	40001000 	.word	0x40001000
 8002094:	200007d0 	.word	0x200007d0
 8002098:	40001800 	.word	0x40001800
 800209c:	2000081c 	.word	0x2000081c
 80020a0:	40001c00 	.word	0x40001c00
 80020a4:	20000868 	.word	0x20000868
 80020a8:	40014400 	.word	0x40014400
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ac:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020ae:	e9cd 301f 	strd	r3, r0, [sp, #124]	; 0x7c
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020b2:	901e      	str	r0, [sp, #120]	; 0x78
  sConfigIC.ICFilter = 0;
 80020b4:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020b6:	a91e      	add	r1, sp, #120	; 0x78
 80020b8:	4620      	mov	r0, r4
 80020ba:	f003 fd8d 	bl	8005bd8 <HAL_TIM_IC_ConfigChannel>
 80020be:	4605      	mov	r5, r0
 80020c0:	2800      	cmp	r0, #0
 80020c2:	f47f ac58 	bne.w	8001976 <main+0x17e>
  MX_USB_DEVICE_Init();
 80020c6:	f005 fa6f 	bl	80075a8 <MX_USB_DEVICE_Init>
  htim17.Instance = TIM17;
 80020ca:	4c51      	ldr	r4, [pc, #324]	; (8002210 <main+0xa18>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020cc:	2210      	movs	r2, #16
 80020ce:	4629      	mov	r1, r5
 80020d0:	a81a      	add	r0, sp, #104	; 0x68
 80020d2:	f005 fcb3 	bl	8007a3c <memset>
  htim17.Instance = TIM17;
 80020d6:	4b4f      	ldr	r3, [pc, #316]	; (8002214 <main+0xa1c>)
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020da:	4620      	mov	r0, r4
  htim17.Init.Prescaler = 4799;
 80020dc:	e9c4 3700 	strd	r3, r7, [r4]
  htim17.Init.Period = 0xffff;
 80020e0:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 80020e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020e8:	f003 fb3c 	bl	8005764 <HAL_TIM_Base_Init>
 80020ec:	2800      	cmp	r0, #0
 80020ee:	f47f ac42 	bne.w	8001976 <main+0x17e>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80020f2:	4620      	mov	r0, r4
 80020f4:	f003 fbba 	bl	800586c <HAL_TIM_IC_Init>
 80020f8:	2800      	cmp	r0, #0
 80020fa:	f47f ac3c 	bne.w	8001976 <main+0x17e>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020fe:	2200      	movs	r2, #0
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002100:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002102:	2601      	movs	r6, #1
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	a91a      	add	r1, sp, #104	; 0x68
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002106:	e9cd 261a 	strd	r2, r6, [sp, #104]	; 0x68
  sConfigIC.ICFilter = 0;
 800210a:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	f003 fd63 	bl	8005bd8 <HAL_TIM_IC_ConfigChannel>
 8002112:	4604      	mov	r4, r0
 8002114:	2800      	cmp	r0, #0
 8002116:	f47f ac2e 	bne.w	8001976 <main+0x17e>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800211a:	4601      	mov	r1, r0
 800211c:	2220      	movs	r2, #32
 800211e:	a857      	add	r0, sp, #348	; 0x15c
 8002120:	f005 fc8c 	bl	8007a3c <memset>
  htim19.Instance = TIM19;
 8002124:	4d3c      	ldr	r5, [pc, #240]	; (8002218 <main+0xa20>)
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <main+0xa24>)
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	60ac      	str	r4, [r5, #8]
  htim19.Init.Prescaler = 0;
 800212a:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800212e:	2703      	movs	r7, #3
  htim19.Init.Period = 65535;
 8002130:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8002134:	a956      	add	r1, sp, #344	; 0x158
 8002136:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002138:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002142:	9756      	str	r7, [sp, #344]	; 0x158
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002144:	9658      	str	r6, [sp, #352]	; 0x160
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002146:	965c      	str	r6, [sp, #368]	; 0x170
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8002148:	f003 fbbc 	bl	80058c4 <HAL_TIM_Encoder_Init>
 800214c:	2800      	cmp	r0, #0
 800214e:	f47f ac12 	bne.w	8001976 <main+0x17e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002152:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8002156:	a90a      	add	r1, sp, #40	; 0x28
 8002158:	4628      	mov	r0, r5
 800215a:	f003 ffd1 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4604      	mov	r4, r0
 8002160:	2800      	cmp	r0, #0
 8002162:	f47f ac08 	bne.w	8001976 <main+0x17e>
  STM32_PLC_Analog_Input(&htim12, &htim13, &hsdadc1, &hsdadc2, &hsdadc3);
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <main+0xa28>)
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <main+0xa2c>)
 800216a:	492f      	ldr	r1, [pc, #188]	; (8002228 <main+0xa30>)
 800216c:	482f      	ldr	r0, [pc, #188]	; (800222c <main+0xa34>)
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <main+0xa38>)
 8002172:	f7fe fd19 	bl	8000ba8 <STM32_PLC_Analog_Input>
  STM32_PLC_Analog_Output(&hdac1, &hdac2, &htim6);
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <main+0xa3c>)
 8002178:	492f      	ldr	r1, [pc, #188]	; (8002238 <main+0xa40>)
 800217a:	4830      	ldr	r0, [pc, #192]	; (800223c <main+0xa44>)
 800217c:	f7fe fe82 	bl	8000e84 <STM32_PLC_Analog_Output>
  STM32_PLC_Encoder(&htim4, &htim19);
 8002180:	482f      	ldr	r0, [pc, #188]	; (8002240 <main+0xa48>)
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe ff76 	bl	8001074 <STM32_PLC_Encoder>
  STM32_PLC_Input_Capture(&htim17, &htim16);
 8002188:	492e      	ldr	r1, [pc, #184]	; (8002244 <main+0xa4c>)
 800218a:	4821      	ldr	r0, [pc, #132]	; (8002210 <main+0xa18>)
 800218c:	f7ff f87a 	bl	8001284 <STM32_PLC_Input_Capture>
  STM32_PLC_PWM(&htim2, &htim5);
 8002190:	492d      	ldr	r1, [pc, #180]	; (8002248 <main+0xa50>)
 8002192:	482e      	ldr	r0, [pc, #184]	; (800224c <main+0xa54>)
 8002194:	f7ff f8d8 	bl	8001348 <STM32_PLC_PWM>
  STM32_PLC_CAN(&hcan);
 8002198:	482d      	ldr	r0, [pc, #180]	; (8002250 <main+0xa58>)
 800219a:	f7fe fec3 	bl	8000f24 <STM32_PLC_CAN>
  STM32_PLC_PWM_Reset();
 800219e:	f7ff f95d 	bl	800145c <STM32_PLC_PWM_Reset>
  STM32_PLC_Analog_Output_Reset();
 80021a2:	f7fe feaf 	bl	8000f04 <STM32_PLC_Analog_Output_Reset>
  STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 80021a6:	aa4f      	add	r2, sp, #316	; 0x13c
 80021a8:	a948      	add	r1, sp, #288	; 0x120
 80021aa:	a841      	add	r0, sp, #260	; 0x104
 80021ac:	f7ff f802 	bl	80011b4 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
  STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 80021b0:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 80021b4:	4623      	mov	r3, r4
 80021b6:	4621      	mov	r1, r4
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7fe fd5f 	bl	8000c7c <STM32_PLC_Analog_Input_Set_Gain>
  STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 80021be:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
 80021c2:	4623      	mov	r3, r4
 80021c4:	4631      	mov	r1, r6
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7fe fd58 	bl	8000c7c <STM32_PLC_Analog_Input_Set_Gain>
  STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 80021cc:	f89d 213c 	ldrb.w	r2, [sp, #316]	; 0x13c
 80021d0:	4623      	mov	r3, r4
 80021d2:	2102      	movs	r1, #2
 80021d4:	4638      	mov	r0, r7
 80021d6:	f7fe fd51 	bl	8000c7c <STM32_PLC_Analog_Input_Set_Gain>
  STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 80021da:	a95f      	add	r1, sp, #380	; 0x17c
 80021dc:	a856      	add	r0, sp, #344	; 0x158
 80021de:	f7ff f822 	bl	8001226 <STM32_PLC_Flash_Get_PWM_Prescalers>
  STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler_for_PWM_0_3, false);
 80021e2:	f8bd 0158 	ldrh.w	r0, [sp, #344]	; 0x158
 80021e6:	4621      	mov	r1, r4
 80021e8:	f7ff f942 	bl	8001470 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
  STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler_for_PWM_4_7, false);
 80021ec:	f8bd 017c 	ldrh.w	r0, [sp, #380]	; 0x17c
 80021f0:	4621      	mov	r1, r4
 80021f2:	f7ff f93d 	bl	8001470 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
	  STM32_PLC_LED(i);
 80021f6:	b2e0      	uxtb	r0, r4
 80021f8:	f7ff f880 	bl	80012fc <STM32_PLC_LED>
  for(uint8_t i = 0; i < 0x1F; i++){
 80021fc:	3401      	adds	r4, #1
	  HAL_Delay(50);
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f000 fc26 	bl	8002a50 <HAL_Delay>
  for(uint8_t i = 0; i < 0x1F; i++){
 8002204:	2c1f      	cmp	r4, #31
 8002206:	d1f6      	bne.n	80021f6 <main+0x9fe>
  STM32_PLC_LED(0);
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff f877 	bl	80012fc <STM32_PLC_LED>
  while (1)
 800220e:	e7fe      	b.n	800220e <main+0xa16>
 8002210:	200008b4 	.word	0x200008b4
 8002214:	40014800 	.word	0x40014800
 8002218:	20000900 	.word	0x20000900
 800221c:	40015c00 	.word	0x40015c00
 8002220:	2000078c 	.word	0x2000078c
 8002224:	20000704 	.word	0x20000704
 8002228:	2000081c 	.word	0x2000081c
 800222c:	200007d0 	.word	0x200007d0
 8002230:	20000748 	.word	0x20000748
 8002234:	20000a30 	.word	0x20000a30
 8002238:	2000059c 	.word	0x2000059c
 800223c:	20000588 	.word	0x20000588
 8002240:	20000998 	.word	0x20000998
 8002244:	20000868 	.word	0x20000868
 8002248:	200009e4 	.word	0x200009e4
 800224c:	2000094c 	.word	0x2000094c
 8002250:	20000560 	.word	0x20000560

08002254 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_MspInit+0x2c>)
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	619a      	str	r2, [r3, #24]
 800225e:	699a      	ldr	r2, [r3, #24]
{
 8002260:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	f002 0201 	and.w	r2, r2, #1
 8002266:	9200      	str	r2, [sp, #0]
 8002268:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002270:	61da      	str	r2, [r3, #28]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227c:	b002      	add	sp, #8
 800227e:	4770      	bx	lr
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002284:	b510      	push	{r4, lr}
 8002286:	4604      	mov	r4, r0
 8002288:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	2214      	movs	r2, #20
 800228c:	2100      	movs	r1, #0
 800228e:	a803      	add	r0, sp, #12
 8002290:	f005 fbd4 	bl	8007a3c <memset>
  if(hcan->Instance==CAN)
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_CAN_MspInit+0x6c>)
 8002298:	429a      	cmp	r2, r3
 800229a:	d126      	bne.n	80022ea <HAL_CAN_MspInit+0x66>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800229c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a0:	4814      	ldr	r0, [pc, #80]	; (80022f4 <HAL_CAN_MspInit+0x70>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022a8:	61da      	str	r2, [r3, #28]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 80022d2:	2307      	movs	r3, #7
 80022d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d6:	f001 f98f 	bl	80035f8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2014      	movs	r0, #20
 80022de:	4611      	mov	r1, r2
 80022e0:	f000 fed6 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80022e4:	2014      	movs	r0, #20
 80022e6:	f000 ff05 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80022ea:	b008      	add	sp, #32
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	bf00      	nop
 80022f0:	40006400 	.word	0x40006400
 80022f4:	48000c00 	.word	0x48000c00

080022f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022f8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	2214      	movs	r2, #20
{
 80022fc:	b08a      	sub	sp, #40	; 0x28
 80022fe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	2100      	movs	r1, #0
 8002302:	eb0d 0002 	add.w	r0, sp, r2
 8002306:	f005 fb99 	bl	8007a3c <memset>
  if(hdac->Instance==DAC1)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_DAC_MspInit+0x88>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11d      	bne.n	800234e <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_DAC_MspInit+0x8c>)
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800231a:	61da      	str	r2, [r3, #28]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	9b02      	ldr	r3, [sp, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AO0_Pin|AO1_Pin;
 8002338:	2330      	movs	r3, #48	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = AO2_Pin;
 800233a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 800233c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	2303      	movs	r3, #3
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 8002340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002344:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 8002346:	f001 f957 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800234a:	b00a      	add	sp, #40	; 0x28
 800234c:	bd10      	pop	{r4, pc}
  else if(hdac->Instance==DAC2)
 800234e:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_DAC_MspInit+0x90>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d1fa      	bne.n	800234a <HAL_DAC_MspInit+0x52>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_DAC_MspInit+0x8c>)
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800235c:	61da      	str	r2, [r3, #28]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002364:	9203      	str	r2, [sp, #12]
 8002366:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	9304      	str	r3, [sp, #16]
 8002378:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = AO2_Pin;
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	e7dd      	b.n	800233a <HAL_DAC_MspInit+0x42>
 800237e:	bf00      	nop
 8002380:	40007400 	.word	0x40007400
 8002384:	40021000 	.word	0x40021000
 8002388:	40009800 	.word	0x40009800

0800238c <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	4605      	mov	r5, r0
 8002390:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	2214      	movs	r2, #20
 8002394:	2100      	movs	r1, #0
 8002396:	a809      	add	r0, sp, #36	; 0x24
 8002398:	f005 fb50 	bl	8007a3c <memset>
  if(hsdadc->Instance==SDADC1)
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	4a59      	ldr	r2, [pc, #356]	; (8002504 <HAL_SDADC_MspInit+0x178>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d13e      	bne.n	8002422 <HAL_SDADC_MspInit+0x96>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80023a4:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_SDADC_MspInit+0x17c>)
    PE12     ------> SDADC1_AIN0P
    */
    GPIO_InitStruct.Pin = AI0_Pin|AI1_Pin|AI2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	4859      	ldr	r0, [pc, #356]	; (800250c <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80023b6:	9201      	str	r2, [sp, #4]
 80023b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023c8:	9202      	str	r2, [sp, #8]
 80023ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023dc:	2403      	movs	r4, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023de:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e2:	2307      	movs	r3, #7
 80023e4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24

    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
                          |AI7_Pin|AI8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f001 f905 	bl	80035f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
 80023ee:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f2:	4847      	ldr	r0, [pc, #284]	; (8002510 <HAL_SDADC_MspInit+0x184>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fc:	f001 f8fc 	bl	80035f8 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8002400:	4c44      	ldr	r4, [pc, #272]	; (8002514 <HAL_SDADC_MspInit+0x188>)
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <HAL_SDADC_MspInit+0x18c>)

    /* SDADC3 DMA Init */
    /* SDADC3 Init */
    hdma_sdadc3.Instance = DMA2_Channel5;
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdadc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002404:	60a6      	str	r6, [r4, #8]
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002406:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_sdadc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdadc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002410:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_sdadc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_sdadc3.Init.Mode = DMA_CIRCULAR;
 8002414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002418:	2320      	movs	r3, #32
 800241a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_sdadc3.Init.Priority = DMA_PRIORITY_LOW;
 800241e:	61e6      	str	r6, [r4, #28]
 8002420:	e030      	b.n	8002484 <HAL_SDADC_MspInit+0xf8>
  else if(hsdadc->Instance==SDADC2)
 8002422:	4a3e      	ldr	r2, [pc, #248]	; (800251c <HAL_SDADC_MspInit+0x190>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d137      	bne.n	8002498 <HAL_SDADC_MspInit+0x10c>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8002428:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_SDADC_MspInit+0x17c>)
    hdma_sdadc2.Instance = DMA2_Channel4;
 800242a:	4c3d      	ldr	r4, [pc, #244]	; (8002520 <HAL_SDADC_MspInit+0x194>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800242c:	699a      	ldr	r2, [r3, #24]
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800242e:	4e3d      	ldr	r6, [pc, #244]	; (8002524 <HAL_SDADC_MspInit+0x198>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8002430:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002434:	619a      	str	r2, [r3, #24]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800243c:	9204      	str	r2, [sp, #16]
 800243e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244e:	9305      	str	r3, [sp, #20]
 8002450:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002452:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8002456:	2303      	movs	r3, #3
 8002458:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800245c:	a909      	add	r1, sp, #36	; 0x24
 800245e:	482c      	ldr	r0, [pc, #176]	; (8002510 <HAL_SDADC_MspInit+0x184>)
 8002460:	f001 f8ca 	bl	80035f8 <HAL_GPIO_Init>
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002468:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246c:	2300      	movs	r3, #0
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246e:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 8002472:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8002476:	2220      	movs	r2, #32
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002478:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 800247c:	e9c4 e205 	strd	lr, r2, [r4, #20]
    hdma_sdadc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002480:	60a3      	str	r3, [r4, #8]
    hdma_sdadc2.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_sdadc3) != HAL_OK)
 8002484:	4620      	mov	r0, r4
 8002486:	f000 fed1 	bl	800322c <HAL_DMA_Init>
 800248a:	b108      	cbz	r0, 8002490 <HAL_SDADC_MspInit+0x104>
    {
      Error_Handler();
 800248c:	f7ff f956 	bl	800173c <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc3);
 8002490:	616c      	str	r4, [r5, #20]
 8002492:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8002494:	b00e      	add	sp, #56	; 0x38
 8002496:	bd70      	pop	{r4, r5, r6, pc}
  else if(hsdadc->Instance==SDADC3)
 8002498:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_SDADC_MspInit+0x19c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d1fa      	bne.n	8002494 <HAL_SDADC_MspInit+0x108>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_SDADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	481a      	ldr	r0, [pc, #104]	; (800250c <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC3_CLK_ENABLE();
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80024b0:	9206      	str	r2, [sp, #24]
 80024b2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024ba:	615a      	str	r2, [r3, #20]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80024c2:	9207      	str	r2, [sp, #28]
 80024c4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024cc:	615a      	str	r2, [r3, #20]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d6:	2403      	movs	r4, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d8:	9b08      	ldr	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024e0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f001 f887 	bl	80035f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAI1P_Pin|DAI1M_Pin|DAI2P_Pin|DAI2M_Pin
 80024ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <HAL_SDADC_MspInit+0x1a0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f8:	f001 f87e 	bl	80035f8 <HAL_GPIO_Init>
    hdma_sdadc3.Instance = DMA2_Channel5;
 80024fc:	4c0c      	ldr	r4, [pc, #48]	; (8002530 <HAL_SDADC_MspInit+0x1a4>)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_SDADC_MspInit+0x1a8>)
 8002500:	e780      	b.n	8002404 <HAL_SDADC_MspInit+0x78>
 8002502:	bf00      	nop
 8002504:	40016000 	.word	0x40016000
 8002508:	40021000 	.word	0x40021000
 800250c:	48000400 	.word	0x48000400
 8002510:	48001000 	.word	0x48001000
 8002514:	200005b0 	.word	0x200005b0
 8002518:	40020430 	.word	0x40020430
 800251c:	40016400 	.word	0x40016400
 8002520:	200005f4 	.word	0x200005f4
 8002524:	40020444 	.word	0x40020444
 8002528:	40016800 	.word	0x40016800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	20000638 	.word	0x20000638
 8002534:	40020458 	.word	0x40020458

08002538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4605      	mov	r5, r0
 800253c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	2214      	movs	r2, #20
 8002540:	2100      	movs	r1, #0
 8002542:	a809      	add	r0, sp, #36	; 0x24
 8002544:	f005 fa7a 	bl	8007a3c <memset>
  if(htim_base->Instance==TIM2)
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254e:	d10c      	bne.n	800256a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002550:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	61da      	str	r2, [r3, #28]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002566:	b00e      	add	sp, #56	; 0x38
 8002568:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM5)
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_TIM_Base_MspInit+0x174>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10a      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	f042 0208 	orr.w	r2, r2, #8
 8002578:	61da      	str	r2, [r3, #28]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	9b01      	ldr	r3, [sp, #4]
 8002584:	e7ef      	b.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM6)
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_TIM_Base_MspInit+0x17c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10a      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	f042 0210 	orr.w	r2, r2, #16
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	9b02      	ldr	r3, [sp, #8]
 80025a0:	e7e1      	b.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM12)
 80025a2:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_TIM_Base_MspInit+0x180>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10a      	bne.n	80025be <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025a8:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	9b03      	ldr	r3, [sp, #12]
 80025bc:	e7d3      	b.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM13)
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <HAL_TIM_Base_MspInit+0x184>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10a      	bne.n	80025da <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025cc:	61da      	str	r2, [r3, #28]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	9304      	str	r3, [sp, #16]
 80025d6:	9b04      	ldr	r3, [sp, #16]
 80025d8:	e7c5      	b.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM16)
 80025da:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <HAL_TIM_Base_MspInit+0x188>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d137      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025e0:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 80025e2:	4838      	ldr	r0, [pc, #224]	; (80026c4 <HAL_TIM_Base_MspInit+0x18c>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025e4:	699a      	ldr	r2, [r3, #24]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 80025e6:	4c38      	ldr	r4, [pc, #224]	; (80026c8 <HAL_TIM_Base_MspInit+0x190>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025f4:	9205      	str	r2, [sp, #20]
 80025f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002606:	9306      	str	r3, [sp, #24]
 8002608:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800260e:	2302      	movs	r3, #2
 8002610:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 8002614:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002616:	2301      	movs	r3, #1
 8002618:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800261a:	f000 ffed 	bl	80035f8 <HAL_GPIO_Init>
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800261e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80026d8 <HAL_TIM_Base_MspInit+0x1a0>
 8002622:	2300      	movs	r3, #0
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002624:	2280      	movs	r2, #128	; 0x80
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800262a:	e9c4 2603 	strd	r2, r6, [r4, #12]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800262e:	60a3      	str	r3, [r4, #8]
    hdma_tim17_ch1_up.Init.Mode = DMA_CIRCULAR;
 8002630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002634:	2220      	movs	r2, #32
 8002636:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800263a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800263c:	4620      	mov	r0, r4
 800263e:	f000 fdf5 	bl	800322c <HAL_DMA_Init>
 8002642:	b108      	cbz	r0, 8002648 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002644:	f7ff f87a 	bl	800173c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 8002648:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800264c:	6265      	str	r5, [r4, #36]	; 0x24
}
 800264e:	e78a      	b.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM17)
 8002650:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_TIM_Base_MspInit+0x194>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d187      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_TIM_Base_MspInit+0x178>)
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 8002658:	4c1d      	ldr	r4, [pc, #116]	; (80026d0 <HAL_TIM_Base_MspInit+0x198>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800265a:	699a      	ldr	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265c:	4e1d      	ldr	r6, [pc, #116]	; (80026d4 <HAL_TIM_Base_MspInit+0x19c>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800265e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002662:	619a      	str	r2, [r3, #24]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800266a:	9207      	str	r2, [sp, #28]
 800266c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	9308      	str	r3, [sp, #32]
 800267e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002684:	2302      	movs	r3, #2
 8002686:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800268a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800268c:	2301      	movs	r3, #1
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <HAL_TIM_Base_MspInit+0x18c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002690:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 8002692:	f000 ffb1 	bl	80035f8 <HAL_GPIO_Init>
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	2300      	movs	r3, #0
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002698:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800269c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a0:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026a4:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a8:	60a3      	str	r3, [r4, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80026aa:	e7c1      	b.n	8002630 <HAL_TIM_Base_MspInit+0xf8>
 80026ac:	40000c00 	.word	0x40000c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40001000 	.word	0x40001000
 80026b8:	40001800 	.word	0x40001800
 80026bc:	40001c00 	.word	0x40001c00
 80026c0:	40014400 	.word	0x40014400
 80026c4:	48000400 	.word	0x48000400
 80026c8:	2000067c 	.word	0x2000067c
 80026cc:	40014800 	.word	0x40014800
 80026d0:	200006c0 	.word	0x200006c0
 80026d4:	40020008 	.word	0x40020008
 80026d8:	40020030 	.word	0x40020030

080026dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026dc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	2214      	movs	r2, #20
{
 80026e0:	b08a      	sub	sp, #40	; 0x28
 80026e2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	2100      	movs	r1, #0
 80026e6:	eb0d 0002 	add.w	r0, sp, r2
 80026ea:	f005 f9a7 	bl	8007a3c <memset>
  if(htim_encoder->Instance==TIM4)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <HAL_TIM_Encoder_MspInit+0x94>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11d      	bne.n	8002732 <HAL_TIM_Encoder_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_TIM_Encoder_MspInit+0x98>)
    GPIO_InitStruct.Pin = E0__Pin|E0_B7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	481f      	ldr	r0, [pc, #124]	; (8002778 <HAL_TIM_Encoder_MspInit+0x9c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	f042 0204 	orr.w	r2, r2, #4
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	f002 0204 	and.w	r2, r2, #4
 8002708:	9201      	str	r2, [sp, #4]
 800270a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002726:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272a:	f000 ff65 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 800272e:	b00a      	add	sp, #40	; 0x28
 8002730:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM19)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d1fa      	bne.n	800272e <HAL_TIM_Encoder_MspInit+0x52>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_TIM_Encoder_MspInit+0x98>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273a:	4811      	ldr	r0, [pc, #68]	; (8002780 <HAL_TIM_Encoder_MspInit+0xa4>)
    __HAL_RCC_TIM19_CLK_ENABLE();
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800274a:	9203      	str	r2, [sp, #12]
 800274c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002764:	2302      	movs	r3, #2
 8002766:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 800276a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276c:	a905      	add	r1, sp, #20
 800276e:	e7dc      	b.n	800272a <HAL_TIM_Encoder_MspInit+0x4e>
 8002770:	40000800 	.word	0x40000800
 8002774:	40021000 	.word	0x40021000
 8002778:	48000400 	.word	0x48000400
 800277c:	40015c00 	.word	0x40015c00
 8002780:	48000800 	.word	0x48000800

08002784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002784:	b510      	push	{r4, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	2214      	movs	r2, #20
 800278c:	2100      	movs	r1, #0
 800278e:	a803      	add	r0, sp, #12
 8002790:	f005 f954 	bl	8007a3c <memset>
  if(htim->Instance==TIM2)
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d117      	bne.n	80027cc <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin|PWM6_Pin|PWM7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	210f      	movs	r1, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ba:	2301      	movs	r3, #1
 80027bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	a903      	add	r1, sp, #12
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c4:	f000 ff18 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80027c8:	b008      	add	sp, #32
 80027ca:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM5)
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_TIM_MspPostInit+0x74>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d1fa      	bne.n	80027c8 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_TIM_MspPostInit+0x78>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	9302      	str	r3, [sp, #8]
 80027e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	220f      	movs	r2, #15
 80027ea:	2302      	movs	r3, #2
 80027ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	a903      	add	r1, sp, #12
 80027f4:	e7e6      	b.n	80027c4 <HAL_TIM_MspPostInit+0x40>
 80027f6:	bf00      	nop
 80027f8:	40000c00 	.word	0x40000c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	48000800 	.word	0x48000800

08002804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b510      	push	{r4, lr}
 8002806:	4601      	mov	r1, r0
 8002808:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800280a:	2200      	movs	r2, #0
 800280c:	2037      	movs	r0, #55	; 0x37
 800280e:	f000 fc3f 	bl	8003090 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002812:	2037      	movs	r0, #55	; 0x37
 8002814:	f000 fc6e 	bl	80030f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_InitTick+0x68>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800281a:	4c15      	ldr	r4, [pc, #84]	; (8002870 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	61da      	str	r2, [r3, #28]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800282c:	a901      	add	r1, sp, #4
 800282e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002830:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002832:	f002 f9b1 	bl	8004b98 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002836:	f002 f997 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_InitTick+0x70>)
 800283c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800283e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002842:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002844:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_InitTick+0x74>)
 8002848:	fbb0 f0f3 	udiv	r0, r0, r3
 800284c:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 800284e:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 8002850:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002852:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8002854:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002856:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002858:	f002 ff84 	bl	8005764 <HAL_TIM_Base_Init>
 800285c:	b920      	cbnz	r0, 8002868 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800285e:	4620      	mov	r0, r4
 8002860:	f002 fd5a 	bl	8005318 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002864:	b008      	add	sp, #32
 8002866:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002868:	2001      	movs	r0, #1
 800286a:	e7fb      	b.n	8002864 <HAL_InitTick+0x60>
 800286c:	40021000 	.word	0x40021000
 8002870:	20000a7c 	.word	0x20000a7c
 8002874:	40001400 	.word	0x40001400
 8002878:	000f4240 	.word	0x000f4240

0800287c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800287c:	e7fe      	b.n	800287c <NMI_Handler>

0800287e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <HardFault_Handler>

08002880 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler>

08002882 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <BusFault_Handler>

08002884 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler>

08002886 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	4770      	bx	lr

08002888 <DebugMon_Handler>:
 8002888:	4770      	bx	lr

0800288a <PendSV_Handler>:
 800288a:	4770      	bx	lr

0800288c <SysTick_Handler>:
 800288c:	4770      	bx	lr
	...

08002890 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <DMA1_Channel1_IRQHandler+0x8>)
 8002892:	f000 bd4a 	b.w	800332a <HAL_DMA_IRQHandler>
 8002896:	bf00      	nop
 8002898:	200006c0 	.word	0x200006c0

0800289c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800289c:	4801      	ldr	r0, [pc, #4]	; (80028a4 <DMA1_Channel3_IRQHandler+0x8>)
 800289e:	f000 bd44 	b.w	800332a <HAL_DMA_IRQHandler>
 80028a2:	bf00      	nop
 80028a4:	2000067c 	.word	0x2000067c

080028a8 <CAN_RX0_IRQHandler>:
void CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80028a8:	4801      	ldr	r0, [pc, #4]	; (80028b0 <CAN_RX0_IRQHandler+0x8>)
 80028aa:	f000 bae1 	b.w	8002e70 <HAL_CAN_IRQHandler>
 80028ae:	bf00      	nop
 80028b0:	20000560 	.word	0x20000560

080028b4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80028b4:	4801      	ldr	r0, [pc, #4]	; (80028bc <TIM7_IRQHandler+0x8>)
 80028b6:	f002 be21 	b.w	80054fc <HAL_TIM_IRQHandler>
 80028ba:	bf00      	nop
 80028bc:	20000a7c 	.word	0x20000a7c

080028c0 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 80028c0:	4801      	ldr	r0, [pc, #4]	; (80028c8 <DMA2_Channel3_IRQHandler+0x8>)
 80028c2:	f000 bd32 	b.w	800332a <HAL_DMA_IRQHandler>
 80028c6:	bf00      	nop
 80028c8:	200005b0 	.word	0x200005b0

080028cc <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc2);
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <DMA2_Channel4_IRQHandler+0x8>)
 80028ce:	f000 bd2c 	b.w	800332a <HAL_DMA_IRQHandler>
 80028d2:	bf00      	nop
 80028d4:	200005f4 	.word	0x200005f4

080028d8 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc3);
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <DMA2_Channel5_IRQHandler+0x8>)
 80028da:	f000 bd26 	b.w	800332a <HAL_DMA_IRQHandler>
 80028de:	bf00      	nop
 80028e0:	20000638 	.word	0x20000638

080028e4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <USB_LP_IRQHandler+0x8>)
 80028e6:	f000 bfdb 	b.w	80038a0 <HAL_PCD_IRQHandler>
 80028ea:	bf00      	nop
 80028ec:	20001788 	.word	0x20001788

080028f0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80028f0:	2001      	movs	r0, #1
 80028f2:	4770      	bx	lr

080028f4 <_kill>:

int _kill(int pid, int sig)
{
 80028f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80028f6:	f005 f869 	bl	80079cc <__errno>
 80028fa:	2316      	movs	r3, #22
 80028fc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002902:	bd08      	pop	{r3, pc}

08002904 <_exit>:

void _exit (int status)
{
 8002904:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002906:	f005 f861 	bl	80079cc <__errno>
 800290a:	2316      	movs	r3, #22
 800290c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800290e:	e7fe      	b.n	800290e <_exit+0xa>

08002910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	460d      	mov	r5, r1
 8002914:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	460e      	mov	r6, r1
 8002918:	1b73      	subs	r3, r6, r5
 800291a:	429c      	cmp	r4, r3
 800291c:	dc01      	bgt.n	8002922 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800291e:	4620      	mov	r0, r4
 8002920:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002922:	f3af 8000 	nop.w
 8002926:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	e7f5      	b.n	8002918 <_read+0x8>

0800292c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	460d      	mov	r5, r1
 8002930:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002932:	460e      	mov	r6, r1
 8002934:	1b73      	subs	r3, r6, r5
 8002936:	429c      	cmp	r4, r3
 8002938:	dc01      	bgt.n	800293e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800293a:	4620      	mov	r0, r4
 800293c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800293e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002942:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002946:	e7f5      	b.n	8002934 <_write+0x8>

08002948 <_close>:

int _close(int file)
{
	return -1;
}
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	4770      	bx	lr

0800294e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800294e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002952:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002954:	2000      	movs	r0, #0
 8002956:	4770      	bx	lr

08002958 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002958:	2001      	movs	r0, #1
 800295a:	4770      	bx	lr

0800295c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr

08002960 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <_sbrk+0x30>)
 8002962:	6811      	ldr	r1, [r2, #0]
{
 8002964:	b510      	push	{r4, lr}
 8002966:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002968:	b909      	cbnz	r1, 800296e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <_sbrk+0x34>)
 800296c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	4909      	ldr	r1, [pc, #36]	; (8002998 <_sbrk+0x38>)
 8002972:	4c0a      	ldr	r4, [pc, #40]	; (800299c <_sbrk+0x3c>)
 8002974:	4403      	add	r3, r0
 8002976:	1b09      	subs	r1, r1, r4
 8002978:	428b      	cmp	r3, r1
 800297a:	d906      	bls.n	800298a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800297c:	f005 f826 	bl	80079cc <__errno>
 8002980:	230c      	movs	r3, #12
 8002982:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002984:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002988:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800298a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800298c:	e7fc      	b.n	8002988 <_sbrk+0x28>
 800298e:	bf00      	nop
 8002990:	20000ac8 	.word	0x20000ac8
 8002994:	20001ca8 	.word	0x20001ca8
 8002998:	20006000 	.word	0x20006000
 800299c:	00000400 	.word	0x00000400

080029a0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <SystemInit+0x10>)
 80029a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ba:	490e      	ldr	r1, [pc, #56]	; (80029f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <LoopForever+0xe>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d0:	4c0b      	ldr	r4, [pc, #44]	; (8002a00 <LoopForever+0x16>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029de:	f7ff ffdf 	bl	80029a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f004 fff9 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e6:	f7fe ff07 	bl	80017f8 <main>

080029ea <LoopForever>:

LoopForever:
    b LoopForever
 80029ea:	e7fe      	b.n	80029ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029ec:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80029f8:	0800a8dc 	.word	0x0800a8dc
  ldr r2, =_sbss
 80029fc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002a00:	20001ca4 	.word	0x20001ca4

08002a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC1_IRQHandler>
	...

08002a08 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_Init+0x20>)
{
 8002a0a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a14:	2003      	movs	r0, #3
 8002a16:	f000 fb29 	bl	800306c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1a:	200f      	movs	r0, #15
 8002a1c:	f7ff fef2 	bl	8002804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a20:	f7ff fc18 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002a24:	2000      	movs	r0, #0
 8002a26:	bd08      	pop	{r3, pc}
 8002a28:	40022000 	.word	0x40022000

08002a2c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <HAL_IncTick+0x10>)
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_IncTick+0x14>)
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	440b      	add	r3, r1
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000acc 	.word	0x20000acc
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002a44:	4b01      	ldr	r3, [pc, #4]	; (8002a4c <HAL_GetTick+0x8>)
 8002a46:	6818      	ldr	r0, [r3, #0]
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000acc 	.word	0x20000acc

08002a50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff fff6 	bl	8002a44 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a58:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	bf1c      	itt	ne
 8002a5c:	4b05      	ldrne	r3, [pc, #20]	; (8002a74 <HAL_Delay+0x24>)
 8002a5e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002a62:	bf18      	it	ne
 8002a64:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a66:	f7ff ffed 	bl	8002a44 <HAL_GetTick>
 8002a6a:	1b43      	subs	r3, r0, r5
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d3fa      	bcc.n	8002a66 <HAL_Delay+0x16>
  {
  }
}
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
 8002a72:	bf00      	nop
 8002a74:	20000004 	.word	0x20000004

08002a78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a78:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d06e      	beq.n	8002b5e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a80:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a84:	b90b      	cbnz	r3, 8002a8a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a86:	f7ff fbfd 	bl	8002284 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a94:	f7ff ffd6 	bl	8002a44 <HAL_GetTick>
 8002a98:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	07d1      	lsls	r1, r2, #31
 8002aa0:	d551      	bpl.n	8002b46 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f022 0202 	bic.w	r2, r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aaa:	f7ff ffcb 	bl	8002a44 <HAL_GetTick>
 8002aae:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	0792      	lsls	r2, r2, #30
 8002ab6:	d454      	bmi.n	8002b62 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ab8:	7e22      	ldrb	r2, [r4, #24]
 8002aba:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	bf0c      	ite	eq
 8002ac0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ac4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002aca:	7e62      	ldrb	r2, [r4, #25]
 8002acc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	bf0c      	ite	eq
 8002ad2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ad6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002adc:	7ea2      	ldrb	r2, [r4, #26]
 8002ade:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	bf0c      	ite	eq
 8002ae4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ae8:	f022 0220 	bicne.w	r2, r2, #32
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002aee:	7ee2      	ldrb	r2, [r4, #27]
 8002af0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	bf0c      	ite	eq
 8002af6:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afa:	f042 0210 	orrne.w	r2, r2, #16
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b00:	7f22      	ldrb	r2, [r4, #28]
 8002b02:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	bf0c      	ite	eq
 8002b08:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b0c:	f022 0208 	bicne.w	r2, r2, #8
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b12:	7f62      	ldrb	r2, [r4, #29]
 8002b14:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	bf0c      	ite	eq
 8002b1a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b1e:	f022 0204 	bicne.w	r2, r2, #4
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b24:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	6961      	ldr	r1, [r4, #20]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	6861      	ldr	r1, [r4, #4]
 8002b34:	3901      	subs	r1, #1
 8002b36:	430a      	orrs	r2, r1
 8002b38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b3a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b3c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b3e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002b40:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002b44:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b46:	f7ff ff7d 	bl	8002a44 <HAL_GetTick>
 8002b4a:	1b40      	subs	r0, r0, r5
 8002b4c:	280a      	cmp	r0, #10
 8002b4e:	d9a4      	bls.n	8002a9a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b58:	2305      	movs	r3, #5
 8002b5a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
 8002b60:	e7f0      	b.n	8002b44 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b62:	f7ff ff6f 	bl	8002a44 <HAL_GetTick>
 8002b66:	1b40      	subs	r0, r0, r5
 8002b68:	280a      	cmp	r0, #10
 8002b6a:	d9a1      	bls.n	8002ab0 <HAL_CAN_Init+0x38>
 8002b6c:	e7f0      	b.n	8002b50 <HAL_CAN_Init+0xd8>

08002b6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b70:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b74:	3b01      	subs	r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d862      	bhi.n	8002c40 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b7a:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b88:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b8a:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b8e:	2401      	movs	r4, #1
 8002b90:	f002 001f 	and.w	r0, r2, #31
 8002b94:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b98:	ea25 0500 	bic.w	r5, r5, r0
 8002b9c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ba0:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ba2:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ba4:	bb85      	cbnz	r5, 8002c08 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ba6:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002baa:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bac:	4025      	ands	r5, r4
 8002bae:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bb2:	888d      	ldrh	r5, [r1, #4]
 8002bb4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bb8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bbc:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bc2:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc8:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bcc:	698a      	ldr	r2, [r1, #24]
 8002bce:	bb6a      	cbnz	r2, 8002c2c <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bd4:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bda:	690a      	ldr	r2, [r1, #16]
 8002bdc:	bb52      	cbnz	r2, 8002c34 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002be2:	4014      	ands	r4, r2
 8002be4:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002be8:	6a0a      	ldr	r2, [r1, #32]
 8002bea:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bec:	bf02      	ittt	eq
 8002bee:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8002bf2:	4310      	orreq	r0, r2
 8002bf4:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c04:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c08:	2d01      	cmp	r5, #1
 8002c0a:	d1df      	bne.n	8002bcc <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c0c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c10:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c12:	4305      	orrs	r5, r0
 8002c14:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c18:	888d      	ldrh	r5, [r1, #4]
 8002c1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c1e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c22:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c26:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c28:	898d      	ldrh	r5, [r1, #12]
 8002c2a:	e7cb      	b.n	8002bc4 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c30:	4302      	orrs	r2, r0
 8002c32:	e7d0      	b.n	8002bd6 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c38:	4302      	orrs	r2, r0
 8002c3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c3e:	e7d3      	b.n	8002be8 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c46:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e7dc      	b.n	8002c06 <HAL_CAN_ConfigFilter+0x98>

08002c4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c4e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c52:	2b01      	cmp	r3, #1
{
 8002c54:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002c56:	b2dd      	uxtb	r5, r3
 8002c58:	d120      	bne.n	8002c9c <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5a:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6a:	f7ff feeb 	bl	8002a44 <HAL_GetTick>
 8002c6e:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f013 0301 	ands.w	r3, r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c7a:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c7c:	461d      	mov	r5, r3
 8002c7e:	e00b      	b.n	8002c98 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c80:	f7ff fee0 	bl	8002a44 <HAL_GetTick>
 8002c84:	1b80      	subs	r0, r0, r6
 8002c86:	280a      	cmp	r0, #10
 8002c88:	d9f2      	bls.n	8002c70 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c92:	2305      	movs	r3, #5
 8002c94:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8002c98:	4628      	mov	r0, r5
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ca2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002ca4:	2501      	movs	r5, #1
 8002ca6:	e7f7      	b.n	8002c98 <HAL_CAN_Start+0x4c>

08002ca8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002caa:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cae:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cb0:	3d01      	subs	r5, #1
 8002cb2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cb4:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8002cb6:	d843      	bhi.n	8002d40 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cb8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8002cbc:	d03c      	beq.n	8002d38 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cbe:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cc2:	2c03      	cmp	r4, #3
 8002cc4:	f04f 0501 	mov.w	r5, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002cca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ccc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	e02a      	b.n	8002d2c <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cd6:	40a5      	lsls	r5, r4
 8002cd8:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8002cda:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8002cde:	f104 0318 	add.w	r3, r4, #24
 8002ce2:	bb20      	cbnz	r0, 8002d2e <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002cee:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8002cf2:	690d      	ldr	r5, [r1, #16]
 8002cf4:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002cf8:	7d09      	ldrb	r1, [r1, #20]
 8002cfa:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002cfc:	bf08      	it	eq
 8002cfe:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8002d02:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8002d06:	bf04      	itt	eq
 8002d08:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8002d0c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d10:	4406      	add	r6, r0
 8002d12:	6851      	ldr	r1, [r2, #4]
 8002d14:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d1e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8002d2a:	2000      	movs	r0, #0
  }
}
 8002d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d2e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8002d30:	4338      	orrs	r0, r7
 8002d32:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8002d36:	e7d8      	b.n	8002cea <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3e:	e7c7      	b.n	8002cd0 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d46:	e7c3      	b.n	8002cd0 <HAL_CAN_AddTxMessage+0x28>

08002d48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d4a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4e:	3c01      	subs	r4, #1
 8002d50:	2c01      	cmp	r4, #1
 8002d52:	d86c      	bhi.n	8002e2e <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d54:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d56:	b941      	cbnz	r1, 8002d6a <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d58:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d5a:	07a4      	lsls	r4, r4, #30
 8002d5c:	d107      	bne.n	8002d6e <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d64:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002d66:	2001      	movs	r0, #1
 8002d68:	e056      	b.n	8002e18 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d6a:	6934      	ldr	r4, [r6, #16]
 8002d6c:	e7f5      	b.n	8002d5a <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d6e:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8002d72:	010c      	lsls	r4, r1, #4
 8002d74:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002d78:	f007 0704 	and.w	r7, r7, #4
 8002d7c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d7e:	2f00      	cmp	r7, #0
 8002d80:	d14b      	bne.n	8002e1a <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d82:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002d86:	0d7f      	lsrs	r7, r7, #21
 8002d88:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d8a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002d8e:	f007 0702 	and.w	r7, r7, #2
 8002d92:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d94:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8002d98:	f007 070f 	and.w	r7, r7, #15
 8002d9c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d9e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002da2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002da6:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002da8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dac:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002dae:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002db0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002db2:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8002db6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	4422      	add	r2, r4
 8002dbc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002dc0:	0a12      	lsrs	r2, r2, #8
 8002dc2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	4422      	add	r2, r4
 8002dc8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002dcc:	0c12      	lsrs	r2, r2, #16
 8002dce:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dd0:	6802      	ldr	r2, [r0, #0]
 8002dd2:	4422      	add	r2, r4
 8002dd4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002dd8:	0e12      	lsrs	r2, r2, #24
 8002dda:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ddc:	6802      	ldr	r2, [r0, #0]
 8002dde:	4422      	add	r2, r4
 8002de0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002de4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	4422      	add	r2, r4
 8002dea:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002dee:	0a12      	lsrs	r2, r2, #8
 8002df0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002df2:	6802      	ldr	r2, [r0, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002dfa:	0c12      	lsrs	r2, r2, #16
 8002dfc:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dfe:	6802      	ldr	r2, [r0, #0]
 8002e00:	4422      	add	r2, r4
 8002e02:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002e06:	0e12      	lsrs	r2, r2, #24
 8002e08:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	b951      	cbnz	r1, 8002e24 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	f042 0220 	orr.w	r2, r2, #32
 8002e14:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8002e16:	2000      	movs	r0, #0
  }
}
 8002e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e1a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002e1e:	08ff      	lsrs	r7, r7, #3
 8002e20:	6057      	str	r7, [r2, #4]
 8002e22:	e7b2      	b.n	8002d8a <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	e7f3      	b.n	8002e16 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	e796      	b.n	8002d64 <HAL_CAN_GetRxMessage+0x1c>

08002e36 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e36:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d805      	bhi.n	8002e4c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	6953      	ldr	r3, [r2, #20]
 8002e44:	4319      	orrs	r1, r3
 8002e46:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8002e48:	2000      	movs	r0, #0
 8002e4a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e52:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
  }
}
 8002e56:	4770      	bx	lr

08002e58 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002e58:	4770      	bx	lr

08002e5a <HAL_CAN_TxMailbox1CompleteCallback>:
 8002e5a:	4770      	bx	lr

08002e5c <HAL_CAN_TxMailbox2CompleteCallback>:
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_TxMailbox0AbortCallback>:
 8002e5e:	4770      	bx	lr

08002e60 <HAL_CAN_TxMailbox1AbortCallback>:
 8002e60:	4770      	bx	lr

08002e62 <HAL_CAN_TxMailbox2AbortCallback>:
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_RxFifo0FullCallback>:
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002e66:	4770      	bx	lr

08002e68 <HAL_CAN_RxFifo1FullCallback>:
 8002e68:	4770      	bx	lr

08002e6a <HAL_CAN_SleepCallback>:
 8002e6a:	4770      	bx	lr

08002e6c <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002e6c:	4770      	bx	lr

08002e6e <HAL_CAN_ErrorCallback>:
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e78:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e7c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e7e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e82:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e86:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e8a:	f016 0401 	ands.w	r4, r6, #1
{
 8002e8e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e90:	d022      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e92:	f017 0401 	ands.w	r4, r7, #1
 8002e96:	d007      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e98:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e9a:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e9c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e9e:	f140 80a5 	bpl.w	8002fec <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ea2:	f7ff ffd9 	bl	8002e58 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ea6:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ea8:	05fb      	lsls	r3, r7, #23
 8002eaa:	d509      	bpl.n	8002ec0 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002eb2:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eb4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002eb6:	f140 80a7 	bpl.w	8003008 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7ff ffcd 	bl	8002e5a <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ec0:	03fb      	lsls	r3, r7, #15
 8002ec2:	d509      	bpl.n	8002ed8 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eca:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ecc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ece:	f140 80a9 	bpl.w	8003024 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f7ff ffc2 	bl	8002e5c <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ed8:	0733      	lsls	r3, r6, #28
 8002eda:	d507      	bpl.n	8002eec <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002edc:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ee0:	bf1f      	itttt	ne
 8002ee2:	682b      	ldrne	r3, [r5, #0]
 8002ee4:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ee6:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eea:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eec:	0777      	lsls	r7, r6, #29
 8002eee:	d508      	bpl.n	8002f02 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ef0:	f01b 0f08 	tst.w	fp, #8
 8002ef4:	d005      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002efc:	4628      	mov	r0, r5
 8002efe:	f7ff ffb1 	bl	8002e64 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f02:	07b0      	lsls	r0, r6, #30
 8002f04:	d506      	bpl.n	8002f14 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	0799      	lsls	r1, r3, #30
 8002f0c:	d002      	beq.n	8002f14 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f7fe f840 	bl	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f14:	0672      	lsls	r2, r6, #25
 8002f16:	d507      	bpl.n	8002f28 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f18:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f1c:	bf1f      	itttt	ne
 8002f1e:	682b      	ldrne	r3, [r5, #0]
 8002f20:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f22:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f26:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f28:	06b3      	lsls	r3, r6, #26
 8002f2a:	d508      	bpl.n	8002f3e <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f2c:	f01a 0f08 	tst.w	sl, #8
 8002f30:	d005      	beq.n	8002f3e <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f38:	4628      	mov	r0, r5
 8002f3a:	f7ff ff95 	bl	8002e68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f3e:	06f7      	lsls	r7, r6, #27
 8002f40:	d506      	bpl.n	8002f50 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	0798      	lsls	r0, r3, #30
 8002f48:	d002      	beq.n	8002f50 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7ff ff8b 	bl	8002e66 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f50:	03b1      	lsls	r1, r6, #14
 8002f52:	d508      	bpl.n	8002f66 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f54:	f019 0f10 	tst.w	r9, #16
 8002f58:	d005      	beq.n	8002f66 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7ff ff82 	bl	8002e6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f66:	03f2      	lsls	r2, r6, #15
 8002f68:	d508      	bpl.n	8002f7c <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f6a:	f019 0f08 	tst.w	r9, #8
 8002f6e:	d005      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff ff78 	bl	8002e6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f7c:	0433      	lsls	r3, r6, #16
 8002f7e:	d52c      	bpl.n	8002fda <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f80:	f019 0f04 	tst.w	r9, #4
 8002f84:	682a      	ldr	r2, [r5, #0]
 8002f86:	d026      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f88:	05f7      	lsls	r7, r6, #23
 8002f8a:	d504      	bpl.n	8002f96 <HAL_CAN_IRQHandler+0x126>
 8002f8c:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f90:	bf18      	it	ne
 8002f92:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f96:	05b0      	lsls	r0, r6, #22
 8002f98:	d504      	bpl.n	8002fa4 <HAL_CAN_IRQHandler+0x134>
 8002f9a:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f9e:	bf18      	it	ne
 8002fa0:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fa4:	0571      	lsls	r1, r6, #21
 8002fa6:	d504      	bpl.n	8002fb2 <HAL_CAN_IRQHandler+0x142>
 8002fa8:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fac:	bf18      	it	ne
 8002fae:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fb2:	0533      	lsls	r3, r6, #20
 8002fb4:	d50f      	bpl.n	8002fd6 <HAL_CAN_IRQHandler+0x166>
 8002fb6:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002fba:	d00c      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d04f      	beq.n	8003060 <HAL_CAN_IRQHandler+0x1f0>
 8002fc0:	d83e      	bhi.n	8003040 <HAL_CAN_IRQHandler+0x1d0>
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d046      	beq.n	8003054 <HAL_CAN_IRQHandler+0x1e4>
 8002fc6:	2b30      	cmp	r3, #48	; 0x30
 8002fc8:	d047      	beq.n	800305a <HAL_CAN_IRQHandler+0x1ea>
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d03f      	beq.n	800304e <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fce:	6993      	ldr	r3, [r2, #24]
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fda:	b12c      	cbz	r4, 8002fe8 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fde:	431c      	orrs	r4, r3
 8002fe0:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f7ff ff43 	bl	8002e6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fec:	077a      	lsls	r2, r7, #29
 8002fee:	d405      	bmi.n	8002ffc <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ff0:	f017 0408 	ands.w	r4, r7, #8
 8002ff4:	d105      	bne.n	8003002 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ff6:	f7ff ff32 	bl	8002e5e <HAL_CAN_TxMailbox0AbortCallback>
 8002ffa:	e755      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ffc:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8003000:	e752      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003002:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8003006:	e74f      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003008:	0579      	lsls	r1, r7, #21
 800300a:	d502      	bpl.n	8003012 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800300c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8003010:	e756      	b.n	8002ec0 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003012:	053a      	lsls	r2, r7, #20
 8003014:	d502      	bpl.n	800301c <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003016:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800301a:	e751      	b.n	8002ec0 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800301c:	4628      	mov	r0, r5
 800301e:	f7ff ff1f 	bl	8002e60 <HAL_CAN_TxMailbox1AbortCallback>
 8003022:	e74d      	b.n	8002ec0 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003024:	0379      	lsls	r1, r7, #13
 8003026:	d502      	bpl.n	800302e <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003028:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800302c:	e754      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800302e:	033a      	lsls	r2, r7, #12
 8003030:	d502      	bpl.n	8003038 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003032:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8003036:	e74f      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003038:	4628      	mov	r0, r5
 800303a:	f7ff ff12 	bl	8002e62 <HAL_CAN_TxMailbox2AbortCallback>
 800303e:	e74b      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d010      	beq.n	8003066 <HAL_CAN_IRQHandler+0x1f6>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d1c2      	bne.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003048:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 800304c:	e7bf      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 800304e:	f044 0408 	orr.w	r4, r4, #8
            break;
 8003052:	e7bc      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003054:	f044 0410 	orr.w	r4, r4, #16
            break;
 8003058:	e7b9      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800305a:	f044 0420 	orr.w	r4, r4, #32
            break;
 800305e:	e7b6      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003060:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8003064:	e7b3      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003066:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800306a:	e7b0      	b.n	8002fce <HAL_CAN_IRQHandler+0x15e>

0800306c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800306e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003070:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003088:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003092:	b530      	push	{r4, r5, lr}
 8003094:	68dc      	ldr	r4, [r3, #12]
 8003096:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	2d04      	cmp	r5, #4
 80030a2:	bf28      	it	cs
 80030a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ac:	bf8c      	ite	hi
 80030ae:	3c03      	subhi	r4, #3
 80030b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b2:	fa03 f505 	lsl.w	r5, r3, r5
 80030b6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ba:	40a3      	lsls	r3, r4
 80030bc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80030c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	bfac      	ite	ge
 80030ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	4a08      	ldrlt	r2, [pc, #32]	; (80030f0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	bfb8      	it	lt
 80030d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	bfaa      	itet	ge
 80030de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80030e8:	bd30      	pop	{r4, r5, pc}
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00
 80030f0:	e000ed14 	.word	0xe000ed14

080030f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030f4:	2800      	cmp	r0, #0
 80030f6:	db08      	blt.n	800310a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f8:	0942      	lsrs	r2, r0, #5
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 001f 	and.w	r0, r0, #31
 8003100:	fa03 f000 	lsl.w	r0, r3, r0
 8003104:	4b01      	ldr	r3, [pc, #4]	; (800310c <HAL_NVIC_EnableIRQ+0x18>)
 8003106:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100

08003110 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003110:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8003112:	4604      	mov	r4, r0
 8003114:	b168      	cbz	r0, 8003132 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003116:	7903      	ldrb	r3, [r0, #4]
 8003118:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800311c:	b913      	cbnz	r3, 8003124 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800311e:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003120:	f7ff f8ea 	bl	80022f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003124:	2302      	movs	r3, #2
 8003126:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003128:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800312a:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800312c:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800312e:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8003130:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
 8003134:	e7fc      	b.n	8003130 <HAL_DAC_Init+0x20>

08003136 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003136:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003138:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800313a:	2400      	movs	r4, #0
 800313c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 800313e:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003140:	b941      	cbnz	r1, 8003154 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003142:	9901      	ldr	r1, [sp, #4]
 8003144:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003146:	440a      	add	r2, r1
 8003148:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800314a:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800314c:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	b002      	add	sp, #8
 8003152:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003154:	9901      	ldr	r1, [sp, #4]
 8003156:	3114      	adds	r1, #20
 8003158:	e7f5      	b.n	8003146 <HAL_DAC_SetValue+0x10>

0800315a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800315a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800315c:	7943      	ldrb	r3, [r0, #5]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f04f 0302 	mov.w	r3, #2
 8003164:	d014      	beq.n	8003190 <HAL_DAC_Start+0x36>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003166:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003168:	6803      	ldr	r3, [r0, #0]
 800316a:	2201      	movs	r2, #1
 800316c:	681c      	ldr	r4, [r3, #0]
 800316e:	408a      	lsls	r2, r1
 8003170:	4322      	orrs	r2, r4
 8003172:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003174:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8003176:	b969      	cbnz	r1, 8003194 <HAL_DAC_Start+0x3a>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003178:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800317c:	2a3c      	cmp	r2, #60	; 0x3c
 800317e:	d103      	bne.n	8003188 <HAL_DAC_Start+0x2e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003186:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003188:	2301      	movs	r3, #1
 800318a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800318c:	2300      	movs	r3, #0
 800318e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8003190:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8003192:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003194:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003198:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800319c:	d1f4      	bne.n	8003188 <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	f042 0202 	orr.w	r2, r2, #2
 80031a4:	e7ef      	b.n	8003186 <HAL_DAC_Start+0x2c>

080031a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80031a6:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80031a8:	7943      	ldrb	r3, [r0, #5]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f04f 0302 	mov.w	r3, #2
 80031b0:	d018      	beq.n	80031e4 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031b2:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80031b4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80031b6:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80031b8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80031bc:	4095      	lsls	r5, r2
 80031be:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031c2:	e9d1 3100 	ldrd	r3, r1, [r1]
 80031c6:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80031c8:	4093      	lsls	r3, r2
 80031ca:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031cc:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	21c0      	movs	r1, #192	; 0xc0
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031da:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031dc:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80031de:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031e0:	2300      	movs	r3, #0
 80031e2:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80031e4:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80031e6:	bd30      	pop	{r4, r5, pc}

080031e8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031e8:	6801      	ldr	r1, [r0, #0]
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <DMA_CalcBaseAndBitshift+0x34>)
 80031ec:	4299      	cmp	r1, r3
{
 80031ee:	b510      	push	{r4, lr}
 80031f0:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031f4:	d809      	bhi.n	800320a <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <DMA_CalcBaseAndBitshift+0x38>)
 80031f8:	440a      	add	r2, r1
 80031fa:	fbb2 f2f4 	udiv	r2, r2, r4
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003202:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8003206:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003208:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <DMA_CalcBaseAndBitshift+0x3c>)
 800320c:	440b      	add	r3, r1
 800320e:	fbb3 f3f4 	udiv	r3, r3, r4
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <DMA_CalcBaseAndBitshift+0x40>)
 8003218:	e7f5      	b.n	8003206 <DMA_CalcBaseAndBitshift+0x1e>
 800321a:	bf00      	nop
 800321c:	40020407 	.word	0x40020407
 8003220:	bffdfff8 	.word	0xbffdfff8
 8003224:	bffdfbf8 	.word	0xbffdfbf8
 8003228:	40020400 	.word	0x40020400

0800322c <HAL_DMA_Init>:
{ 
 800322c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800322e:	4604      	mov	r4, r0
 8003230:	b1f8      	cbz	r0, 8003272 <HAL_DMA_Init+0x46>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8003238:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800323c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003240:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	432b      	orrs	r3, r5
 8003244:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003246:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	6945      	ldr	r5, [r0, #20]
 800324c:	432b      	orrs	r3, r5
 800324e:	6985      	ldr	r5, [r0, #24]
 8003250:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003252:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003254:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003258:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800325c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800325e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8003260:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003262:	f7ff ffc1 	bl	80031e8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003266:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8003268:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800326e:	8423      	strh	r3, [r4, #32]
}  
 8003270:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	e7fc      	b.n	8003270 <HAL_DMA_Init+0x44>

08003276 <HAL_DMA_Start_IT>:
{
 8003276:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003278:	f890 4020 	ldrb.w	r4, [r0, #32]
 800327c:	2c01      	cmp	r4, #1
 800327e:	d034      	beq.n	80032ea <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003280:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003284:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003286:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003288:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800328c:	f04f 0600 	mov.w	r6, #0
 8003290:	f04f 0402 	mov.w	r4, #2
 8003294:	d127      	bne.n	80032e6 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003296:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800329a:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329c:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800329e:	6826      	ldr	r6, [r4, #0]
 80032a0:	f026 0601 	bic.w	r6, r6, #1
 80032a4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032a6:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80032aa:	40bd      	lsls	r5, r7
 80032ac:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80032ae:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b0:	6843      	ldr	r3, [r0, #4]
 80032b2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80032b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80032b6:	bf0b      	itete	eq
 80032b8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80032ba:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032bc:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80032be:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80032c0:	b14b      	cbz	r3, 80032d6 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80032c8:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2000      	movs	r0, #0
} 
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	f043 030a 	orr.w	r3, r3, #10
 80032dc:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	e7f0      	b.n	80032c8 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80032e6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80032ea:	2002      	movs	r0, #2
 80032ec:	e7f2      	b.n	80032d4 <HAL_DMA_Start_IT+0x5e>

080032ee <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d006      	beq.n	8003304 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f6:	2304      	movs	r3, #4
 80032f8:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80032fa:	2300      	movs	r3, #0
 80032fc:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8003300:	2001      	movs	r0, #1
 8003302:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003304:	6803      	ldr	r3, [r0, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	f022 020e 	bic.w	r2, r2, #14
 800330c:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003316:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800331a:	2301      	movs	r3, #1
 800331c:	408b      	lsls	r3, r1
 800331e:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8003320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003324:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
}
 8003328:	4770      	bx	lr

0800332a <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800332a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800332c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800332e:	6803      	ldr	r3, [r0, #0]
{
 8003330:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003332:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003334:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003336:	2404      	movs	r4, #4
 8003338:	4094      	lsls	r4, r2
 800333a:	4234      	tst	r4, r6
 800333c:	d00e      	beq.n	800335c <HAL_DMA_IRQHandler+0x32>
 800333e:	f015 0f04 	tst.w	r5, #4
 8003342:	d00b      	beq.n	800335c <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003348:	bf5e      	ittt	pl
 800334a:	681a      	ldrpl	r2, [r3, #0]
 800334c:	f022 0204 	bicpl.w	r2, r2, #4
 8003350:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003352:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003354:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8003356:	b363      	cbz	r3, 80033b2 <HAL_DMA_IRQHandler+0x88>
}  
 8003358:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800335a:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800335c:	2402      	movs	r4, #2
 800335e:	4094      	lsls	r4, r2
 8003360:	4234      	tst	r4, r6
 8003362:	d012      	beq.n	800338a <HAL_DMA_IRQHandler+0x60>
 8003364:	f015 0f02 	tst.w	r5, #2
 8003368:	d00f      	beq.n	800338a <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	0695      	lsls	r5, r2, #26
 800336e:	d406      	bmi.n	800337e <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f022 020a 	bic.w	r2, r2, #10
 8003376:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003378:	2301      	movs	r3, #1
 800337a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 800337e:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003380:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8003382:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8003386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003388:	e7e5      	b.n	8003356 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800338a:	2408      	movs	r4, #8
 800338c:	4094      	lsls	r4, r2
 800338e:	4234      	tst	r4, r6
 8003390:	d00f      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x88>
 8003392:	072c      	lsls	r4, r5, #28
 8003394:	d50d      	bpl.n	80033b2 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	f024 040e 	bic.w	r4, r4, #14
 800339c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800339e:	2301      	movs	r3, #1
 80033a0:	fa03 f202 	lsl.w	r2, r3, r2
 80033a4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 80033a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ac:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80033ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80033b0:	e7d1      	b.n	8003356 <HAL_DMA_IRQHandler+0x2c>
}  
 80033b2:	bc70      	pop	{r4, r5, r6}
 80033b4:	4770      	bx	lr
	...

080033b8 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <FLASH_SetErrorCode+0x30>)
 80033ba:	68d3      	ldr	r3, [r2, #12]
 80033bc:	f013 0310 	ands.w	r3, r3, #16
 80033c0:	d005      	beq.n	80033ce <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <FLASH_SetErrorCode+0x34>)
 80033c4:	69cb      	ldr	r3, [r1, #28]
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	61cb      	str	r3, [r1, #28]
    flags |= FLASH_FLAG_WRPERR;
 80033cc:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	0752      	lsls	r2, r2, #29
 80033d2:	d506      	bpl.n	80033e2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80033d4:	4905      	ldr	r1, [pc, #20]	; (80033ec <FLASH_SetErrorCode+0x34>)
 80033d6:	69ca      	ldr	r2, [r1, #28]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80033de:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80033e2:	4a01      	ldr	r2, [pc, #4]	; (80033e8 <FLASH_SetErrorCode+0x30>)
 80033e4:	60d3      	str	r3, [r2, #12]
}  
 80033e6:	4770      	bx	lr
 80033e8:	40022000 	.word	0x40022000
 80033ec:	20000ad0 	.word	0x20000ad0

080033f0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_FLASH_Unlock+0x1c>)
 80033f2:	6918      	ldr	r0, [r3, #16]
 80033f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033f8:	d007      	beq.n	800340a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <HAL_FLASH_Unlock+0x20>)
 80033fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80033fe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003402:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003404:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800340a:	4770      	bx	lr
 800340c:	40022000 	.word	0x40022000
 8003410:	45670123 	.word	0x45670123

08003414 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_FLASH_Lock+0x10>)
 8003416:	6913      	ldr	r3, [r2, #16]
 8003418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341c:	6113      	str	r3, [r2, #16]
}
 800341e:	2000      	movs	r0, #0
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000

08003428 <FLASH_WaitForLastOperation>:
{
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff fb0a 	bl	8002a44 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003430:	4c0f      	ldr	r4, [pc, #60]	; (8003470 <FLASH_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 8003432:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003434:	68e3      	ldr	r3, [r4, #12]
 8003436:	07d9      	lsls	r1, r3, #31
 8003438:	d40f      	bmi.n	800345a <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800343a:	68e3      	ldr	r3, [r4, #12]
 800343c:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800343e:	bf44      	itt	mi
 8003440:	2320      	movmi	r3, #32
 8003442:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003444:	68e3      	ldr	r3, [r4, #12]
 8003446:	06db      	lsls	r3, r3, #27
 8003448:	d403      	bmi.n	8003452 <FLASH_WaitForLastOperation+0x2a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800344a:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800344c:	f010 0004 	ands.w	r0, r0, #4
 8003450:	d007      	beq.n	8003462 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8003452:	f7ff ffb1 	bl	80033b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	e003      	b.n	8003462 <FLASH_WaitForLastOperation+0x3a>
    if (Timeout != HAL_MAX_DELAY)
 800345a:	1c68      	adds	r0, r5, #1
 800345c:	d0ea      	beq.n	8003434 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800345e:	b90d      	cbnz	r5, 8003464 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8003460:	2003      	movs	r0, #3
}
 8003462:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003464:	f7ff faee 	bl	8002a44 <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	42a8      	cmp	r0, r5
 800346c:	d9e2      	bls.n	8003434 <FLASH_WaitForLastOperation+0xc>
 800346e:	e7f7      	b.n	8003460 <FLASH_WaitForLastOperation+0x38>
 8003470:	40022000 	.word	0x40022000

08003474 <HAL_FLASH_Program>:
{
 8003474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8003478:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800350c <HAL_FLASH_Program+0x98>
{
 800347c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 800347e:	f899 3018 	ldrb.w	r3, [r9, #24]
 8003482:	2b01      	cmp	r3, #1
{
 8003484:	4604      	mov	r4, r0
 8003486:	460f      	mov	r7, r1
 8003488:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800348a:	d03d      	beq.n	8003508 <HAL_FLASH_Program+0x94>
 800348c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800348e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8003492:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003496:	f7ff ffc7 	bl	8003428 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800349a:	bb80      	cbnz	r0, 80034fe <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800349c:	2c01      	cmp	r4, #1
 800349e:	d003      	beq.n	80034a8 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80034a0:	2c02      	cmp	r4, #2
 80034a2:	bf0c      	ite	eq
 80034a4:	2402      	moveq	r4, #2
 80034a6:	2404      	movne	r4, #4
 80034a8:	2500      	movs	r5, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034aa:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003510 <HAL_FLASH_Program+0x9c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034ae:	46ab      	mov	fp, r5
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80034b0:	0128      	lsls	r0, r5, #4
 80034b2:	f1c0 0220 	rsb	r2, r0, #32
 80034b6:	f1a0 0320 	sub.w	r3, r0, #32
 80034ba:	fa06 f202 	lsl.w	r2, r6, r2
 80034be:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034c2:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80034c6:	4310      	orrs	r0, r2
 80034c8:	fa26 f303 	lsr.w	r3, r6, r3
 80034cc:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034ce:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80034d2:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 80034dc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034e4:	f7ff ffa0 	bl	8003428 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80034e8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 80034f4:	b918      	cbnz	r0, 80034fe <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 80034f6:	3501      	adds	r5, #1
 80034f8:	b2eb      	uxtb	r3, r5
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d8d8      	bhi.n	80034b0 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 80034fe:	2300      	movs	r3, #0
 8003500:	f889 3018 	strb.w	r3, [r9, #24]
}
 8003504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8003508:	2002      	movs	r0, #2
 800350a:	e7fb      	b.n	8003504 <HAL_FLASH_Program+0x90>
 800350c:	20000ad0 	.word	0x20000ad0
 8003510:	40022000 	.word	0x40022000

08003514 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <FLASH_MassErase+0x1c>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <FLASH_MassErase+0x20>)
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352a:	611a      	str	r2, [r3, #16]
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000ad0 	.word	0x20000ad0
 8003534:	40022000 	.word	0x40022000

08003538 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <FLASH_PageErase+0x1c>)
 800353a:	2200      	movs	r2, #0
 800353c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <FLASH_PageErase+0x20>)
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	f042 0202 	orr.w	r2, r2, #2
 8003546:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003548:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003550:	611a      	str	r2, [r3, #16]
}
 8003552:	4770      	bx	lr
 8003554:	20000ad0 	.word	0x20000ad0
 8003558:	40022000 	.word	0x40022000

0800355c <HAL_FLASHEx_Erase>:
{
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8003560:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80035f4 <HAL_FLASHEx_Erase+0x98>
 8003564:	f898 3018 	ldrb.w	r3, [r8, #24]
 8003568:	2b01      	cmp	r3, #1
{
 800356a:	4605      	mov	r5, r0
 800356c:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800356e:	d03d      	beq.n	80035ec <HAL_FLASHEx_Erase+0x90>
 8003570:	2401      	movs	r4, #1
 8003572:	f888 4018 	strb.w	r4, [r8, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003576:	6803      	ldr	r3, [r0, #0]
 8003578:	42a3      	cmp	r3, r4
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800357a:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800357e:	d114      	bne.n	80035aa <HAL_FLASHEx_Erase+0x4e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003580:	f7ff ff52 	bl	8003428 <FLASH_WaitForLastOperation>
 8003584:	b128      	cbz	r0, 8003592 <HAL_FLASHEx_Erase+0x36>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003586:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8003588:	2300      	movs	r3, #0
 800358a:	f888 3018 	strb.w	r3, [r8, #24]
}
 800358e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003592:	f24c 3050 	movw	r0, #50000	; 0xc350
        FLASH_MassErase();
 8003596:	f7ff ffbd 	bl	8003514 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800359a:	f7ff ff45 	bl	8003428 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_FLASHEx_Erase+0x94>)
 80035a0:	6913      	ldr	r3, [r2, #16]
 80035a2:	f023 0304 	bic.w	r3, r3, #4
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	e7ee      	b.n	8003588 <HAL_FLASHEx_Erase+0x2c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80035aa:	f7ff ff3d 	bl	8003428 <FLASH_WaitForLastOperation>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d1e9      	bne.n	8003586 <HAL_FLASHEx_Erase+0x2a>
        *PageError = 0xFFFFFFFFU;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035b8:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80035ba:	686e      	ldr	r6, [r5, #4]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80035bc:	4c0c      	ldr	r4, [pc, #48]	; (80035f0 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80035be:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80035c2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 80035c6:	42b3      	cmp	r3, r6
 80035c8:	d9de      	bls.n	8003588 <HAL_FLASHEx_Erase+0x2c>
          FLASH_PageErase(address);
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7ff ffb4 	bl	8003538 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d4:	f7ff ff28 	bl	8003428 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80035d8:	6923      	ldr	r3, [r4, #16]
 80035da:	f023 0302 	bic.w	r3, r3, #2
 80035de:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80035e0:	b108      	cbz	r0, 80035e6 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80035e2:	603e      	str	r6, [r7, #0]
            break;
 80035e4:	e7d0      	b.n	8003588 <HAL_FLASHEx_Erase+0x2c>
            address += FLASH_PAGE_SIZE)
 80035e6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80035ea:	e7e8      	b.n	80035be <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 80035ec:	2002      	movs	r0, #2
 80035ee:	e7ce      	b.n	800358e <HAL_FLASHEx_Erase+0x32>
 80035f0:	40022000 	.word	0x40022000
 80035f4:	20000ad0 	.word	0x20000ad0

080035f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800377c <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003600:	4c5c      	ldr	r4, [pc, #368]	; (8003774 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8003602:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003604:	680a      	ldr	r2, [r1, #0]
 8003606:	fa32 f503 	lsrs.w	r5, r2, r3
 800360a:	d102      	bne.n	8003612 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800360c:	b003      	add	sp, #12
 800360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003612:	2501      	movs	r5, #1
 8003614:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8003618:	ea1e 0202 	ands.w	r2, lr, r2
 800361c:	f000 80a0 	beq.w	8003760 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003620:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003622:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003624:	f006 0503 	and.w	r5, r6, #3
 8003628:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800362c:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003630:	1e6f      	subs	r7, r5, #1
 8003632:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003634:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003638:	d834      	bhi.n	80036a4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800363a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800363c:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003640:	68cf      	ldr	r7, [r1, #12]
 8003642:	fa07 f708 	lsl.w	r7, r7, r8
 8003646:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800364a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800364c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003652:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003656:	409f      	lsls	r7, r3
 8003658:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800365c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800365e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003660:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003664:	688f      	ldr	r7, [r1, #8]
 8003666:	fa07 f708 	lsl.w	r7, r7, r8
 800366a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003670:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	d119      	bne.n	80036a8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003674:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003678:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800367c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003680:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003684:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003688:	f04f 0e0f 	mov.w	lr, #15
 800368c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003690:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003694:	690f      	ldr	r7, [r1, #16]
 8003696:	fa07 f70b 	lsl.w	r7, r7, fp
 800369a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800369e:	f8ca 7020 	str.w	r7, [sl, #32]
 80036a2:	e001      	b.n	80036a8 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a4:	2d03      	cmp	r5, #3
 80036a6:	d1da      	bne.n	800365e <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80036a8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036aa:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036ae:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b2:	432f      	orrs	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036b4:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80036b8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ba:	d051      	beq.n	8003760 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036bc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80036c0:	f045 0501 	orr.w	r5, r5, #1
 80036c4:	f8c9 5018 	str.w	r5, [r9, #24]
 80036c8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80036cc:	f023 0703 	bic.w	r7, r3, #3
 80036d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80036d4:	f005 0501 	and.w	r5, r5, #1
 80036d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80036dc:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036de:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80036e4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036e6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80036ea:	f04f 0c0f 	mov.w	ip, #15
 80036ee:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036fa:	d033      	beq.n	8003764 <HAL_GPIO_Init+0x16c>
 80036fc:	4d1e      	ldr	r5, [pc, #120]	; (8003778 <HAL_GPIO_Init+0x180>)
 80036fe:	42a8      	cmp	r0, r5
 8003700:	d032      	beq.n	8003768 <HAL_GPIO_Init+0x170>
 8003702:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003706:	42a8      	cmp	r0, r5
 8003708:	d030      	beq.n	800376c <HAL_GPIO_Init+0x174>
 800370a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800370e:	42a8      	cmp	r0, r5
 8003710:	d02e      	beq.n	8003770 <HAL_GPIO_Init+0x178>
 8003712:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003716:	42a8      	cmp	r0, r5
 8003718:	bf0c      	ite	eq
 800371a:	2504      	moveq	r5, #4
 800371c:	2505      	movne	r5, #5
 800371e:	fa05 f50e 	lsl.w	r5, r5, lr
 8003722:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003726:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8003728:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800372a:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800372c:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003730:	bf0c      	ite	eq
 8003732:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003734:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8003736:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8003738:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800373a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800373e:	bf0c      	ite	eq
 8003740:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003742:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8003744:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8003746:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003748:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800374c:	bf0c      	ite	eq
 800374e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003750:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8003752:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8003754:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003756:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8003758:	bf54      	ite	pl
 800375a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800375c:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 800375e:	60e5      	str	r5, [r4, #12]
    position++;
 8003760:	3301      	adds	r3, #1
 8003762:	e74f      	b.n	8003604 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003764:	2500      	movs	r5, #0
 8003766:	e7da      	b.n	800371e <HAL_GPIO_Init+0x126>
 8003768:	2501      	movs	r5, #1
 800376a:	e7d8      	b.n	800371e <HAL_GPIO_Init+0x126>
 800376c:	2502      	movs	r5, #2
 800376e:	e7d6      	b.n	800371e <HAL_GPIO_Init+0x126>
 8003770:	2503      	movs	r5, #3
 8003772:	e7d4      	b.n	800371e <HAL_GPIO_Init+0x126>
 8003774:	40010400 	.word	0x40010400
 8003778:	48000400 	.word	0x48000400
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003780:	6903      	ldr	r3, [r0, #16]
 8003782:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003784:	bf14      	ite	ne
 8003786:	2001      	movne	r0, #1
 8003788:	2000      	moveq	r0, #0
 800378a:	4770      	bx	lr

0800378c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800378c:	b10a      	cbz	r2, 8003792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800378e:	6181      	str	r1, [r0, #24]
 8003790:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003792:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003794:	4770      	bx	lr

08003796 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003796:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003798:	4604      	mov	r4, r0
{
 800379a:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800379c:	2800      	cmp	r0, #0
 800379e:	d04f      	beq.n	8003840 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037a0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80037a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a8:	b91b      	cbnz	r3, 80037b2 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037aa:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ae:	f003 ffe5 	bl	800777c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	f002 fce6 	bl	800618a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	6865      	ldr	r5, [r4, #4]
 80037c2:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037c4:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c6:	4618      	mov	r0, r3
 80037c8:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ca:	428d      	cmp	r5, r1
 80037cc:	f103 0201 	add.w	r2, r3, #1
 80037d0:	d81b      	bhi.n	800380a <HAL_PCD_Init+0x74>
 80037d2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037d4:	2628      	movs	r6, #40	; 0x28
 80037d6:	4619      	mov	r1, r3
 80037d8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	4285      	cmp	r5, r0
 80037dc:	f103 0301 	add.w	r3, r3, #1
 80037e0:	d821      	bhi.n	8003826 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80037e2:	f104 0610 	add.w	r6, r4, #16
 80037e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037e8:	466d      	mov	r5, sp
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	6833      	ldr	r3, [r6, #0]
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	1d23      	adds	r3, r4, #4
 80037f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	f002 fcd2 	bl	800619e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80037fa:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80037fc:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80037fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003802:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8003806:	b007      	add	sp, #28
 8003808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 800380a:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800380e:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8003812:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8003816:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800381a:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8003820:	6418      	str	r0, [r3, #64]	; 0x40
 8003822:	4613      	mov	r3, r2
 8003824:	e7d0      	b.n	80037c8 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8003826:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800382a:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800382e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8003832:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003836:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800383a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383e:	e7cb      	b.n	80037d8 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
 8003842:	e7e0      	b.n	8003806 <HAL_PCD_Init+0x70>

08003844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003844:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8003846:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800384a:	2b01      	cmp	r3, #1
{
 800384c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800384e:	d010      	beq.n	8003872 <HAL_PCD_Start+0x2e>
 8003850:	2501      	movs	r5, #1
 8003852:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003856:	6800      	ldr	r0, [r0, #0]
 8003858:	f002 fc8e 	bl	8006178 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800385c:	4629      	mov	r1, r5
 800385e:	4620      	mov	r0, r4
 8003860:	f004 f8b3 	bl	80079ca <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f002 ff45 	bl	80066f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800386a:	2000      	movs	r0, #0
 800386c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003870:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003872:	2002      	movs	r0, #2
 8003874:	e7fc      	b.n	8003870 <HAL_PCD_Start+0x2c>

08003876 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003876:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003878:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800387c:	2a01      	cmp	r2, #1
{
 800387e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003880:	d00b      	beq.n	800389a <HAL_PCD_SetAddress+0x24>
 8003882:	2201      	movs	r2, #1
 8003884:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003888:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f002 ff2b 	bl	80066e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003892:	2000      	movs	r0, #0
 8003894:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003898:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800389a:	2002      	movs	r0, #2
 800389c:	e7fc      	b.n	8003898 <HAL_PCD_SetAddress+0x22>
	...

080038a0 <HAL_PCD_IRQHandler>:
{
 80038a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80038a6:	6800      	ldr	r0, [r0, #0]
 80038a8:	f002 ff26 	bl	80066f8 <USB_ReadInterrupts>
 80038ac:	0400      	lsls	r0, r0, #16
 80038ae:	d508      	bpl.n	80038c2 <HAL_PCD_IRQHandler+0x22>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038b0:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8003b74 <HAL_PCD_IRQHandler+0x2d4>
 80038b4:	4fae      	ldr	r7, [pc, #696]	; (8003b70 <HAL_PCD_IRQHandler+0x2d0>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	f100 8093 	bmi.w	80039e8 <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	f002 ff18 	bl	80066f8 <USB_ReadInterrupts>
 80038c8:	0541      	lsls	r1, r0, #21
 80038ca:	d50f      	bpl.n	80038ec <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80038d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 80038da:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80038e0:	f003 ffa3 	bl	800782a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038e4:	2100      	movs	r1, #0
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ffc5 	bl	8003876 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	f002 ff03 	bl	80066f8 <USB_ReadInterrupts>
 80038f2:	0446      	lsls	r6, r0, #17
 80038f4:	d508      	bpl.n	8003908 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80038fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	f002 fef5 	bl	80066f8 <USB_ReadInterrupts>
 800390e:	0485      	lsls	r5, r0, #18
 8003910:	d508      	bpl.n	8003924 <HAL_PCD_IRQHandler+0x84>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	f002 fee7 	bl	80066f8 <USB_ReadInterrupts>
 800392a:	04c0      	lsls	r0, r0, #19
 800392c:	d51c      	bpl.n	8003968 <HAL_PCD_IRQHandler+0xc8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003940:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003944:	f023 0308 	bic.w	r3, r3, #8
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003950:	4620      	mov	r0, r4
 8003952:	f003 ff8d 	bl	8007870 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800395c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	f002 fec5 	bl	80066f8 <USB_ReadInterrupts>
 800396e:	0501      	lsls	r1, r0, #20
 8003970:	d519      	bpl.n	80039a6 <HAL_PCD_IRQHandler+0x106>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003978:	b29b      	uxth	r3, r3
 800397a:	f043 0308 	orr.w	r3, r3, #8
 800397e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003982:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003992:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003996:	b29b      	uxth	r3, r3
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80039a0:	4620      	mov	r0, r4
 80039a2:	f003 ff55 	bl	8007850 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	f002 fea6 	bl	80066f8 <USB_ReadInterrupts>
 80039ac:	0582      	lsls	r2, r0, #22
 80039ae:	d50b      	bpl.n	80039c8 <HAL_PCD_IRQHandler+0x128>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80039b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f003 ff2d 	bl	8007822 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	f002 fe95 	bl	80066f8 <USB_ReadInterrupts>
 80039ce:	05c3      	lsls	r3, r0, #23
 80039d0:	d508      	bpl.n	80039e4 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80039d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80039e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80039e8:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80039ec:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80039ee:	f015 050f 	ands.w	r5, r5, #15
 80039f2:	f040 80c1 	bne.w	8003b78 <HAL_PCD_IRQHandler+0x2d8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039f6:	f011 0110 	ands.w	r1, r1, #16
 80039fa:	d12d      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039fc:	8803      	ldrh	r3, [r0, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea03 0308 	and.w	r3, r3, r8
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a08:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a0e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8003a1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a1e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8003a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a26:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003a28:	4413      	add	r3, r2
 8003a2a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f003 fef0 	bl	8007812 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a32:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f43f af3d 	beq.w	80038b6 <HAL_PCD_IRQHandler+0x16>
 8003a3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	f47f af39 	bne.w	80038b6 <HAL_PCD_IRQHandler+0x16>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a52:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003a56:	e72e      	b.n	80038b6 <HAL_PCD_IRQHandler+0x16>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a58:	8805      	ldrh	r5, [r0, #0]
 8003a5a:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a5c:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8003a60:	d021      	beq.n	8003aa6 <HAL_PCD_IRQHandler+0x206>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a66:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a74:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003a78:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8003a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a80:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a84:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8003a88:	f003 f862 	bl	8006b50 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	8813      	ldrh	r3, [r2, #0]
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	051b      	lsls	r3, r3, #20
 8003a96:	0d1b      	lsrs	r3, r3, #20
 8003a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f003 fea8 	bl	80077f4 <HAL_PCD_SetupStageCallback>
 8003aa4:	e707      	b.n	80038b6 <HAL_PCD_IRQHandler+0x16>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003aa6:	041a      	lsls	r2, r3, #16
 8003aa8:	f57f af05 	bpl.w	80038b6 <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003aac:	8803      	ldrh	r3, [r0, #0]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	051b      	lsls	r3, r3, #20
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003abc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ac0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003aca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ace:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8003ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ada:	b18b      	cbz	r3, 8003b00 <HAL_PCD_IRQHandler+0x260>
 8003adc:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8003ae0:	b171      	cbz	r1, 8003b00 <HAL_PCD_IRQHandler+0x260>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ae2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003ae6:	f003 f833 	bl	8006b50 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003aee:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8003af2:	4413      	add	r3, r2
 8003af4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003af8:	4629      	mov	r1, r5
 8003afa:	4620      	mov	r0, r4
 8003afc:	f003 fe80 	bl	8007800 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	880b      	ldrh	r3, [r1, #0]
 8003b04:	051b      	lsls	r3, r3, #20
 8003b06:	f53f aed6 	bmi.w	80038b6 <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b0a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003b0e:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8003b18:	b9cd      	cbnz	r5, 8003b4e <HAL_PCD_IRQHandler+0x2ae>
 8003b1a:	5ac2      	ldrh	r2, [r0, r3]
 8003b1c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b20:	0412      	lsls	r2, r2, #16
 8003b22:	0c12      	lsrs	r2, r2, #16
 8003b24:	52c2      	strh	r2, [r0, r3]
 8003b26:	5ac2      	ldrh	r2, [r0, r3]
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2e:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b30:	880b      	ldrh	r3, [r1, #0]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	800b      	strh	r3, [r1, #0]
 8003b4c:	e6b3      	b.n	80038b6 <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b4e:	2d3e      	cmp	r5, #62	; 0x3e
 8003b50:	d806      	bhi.n	8003b60 <HAL_PCD_IRQHandler+0x2c0>
 8003b52:	086a      	lsrs	r2, r5, #1
 8003b54:	07ee      	lsls	r6, r5, #31
 8003b56:	bf48      	it	mi
 8003b58:	3201      	addmi	r2, #1
 8003b5a:	0292      	lsls	r2, r2, #10
 8003b5c:	b292      	uxth	r2, r2
 8003b5e:	e7e6      	b.n	8003b2e <HAL_PCD_IRQHandler+0x28e>
 8003b60:	096a      	lsrs	r2, r5, #5
 8003b62:	06ed      	lsls	r5, r5, #27
 8003b64:	bf08      	it	eq
 8003b66:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003b6a:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8003b6e:	e7f5      	b.n	8003b5c <HAL_PCD_IRQHandler+0x2bc>
 8003b70:	ffff8000 	.word	0xffff8000
 8003b74:	ffff8f0f 	.word	0xffff8f0f
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b78:	fa0f f985 	sxth.w	r9, r5
 8003b7c:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b80:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b82:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b84:	f140 80f5 	bpl.w	8003d72 <HAL_PCD_IRQHandler+0x4d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b88:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8003b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	0d1b      	lsrs	r3, r3, #20
 8003b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8003b98:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b9a:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8003b9e:	fb01 4105 	mla	r1, r1, r5, r4
 8003ba2:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8003ba6:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8003baa:	b9bb      	cbnz	r3, 8003bdc <HAL_PCD_IRQHandler+0x33c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003bb0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3306      	adds	r3, #6
 8003bb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bbc:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8003bc0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8003bc4:	f1ba 0f00 	cmp.w	sl, #0
 8003bc8:	f000 80b7 	beq.w	8003d3a <HAL_PCD_IRQHandler+0x49a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003bcc:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003bd0:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bd2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003bd6:	f002 ffbb 	bl	8006b50 <USB_ReadPMA>
 8003bda:	e0ae      	b.n	8003d3a <HAL_PCD_IRQHandler+0x49a>
          if (ep->type == EP_TYPE_BULK)
 8003bdc:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8003be6:	f040 8084 	bne.w	8003cf2 <HAL_PCD_IRQHandler+0x452>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bea:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= count)
 8003bee:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bf2:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bf6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bfa:	d03d      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x3d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bfc:	fa1a fa8e 	uxtah	sl, sl, lr
 8003c00:	f10a 0a02 	add.w	sl, sl, #2
 8003c04:	f83c a01a 	ldrh.w	sl, [ip, sl, lsl #1]
 8003c08:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8003c0c:	4592      	cmp	sl, r2
 8003c0e:	d913      	bls.n	8003c38 <HAL_PCD_IRQHandler+0x398>
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c22:	0412      	lsls	r2, r2, #16
 8003c24:	0c12      	lsrs	r2, r2, #16
 8003c26:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c32:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8003c36:	e005      	b.n	8003c44 <HAL_PCD_IRQHandler+0x3a4>
      ep->xfer_len -= count;
 8003c38:	eba2 020a 	sub.w	r2, r2, sl
 8003c3c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d0e8      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x376>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c44:	0672      	lsls	r2, r6, #25
 8003c46:	d50d      	bpl.n	8003c64 <HAL_PCD_IRQHandler+0x3c4>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c54:	0412      	lsls	r2, r2, #16
 8003c56:	0c12      	lsrs	r2, r2, #16
 8003c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c5c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c60:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003c64:	f1ba 0f00 	cmp.w	sl, #0
 8003c68:	d067      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c6a:	2128      	movs	r1, #40	; 0x28
 8003c6c:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c70:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003c74:	4653      	mov	r3, sl
 8003c76:	e7ac      	b.n	8003bd2 <HAL_PCD_IRQHandler+0x332>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c78:	fa1a fe8e 	uxtah	lr, sl, lr
 8003c7c:	f10e 0e06 	add.w	lr, lr, #6
 8003c80:	f83c a01e 	ldrh.w	sl, [ip, lr, lsl #1]
 8003c84:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8003c88:	4592      	cmp	sl, r2
 8003c8a:	d912      	bls.n	8003cb2 <HAL_PCD_IRQHandler+0x412>
 8003c8c:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c9c:	0412      	lsls	r2, r2, #16
 8003c9e:	0c12      	lsrs	r2, r2, #16
 8003ca0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8003cb0:	e005      	b.n	8003cbe <HAL_PCD_IRQHandler+0x41e>
      ep->xfer_len -= count;
 8003cb2:	eba2 020a 	sub.w	r2, r2, sl
 8003cb6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d0e8      	beq.n	8003c90 <HAL_PCD_IRQHandler+0x3f0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cbe:	0671      	lsls	r1, r6, #25
 8003cc0:	d40d      	bmi.n	8003cde <HAL_PCD_IRQHandler+0x43e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cc6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cce:	0412      	lsls	r2, r2, #16
 8003cd0:	0c12      	lsrs	r2, r2, #16
 8003cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003cda:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003cde:	f1ba 0f00 	cmp.w	sl, #0
 8003ce2:	d02a      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ce4:	2128      	movs	r1, #40	; 0x28
 8003ce6:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cea:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003cee:	4653      	mov	r3, sl
 8003cf0:	e76f      	b.n	8003bd2 <HAL_PCD_IRQHandler+0x332>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cf2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cf6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cfe:	0412      	lsls	r2, r2, #16
 8003d00:	0c12      	lsrs	r2, r2, #16
 8003d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d06:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d0a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d0e:	f891 e168 	ldrb.w	lr, [r1, #360]	; 0x168
 8003d12:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8003d16:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d1e:	f04f 0208 	mov.w	r2, #8
 8003d22:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d24:	d05d      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x542>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d26:	3302      	adds	r3, #2
 8003d28:	fb12 330e 	smlabb	r3, r2, lr, r3
 8003d2c:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8003d30:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8003d34:	f1ba 0f00 	cmp.w	sl, #0
 8003d38:	d19a      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x3d0>
        ep->xfer_count += count;
 8003d3a:	2128      	movs	r1, #40	; 0x28
 8003d3c:	fb01 4305 	mla	r3, r1, r5, r4
 8003d40:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003d44:	4452      	add	r2, sl
 8003d46:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003d4a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003d4e:	4452      	add	r2, sl
 8003d50:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d54:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003d58:	b11a      	cbz	r2, 8003d62 <HAL_PCD_IRQHandler+0x4c2>
 8003d5a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003d5e:	459a      	cmp	sl, r3
 8003d60:	d24a      	bcs.n	8003df8 <HAL_PCD_IRQHandler+0x558>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d62:	2328      	movs	r3, #40	; 0x28
 8003d64:	fb03 4305 	mla	r3, r3, r5, r4
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003d6e:	f003 fd47 	bl	8007800 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d72:	0632      	lsls	r2, r6, #24
 8003d74:	f57f ad9f 	bpl.w	80038b6 <HAL_PCD_IRQHandler+0x16>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	ea03 0308 	and.w	r3, r3, r8
 8003d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d88:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8003d8c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8003d90:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8003d94:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003d98:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d056      	beq.n	8003e4e <HAL_PCD_IRQHandler+0x5ae>
          ep->xfer_len = 0U;
 8003da0:	fb0c 4c05 	mla	ip, ip, r5, r4
 8003da4:	2500      	movs	r5, #0
 8003da6:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003daa:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003dae:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8003db2:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8003db6:	d038      	beq.n	8003e2a <HAL_PCD_IRQHandler+0x58a>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db8:	bb33      	cbnz	r3, 8003e08 <HAL_PCD_IRQHandler+0x568>
 8003dba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003dbe:	f200 4004 	addw	r0, r0, #1028	; 0x404
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc2:	fa10 f083 	uxtah	r0, r0, r3
 8003dc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8003dca:	8803      	ldrh	r3, [r0, #0]
 8003dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	8003      	strh	r3, [r0, #0]
 8003dd6:	8803      	ldrh	r3, [r0, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	8003      	strh	r3, [r0, #0]
 8003de0:	e01d      	b.n	8003e1e <HAL_PCD_IRQHandler+0x57e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003de2:	3306      	adds	r3, #6
 8003de4:	fb12 330e 	smlabb	r3, r2, lr, r3
 8003de8:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8003dec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8003df0:	f1ba 0f00 	cmp.w	sl, #0
 8003df4:	d0a1      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x49a>
 8003df6:	e778      	b.n	8003cea <HAL_PCD_IRQHandler+0x44a>
        ep = &hpcd->OUT_ep[epindex];
 8003df8:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003e02:	f002 fc8d 	bl	8006720 <USB_EPStartXfer>
 8003e06:	e7b4      	b.n	8003d72 <HAL_PCD_IRQHandler+0x4d2>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x57e>
 8003e0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e10:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8003e14:	fa10 f082 	uxtah	r0, r0, r2
 8003e18:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8003e1c:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e1e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f003 fcf5 	bl	8007812 <HAL_PCD_DataInStageCallback>
 8003e28:	e545      	b.n	80038b6 <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e2a:	b923      	cbnz	r3, 8003e36 <HAL_PCD_IRQHandler+0x596>
 8003e2c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e30:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003e34:	e7c5      	b.n	8003dc2 <HAL_PCD_IRQHandler+0x522>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d1f1      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x57e>
 8003e3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e3e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003e42:	fa10 f383 	uxtah	r3, r0, r3
 8003e46:	eb03 1001 	add.w	r0, r3, r1, lsl #4
 8003e4a:	8006      	strh	r6, [r0, #0]
 8003e4c:	e7e7      	b.n	8003e1e <HAL_PCD_IRQHandler+0x57e>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e4e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8003e52:	fb0c 4c05 	mla	ip, ip, r5, r4
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003e56:	f416 7b80 	ands.w	fp, r6, #256	; 0x100
          if (ep->xfer_len > TxByteNbre)
 8003e5a:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e5e:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003e62:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003e66:	d123      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x610>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e68:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e6c:	fa1a fa83 	uxtah	sl, sl, r3
 8003e70:	f10a 0a02 	add.w	sl, sl, #2
 8003e74:	f83e 301a 	ldrh.w	r3, [lr, sl, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8003e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d302      	bcc.n	8003e86 <HAL_PCD_IRQHandler+0x5e6>
 8003e80:	f8cc b040 	str.w	fp, [ip, #64]	; 0x40
 8003e84:	e7cd      	b.n	8003e22 <HAL_PCD_IRQHandler+0x582>
            ep->xfer_len -= TxByteNbre;
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            ep->xfer_buff += TxByteNbre;
 8003e8c:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8003e90:	441a      	add	r2, r3
 8003e92:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8003e96:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8003e9a:	3501      	adds	r5, #1
            ep->xfer_count += TxByteNbre;
 8003e9c:	4413      	add	r3, r2
        ep = &hpcd->IN_ep[epindex];
 8003e9e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8003ea2:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003eaa:	f002 fc39 	bl	8006720 <USB_EPStartXfer>
 8003eae:	e502      	b.n	80038b6 <HAL_PCD_IRQHandler+0x16>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eb0:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8003eb4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003eb8:	f000 80df 	beq.w	800407a <HAL_PCD_IRQHandler+0x7da>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ebc:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8003ec0:	fa1a fa8c 	uxtah	sl, sl, ip
 8003ec4:	f10a 0a02 	add.w	sl, sl, #2
 8003ec8:	b2b6      	uxth	r6, r6
 8003eca:	f83e c01a 	ldrh.w	ip, [lr, sl, lsl #1]
 8003ece:	f04f 0e28 	mov.w	lr, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 8003ed2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003ed6:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
 8003ed8:	fb0e 4e05 	mla	lr, lr, r5, r4
 8003edc:	bf34      	ite	cc
 8003ede:	eba2 020c 	subcc.w	r2, r2, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee2:	2200      	movcs	r2, #0
 8003ee4:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	d150      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x6ee>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eec:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	d13a      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x6ca>
 8003ef4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8003ef8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003efc:	010b      	lsls	r3, r1, #4
 8003efe:	fa12 f585 	uxtah	r5, r2, r5
 8003f02:	5aea      	ldrh	r2, [r5, r3]
 8003f04:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003f08:	0412      	lsls	r2, r2, #16
 8003f0a:	0c12      	lsrs	r2, r2, #16
 8003f0c:	52ea      	strh	r2, [r5, r3]
 8003f0e:	5aea      	ldrh	r2, [r5, r3]
 8003f10:	b292      	uxth	r2, r2
 8003f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f16:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003f1c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003f20:	fa10 f082 	uxtah	r0, r0, r2
 8003f24:	5ac2      	ldrh	r2, [r0, r3]
 8003f26:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003f2a:	0412      	lsls	r2, r2, #16
 8003f2c:	0c12      	lsrs	r2, r2, #16
 8003f2e:	52c2      	strh	r2, [r0, r3]
 8003f30:	5ac2      	ldrh	r2, [r0, r3]
 8003f32:	b292      	uxth	r2, r2
 8003f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f38:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f003 fc69 	bl	8007812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f40:	2e00      	cmp	r6, #0
 8003f42:	f000 80e0 	beq.w	8004106 <HAL_PCD_IRQHandler+0x866>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f46:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f64:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003f68:	e0cd      	b.n	8004106 <HAL_PCD_IRQHandler+0x866>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f6a:	2d01      	cmp	r5, #1
 8003f6c:	d1e5      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x69a>
 8003f6e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8003f72:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 8003f76:	010b      	lsls	r3, r1, #4
 8003f78:	fa1c f585 	uxtah	r5, ip, r5
 8003f7c:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f7e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8003f82:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003f86:	fa10 f585 	uxtah	r5, r0, r5
 8003f8a:	52ea      	strh	r2, [r5, r3]
 8003f8c:	e7d5      	b.n	8003f3a <HAL_PCD_IRQHandler+0x69a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f8e:	b16e      	cbz	r6, 8003fac <HAL_PCD_IRQHandler+0x70c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f90:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003f94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f9c:	0412      	lsls	r2, r2, #16
 8003f9e:	0c12      	lsrs	r2, r2, #16
 8003fa0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa8:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003fac:	2228      	movs	r2, #40	; 0x28
 8003fae:	fb02 4205 	mla	r2, r2, r5, r4
 8003fb2:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 80a5 	bne.w	8004106 <HAL_PCD_IRQHandler+0x866>
        ep->xfer_buff += TxByteNbre;
 8003fbc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fbe:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8003fc2:	eb03 060c 	add.w	r6, r3, ip
        ep->xfer_count += TxByteNbre;
 8003fc6:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8003fc8:	63d6      	str	r6, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8003fca:	4463      	add	r3, ip
 8003fcc:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003fd0:	459e      	cmp	lr, r3
 8003fd2:	d326      	bcc.n	8004022 <HAL_PCD_IRQHandler+0x782>
          ep->xfer_len_db -= len;
 8003fd4:	ebae 0e03 	sub.w	lr, lr, r3
 8003fd8:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fdc:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8003fe0:	fa1f fc83 	uxth.w	ip, r3
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	d13b      	bne.n	8004060 <HAL_PCD_IRQHandler+0x7c0>
 8003fe8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003fec:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8003ff0:	fa1e f282 	uxtah	r2, lr, r2
 8003ff4:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8003ff8:	bb03      	cbnz	r3, 800403c <HAL_PCD_IRQHandler+0x79c>
 8003ffa:	880b      	ldrh	r3, [r1, #0]
 8003ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	800b      	strh	r3, [r1, #0]
 8004006:	880b      	ldrh	r3, [r1, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400e:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004010:	2128      	movs	r1, #40	; 0x28
 8004012:	fb01 4505 	mla	r5, r1, r5, r4
 8004016:	4663      	mov	r3, ip
 8004018:	8e2a      	ldrh	r2, [r5, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800401a:	4631      	mov	r1, r6
 800401c:	f002 fb70 	bl	8006700 <USB_WritePMA>
 8004020:	e071      	b.n	8004106 <HAL_PCD_IRQHandler+0x866>
        else if (ep->xfer_len_db == 0U)
 8004022:	f1be 0f00 	cmp.w	lr, #0
 8004026:	d103      	bne.n	8004030 <HAL_PCD_IRQHandler+0x790>
          ep->xfer_fill_db = 0U;
 8004028:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800402c:	4663      	mov	r3, ip
 800402e:	e7d5      	b.n	8003fdc <HAL_PCD_IRQHandler+0x73c>
          ep->xfer_fill_db = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8004036:	6493      	str	r3, [r2, #72]	; 0x48
 8004038:	4673      	mov	r3, lr
 800403a:	e7cf      	b.n	8003fdc <HAL_PCD_IRQHandler+0x73c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800403c:	2b3e      	cmp	r3, #62	; 0x3e
 800403e:	d807      	bhi.n	8004050 <HAL_PCD_IRQHandler+0x7b0>
 8004040:	085a      	lsrs	r2, r3, #1
 8004042:	07db      	lsls	r3, r3, #31
 8004044:	bf48      	it	mi
 8004046:	3201      	addmi	r2, #1
 8004048:	0292      	lsls	r2, r2, #10
 800404a:	b292      	uxth	r2, r2
 800404c:	800a      	strh	r2, [r1, #0]
 800404e:	e7df      	b.n	8004010 <HAL_PCD_IRQHandler+0x770>
 8004050:	095a      	lsrs	r2, r3, #5
 8004052:	06db      	lsls	r3, r3, #27
 8004054:	bf08      	it	eq
 8004056:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800405a:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800405e:	e7f4      	b.n	800404a <HAL_PCD_IRQHandler+0x7aa>
 8004060:	2a01      	cmp	r2, #1
 8004062:	d1d5      	bne.n	8004010 <HAL_PCD_IRQHandler+0x770>
 8004064:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004068:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800406c:	fa12 f383 	uxtah	r3, r2, r3
 8004070:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8004074:	f8a1 c000 	strh.w	ip, [r1]
 8004078:	e7ca      	b.n	8004010 <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800407a:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 800407e:	fa1a fb8b 	uxtah	fp, sl, fp
 8004082:	f10b 0b06 	add.w	fp, fp, #6
 8004086:	b2b6      	uxth	r6, r6
 8004088:	f83e e01b 	ldrh.w	lr, [lr, fp, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800408c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004090:	4596      	cmp	lr, r2
      ep->xfer_len = 0U;
 8004092:	bf88      	it	hi
 8004094:	4662      	movhi	r2, ip
 8004096:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800409a:	fb0c 4c05 	mla	ip, ip, r5, r4
      ep->xfer_len -= TxByteNbre;
 800409e:	bf98      	it	ls
 80040a0:	eba2 020e 	subls.w	r2, r2, lr
 80040a4:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	d152      	bne.n	8004152 <HAL_PCD_IRQHandler+0x8b2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ac:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 80040b0:	2d00      	cmp	r5, #0
 80040b2:	d13c      	bne.n	800412e <HAL_PCD_IRQHandler+0x88e>
 80040b4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80040b8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80040bc:	010b      	lsls	r3, r1, #4
 80040be:	fa12 f585 	uxtah	r5, r2, r5
 80040c2:	5aea      	ldrh	r2, [r5, r3]
 80040c4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80040c8:	0412      	lsls	r2, r2, #16
 80040ca:	0c12      	lsrs	r2, r2, #16
 80040cc:	52ea      	strh	r2, [r5, r3]
 80040ce:	5aea      	ldrh	r2, [r5, r3]
 80040d0:	b292      	uxth	r2, r2
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d6:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80040dc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80040e0:	fa10 f082 	uxtah	r0, r0, r2
 80040e4:	5ac2      	ldrh	r2, [r0, r3]
 80040e6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80040ea:	0412      	lsls	r2, r2, #16
 80040ec:	0c12      	lsrs	r2, r2, #16
 80040ee:	52c2      	strh	r2, [r0, r3]
 80040f0:	5ac2      	ldrh	r2, [r0, r3]
 80040f2:	b292      	uxth	r2, r2
 80040f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f8:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f003 fb89 	bl	8007812 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004100:	2e00      	cmp	r6, #0
 8004102:	f43f af20 	beq.w	8003f46 <HAL_PCD_IRQHandler+0x6a6>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004106:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800411e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004126:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800412a:	f7ff bbc4 	b.w	80038b6 <HAL_PCD_IRQHandler+0x16>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412e:	2d01      	cmp	r5, #1
 8004130:	d1e3      	bne.n	80040fa <HAL_PCD_IRQHandler+0x85a>
 8004132:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8004136:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800413a:	010b      	lsls	r3, r1, #4
 800413c:	fa1c f585 	uxtah	r5, ip, r5
 8004140:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004142:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8004146:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800414a:	fa10 f585 	uxtah	r5, r0, r5
 800414e:	52ea      	strh	r2, [r5, r3]
 8004150:	e7d3      	b.n	80040fa <HAL_PCD_IRQHandler+0x85a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004152:	b96e      	cbnz	r6, 8004170 <HAL_PCD_IRQHandler+0x8d0>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004154:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004158:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800415c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004160:	0412      	lsls	r2, r2, #16
 8004162:	0c12      	lsrs	r2, r2, #16
 8004164:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800416c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004170:	2228      	movs	r2, #40	; 0x28
 8004172:	fb02 4205 	mla	r2, r2, r5, r4
 8004176:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d1c3      	bne.n	8004106 <HAL_PCD_IRQHandler+0x866>
        ep->xfer_count += TxByteNbre;
 800417e:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004180:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004182:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004186:	4473      	add	r3, lr
 8004188:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800418a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800418c:	4476      	add	r6, lr
        if (ep->xfer_len_db >= ep->maxpacket)
 800418e:	459c      	cmp	ip, r3
        ep->xfer_buff += TxByteNbre;
 8004190:	63d6      	str	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004192:	d323      	bcc.n	80041dc <HAL_PCD_IRQHandler+0x93c>
          ep->xfer_len_db -= len;
 8004194:	ebac 0c03 	sub.w	ip, ip, r3
 8004198:	f8c2 c048 	str.w	ip, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800419c:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 80041a0:	fa1f fc83 	uxth.w	ip, r3
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d138      	bne.n	800421a <HAL_PCD_IRQHandler+0x97a>
 80041a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80041ac:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 80041b0:	fa1e f282 	uxtah	r2, lr, r2
 80041b4:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 80041b8:	b9eb      	cbnz	r3, 80041f6 <HAL_PCD_IRQHandler+0x956>
 80041ba:	880b      	ldrh	r3, [r1, #0]
 80041bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	800b      	strh	r3, [r1, #0]
 80041c6:	880b      	ldrh	r3, [r1, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ce:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041d0:	2128      	movs	r1, #40	; 0x28
 80041d2:	fb01 4505 	mla	r5, r1, r5, r4
 80041d6:	4663      	mov	r3, ip
 80041d8:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 80041da:	e71e      	b.n	800401a <HAL_PCD_IRQHandler+0x77a>
        else if (ep->xfer_len_db == 0U)
 80041dc:	f1bc 0f00 	cmp.w	ip, #0
 80041e0:	d103      	bne.n	80041ea <HAL_PCD_IRQHandler+0x94a>
          ep->xfer_fill_db = 0U;
 80041e2:	f882 c04c 	strb.w	ip, [r2, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 80041e6:	4673      	mov	r3, lr
 80041e8:	e7d8      	b.n	800419c <HAL_PCD_IRQHandler+0x8fc>
          ep->xfer_len_db = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80041ee:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 80041f2:	4663      	mov	r3, ip
 80041f4:	e7d2      	b.n	800419c <HAL_PCD_IRQHandler+0x8fc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041f6:	2b3e      	cmp	r3, #62	; 0x3e
 80041f8:	d807      	bhi.n	800420a <HAL_PCD_IRQHandler+0x96a>
 80041fa:	085a      	lsrs	r2, r3, #1
 80041fc:	07db      	lsls	r3, r3, #31
 80041fe:	bf48      	it	mi
 8004200:	3201      	addmi	r2, #1
 8004202:	0292      	lsls	r2, r2, #10
 8004204:	b292      	uxth	r2, r2
 8004206:	800a      	strh	r2, [r1, #0]
 8004208:	e7e2      	b.n	80041d0 <HAL_PCD_IRQHandler+0x930>
 800420a:	095a      	lsrs	r2, r3, #5
 800420c:	06db      	lsls	r3, r3, #27
 800420e:	bf08      	it	eq
 8004210:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004214:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8004218:	e7f4      	b.n	8004204 <HAL_PCD_IRQHandler+0x964>
 800421a:	2a01      	cmp	r2, #1
 800421c:	d1d8      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x930>
 800421e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004222:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004226:	fa12 f383 	uxtah	r3, r2, r3
 800422a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800422e:	f8a1 c000 	strh.w	ip, [r1]
 8004232:	e7cd      	b.n	80041d0 <HAL_PCD_IRQHandler+0x930>

08004234 <HAL_PCD_EP_Open>:
{
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800423a:	0609      	lsls	r1, r1, #24
{
 800423c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800423e:	d522      	bpl.n	8004286 <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004240:	1c69      	adds	r1, r5, #1
 8004242:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004246:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800424a:	2028      	movs	r0, #40	; 0x28
 800424c:	fb05 0000 	mla	r0, r5, r0, r0
 8004250:	4420      	add	r0, r4
 8004252:	2601      	movs	r6, #1
 8004254:	7046      	strb	r6, [r0, #1]
  ep->maxpacket = ep_mps;
 8004256:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8004258:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800425a:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800425c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800425e:	b102      	cbz	r2, 8004262 <HAL_PCD_EP_Open+0x2e>
    ep->tx_fifo_num = ep->num;
 8004260:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8004262:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8004264:	bf04      	itt	eq
 8004266:	2300      	moveq	r3, #0
 8004268:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800426a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800426e:	2b01      	cmp	r3, #1
 8004270:	d014      	beq.n	800429c <HAL_PCD_EP_Open+0x68>
 8004272:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004274:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004276:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800427a:	f001 ffa5 	bl	80061c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800427e:	2000      	movs	r0, #0
 8004280:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004284:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004286:	2028      	movs	r0, #40	; 0x28
 8004288:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 800428c:	fb00 4005 	mla	r0, r0, r5, r4
 8004290:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004292:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004296:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800429a:	e7dc      	b.n	8004256 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800429c:	2002      	movs	r0, #2
 800429e:	e7f1      	b.n	8004284 <HAL_PCD_EP_Open+0x50>

080042a0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80042a0:	060b      	lsls	r3, r1, #24
{
 80042a2:	b510      	push	{r4, lr}
 80042a4:	f001 0207 	and.w	r2, r1, #7
 80042a8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80042aa:	d519      	bpl.n	80042e0 <HAL_PCD_EP_Close+0x40>
    ep->is_in = 1U;
 80042ac:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ae:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 80042b0:	fb02 3303 	mla	r3, r2, r3, r3
 80042b4:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80042ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80042be:	2001      	movs	r0, #1
 80042c0:	7058      	strb	r0, [r3, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042c2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80042c4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d014      	beq.n	80042f6 <HAL_PCD_EP_Close+0x56>
 80042cc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80042d0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042d4:	f002 f8ce 	bl	8006474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042d8:	2000      	movs	r0, #0
 80042da:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80042de:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	2328      	movs	r3, #40	; 0x28
 80042e2:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 80042e6:	fb03 0302 	mla	r3, r3, r2, r0
 80042ea:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80042f0:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80042f4:	e7e5      	b.n	80042c2 <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 80042f6:	2002      	movs	r0, #2
 80042f8:	e7f1      	b.n	80042de <HAL_PCD_EP_Close+0x3e>

080042fa <HAL_PCD_EP_Receive>:
{
 80042fa:	b570      	push	{r4, r5, r6, lr}
 80042fc:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8004300:	2628      	movs	r6, #40	; 0x28
 8004302:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8004306:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004308:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 800430c:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8004310:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8004314:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004318:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 800431c:	6800      	ldr	r0, [r0, #0]
 800431e:	f002 f9ff 	bl	8006720 <USB_EPStartXfer>
}
 8004322:	4628      	mov	r0, r5
 8004324:	bd70      	pop	{r4, r5, r6, pc}

08004326 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004326:	f001 0107 	and.w	r1, r1, #7
 800432a:	2328      	movs	r3, #40	; 0x28
 800432c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8004330:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8004334:	4770      	bx	lr

08004336 <HAL_PCD_EP_Transmit>:
{
 8004336:	b538      	push	{r3, r4, r5, lr}
 8004338:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800433c:	2428      	movs	r4, #40	; 0x28
 800433e:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8004342:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 8004346:	64a3      	str	r3, [r4, #72]	; 0x48
 8004348:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800434c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 8004350:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8004352:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 8004354:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8004358:	6465      	str	r5, [r4, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 800435a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435e:	4411      	add	r1, r2
 8004360:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004364:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->is_in = 1U;
 8004368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800436c:	6800      	ldr	r0, [r0, #0]
 800436e:	f002 f9d7 	bl	8006720 <USB_EPStartXfer>
}
 8004372:	4628      	mov	r0, r5
 8004374:	bd38      	pop	{r3, r4, r5, pc}

08004376 <HAL_PCD_EP_SetStall>:
{
 8004376:	b538      	push	{r3, r4, r5, lr}
 8004378:	4604      	mov	r4, r0
 800437a:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	4298      	cmp	r0, r3
 8004382:	d826      	bhi.n	80043d2 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8004384:	060b      	lsls	r3, r1, #24
 8004386:	d51a      	bpl.n	80043be <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 1U;
 8004388:	2328      	movs	r3, #40	; 0x28
 800438a:	fb00 3303 	mla	r3, r0, r3, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	1c41      	adds	r1, r0, #1
    ep->is_in = 1U;
 8004390:	4423      	add	r3, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004392:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ep->is_in = 1U;
 8004396:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004398:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800439c:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1U;
 800439e:	2301      	movs	r3, #1
 80043a0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80043a4:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d014      	beq.n	80043d6 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80043ae:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043b2:	f002 f930 	bl	8006616 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80043bc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80043be:	2528      	movs	r5, #40	; 0x28
 80043c0:	fb05 4301 	mla	r3, r5, r1, r4
    ep->is_in = 0U;
 80043c4:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80043c6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
 80043d0:	e7e5      	b.n	800439e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80043d2:	2001      	movs	r0, #1
 80043d4:	e7f2      	b.n	80043bc <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 80043d6:	2002      	movs	r0, #2
 80043d8:	e7f0      	b.n	80043bc <HAL_PCD_EP_SetStall+0x46>

080043da <HAL_PCD_EP_ClrStall>:
{
 80043da:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043dc:	6843      	ldr	r3, [r0, #4]
 80043de:	f001 020f 	and.w	r2, r1, #15
 80043e2:	429a      	cmp	r2, r3
{
 80043e4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043e6:	d82a      	bhi.n	800443e <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80043e8:	060b      	lsls	r3, r1, #24
 80043ea:	f001 0207 	and.w	r2, r1, #7
 80043ee:	d51b      	bpl.n	8004428 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 1U;
 80043f0:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 80043f4:	fb02 3303 	mla	r3, r2, r3, r3
 80043f8:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8004402:	2001      	movs	r0, #1
 8004404:	7058      	strb	r0, [r3, #1]
  ep->is_stall = 0U;
 8004406:	2500      	movs	r5, #0
 8004408:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800440a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800440c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004410:	2b01      	cmp	r3, #1
 8004412:	d016      	beq.n	8004442 <HAL_PCD_EP_ClrStall+0x68>
 8004414:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004416:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004418:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800441c:	f002 f91b 	bl	8006656 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004420:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8004424:	4628      	mov	r0, r5
}
 8004426:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004428:	2328      	movs	r3, #40	; 0x28
 800442a:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800442e:	fb03 0302 	mla	r3, r3, r2, r0
 8004432:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004434:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004438:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800443c:	e7e3      	b.n	8004406 <HAL_PCD_EP_ClrStall+0x2c>
    return HAL_ERROR;
 800443e:	2001      	movs	r0, #1
 8004440:	e7f1      	b.n	8004426 <HAL_PCD_EP_ClrStall+0x4c>
  __HAL_LOCK(hpcd);
 8004442:	2002      	movs	r0, #2
 8004444:	e7ef      	b.n	8004426 <HAL_PCD_EP_ClrStall+0x4c>

08004446 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004446:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444a:	bf18      	it	ne
 800444c:	f001 0107 	andne.w	r1, r1, #7
{
 8004450:	b510      	push	{r4, lr}
 8004452:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004456:	bf15      	itete	ne
 8004458:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800445c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004460:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8004462:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004466:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004468:	b91a      	cbnz	r2, 8004472 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 800446a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800446c:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800446e:	2000      	movs	r0, #0
 8004470:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8004472:	2201      	movs	r2, #1
 8004474:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004476:	6083      	str	r3, [r0, #8]
 8004478:	e7f9      	b.n	800446e <HAL_PCDEx_PMAConfig+0x28>
	...

0800447c <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_PWREx_EnableSDADC+0x24>)
 800447e:	69d1      	ldr	r1, [r2, #28]
 8004480:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004484:	61d1      	str	r1, [r2, #28]
 8004486:	69d2      	ldr	r2, [r2, #28]
{
 8004488:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800448e:	9201      	str	r2, [sp, #4]
    
  PWR->CR |= Analogx;
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 8004494:	6813      	ldr	r3, [r2, #0]
 8004496:	4318      	orrs	r0, r3
 8004498:	6010      	str	r0, [r2, #0]
}
 800449a:	b002      	add	sp, #8
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40007000 	.word	0x40007000

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ac:	4605      	mov	r5, r0
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d035      	beq.n	800451e <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	6803      	ldr	r3, [r0, #0]
 80044b4:	07da      	lsls	r2, r3, #31
 80044b6:	d411      	bmi.n	80044dc <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	079b      	lsls	r3, r3, #30
 80044bc:	f100 8088 	bmi.w	80045d0 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	071c      	lsls	r4, r3, #28
 80044c4:	f100 80f8 	bmi.w	80046b8 <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	0758      	lsls	r0, r3, #29
 80044cc:	f100 8146 	bmi.w	800475c <HAL_RCC_OscConfig+0x2b4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	69e8      	ldr	r0, [r5, #28]
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f040 81d4 	bne.w	8004880 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }

  return HAL_OK;
 80044d8:	2000      	movs	r0, #0
 80044da:	e04b      	b.n	8004574 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044dc:	4c9d      	ldr	r4, [pc, #628]	; (8004754 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d007      	beq.n	80044f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d117      	bne.n	8004522 <HAL_RCC_OscConfig+0x7a>
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	03df      	lsls	r7, r3, #15
 80044f6:	d514      	bpl.n	8004522 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	6821      	ldr	r1, [r4, #0]
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2201      	movs	r2, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	420b      	tst	r3, r1
 8004516:	d0cf      	beq.n	80044b8 <HAL_RCC_OscConfig+0x10>
 8004518:	686b      	ldr	r3, [r5, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cc      	bne.n	80044b8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800451e:	2001      	movs	r0, #1
 8004520:	e028      	b.n	8004574 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004522:	686a      	ldr	r2, [r5, #4]
 8004524:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004528:	d127      	bne.n	800457a <HAL_RCC_OscConfig+0xd2>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004534:	68a9      	ldr	r1, [r5, #8]
 8004536:	f023 030f 	bic.w	r3, r3, #15
 800453a:	430b      	orrs	r3, r1
 800453c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453e:	b362      	cbz	r2, 800459a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8004540:	f7fe fa80 	bl	8002a44 <HAL_GetTick>
 8004544:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8004548:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	f04f 0801 	mov.w	r8, #1
 800454e:	fa97 f3a7 	rbit	r3, r7
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	fa97 f3a7 	rbit	r3, r7
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	fa08 f303 	lsl.w	r3, r8, r3
 8004564:	4213      	tst	r3, r2
 8004566:	d1a7      	bne.n	80044b8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe fa6c 	bl	8002a44 <HAL_GetTick>
 800456c:	1b83      	subs	r3, r0, r6
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d9ed      	bls.n	800454e <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8004572:	2003      	movs	r0, #3
}
 8004574:	b003      	add	sp, #12
 8004576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	b932      	cbnz	r2, 800458c <HAL_RCC_OscConfig+0xe4>
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	e7d1      	b.n	8004530 <HAL_RCC_OscConfig+0x88>
 800458c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004590:	d1f5      	bne.n	800457e <HAL_RCC_OscConfig+0xd6>
 8004592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	e7c7      	b.n	800452a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800459a:	f7fe fa53 	bl	8002a44 <HAL_GetTick>
 800459e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80045a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a4:	f04f 0801 	mov.w	r8, #1
 80045a8:	fa97 f3a7 	rbit	r3, r7
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	fa97 f3a7 	rbit	r3, r7
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	fa08 f303 	lsl.w	r3, r8, r3
 80045be:	4213      	tst	r3, r2
 80045c0:	f43f af7a 	beq.w	80044b8 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fe fa3e 	bl	8002a44 <HAL_GetTick>
 80045c8:	1b83      	subs	r3, r0, r6
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d9ec      	bls.n	80045a8 <HAL_RCC_OscConfig+0x100>
 80045ce:	e7d0      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045d0:	4c60      	ldr	r4, [pc, #384]	; (8004754 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	f013 0f0c 	tst.w	r3, #12
 80045d8:	d007      	beq.n	80045ea <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d121      	bne.n	8004628 <HAL_RCC_OscConfig+0x180>
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	03de      	lsls	r6, r3, #15
 80045e8:	d41e      	bmi.n	8004628 <HAL_RCC_OscConfig+0x180>
 80045ea:	2302      	movs	r3, #2
 80045ec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	420b      	tst	r3, r1
 8004606:	d002      	beq.n	800460e <HAL_RCC_OscConfig+0x166>
 8004608:	692b      	ldr	r3, [r5, #16]
 800460a:	4293      	cmp	r3, r2
 800460c:	d187      	bne.n	800451e <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	6821      	ldr	r1, [r4, #0]
 8004610:	23f8      	movs	r3, #248	; 0xf8
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	fab3 f283 	clz	r2, r3
 800461a:	696b      	ldr	r3, [r5, #20]
 800461c:	4093      	lsls	r3, r2
 800461e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8004622:	4313      	orrs	r3, r2
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	e74b      	b.n	80044c0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004628:	692a      	ldr	r2, [r5, #16]
 800462a:	2601      	movs	r6, #1
 800462c:	b30a      	cbz	r2, 8004672 <HAL_RCC_OscConfig+0x1ca>
 800462e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800463a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	f04f 0802 	mov.w	r8, #2
 8004644:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8004646:	f7fe f9fd 	bl	8002a44 <HAL_GetTick>
 800464a:	4607      	mov	r7, r0
 800464c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	fa98 f3a8 	rbit	r3, r8
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	fa06 f303 	lsl.w	r3, r6, r3
 8004662:	4213      	tst	r3, r2
 8004664:	d1d3      	bne.n	800460e <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004666:	f7fe f9ed 	bl	8002a44 <HAL_GetTick>
 800466a:	1bc3      	subs	r3, r0, r7
 800466c:	2b02      	cmp	r3, #2
 800466e:	d9ed      	bls.n	800464c <HAL_RCC_OscConfig+0x1a4>
 8004670:	e77f      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
 8004672:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800467e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	f04f 0802 	mov.w	r8, #2
 8004688:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800468a:	f7fe f9db 	bl	8002a44 <HAL_GetTick>
 800468e:	4607      	mov	r7, r0
 8004690:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	fa98 f3a8 	rbit	r3, r8
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	fa06 f303 	lsl.w	r3, r6, r3
 80046a6:	4213      	tst	r3, r2
 80046a8:	f43f af0a 	beq.w	80044c0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fe f9ca 	bl	8002a44 <HAL_GetTick>
 80046b0:	1bc3      	subs	r3, r0, r7
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d9ec      	bls.n	8004690 <HAL_RCC_OscConfig+0x1e8>
 80046b6:	e75c      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b8:	69aa      	ldr	r2, [r5, #24]
 80046ba:	4e26      	ldr	r6, [pc, #152]	; (8004754 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	4926      	ldr	r1, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x2b0>)
 80046be:	2401      	movs	r4, #1
 80046c0:	b31a      	cbz	r2, 800470a <HAL_RCC_OscConfig+0x262>
 80046c2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	440b      	add	r3, r1
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	2702      	movs	r7, #2
 80046d0:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80046d2:	f7fe f9b7 	bl	8002a44 <HAL_GetTick>
 80046d6:	4680      	mov	r8, r0
 80046d8:	fa97 f3a7 	rbit	r3, r7
 80046dc:	fa97 f3a7 	rbit	r3, r7
 80046e0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80046e6:	fa97 f3a7 	rbit	r3, r7
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	fa04 f303 	lsl.w	r3, r4, r3
 80046f6:	4213      	tst	r3, r2
 80046f8:	f47f aee6 	bne.w	80044c8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fc:	f7fe f9a2 	bl	8002a44 <HAL_GetTick>
 8004700:	eba0 0308 	sub.w	r3, r0, r8
 8004704:	2b02      	cmp	r3, #2
 8004706:	d9e7      	bls.n	80046d8 <HAL_RCC_OscConfig+0x230>
 8004708:	e733      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
 800470a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	440b      	add	r3, r1
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	2702      	movs	r7, #2
 8004718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800471a:	f7fe f993 	bl	8002a44 <HAL_GetTick>
 800471e:	4680      	mov	r8, r0
 8004720:	fa97 f3a7 	rbit	r3, r7
 8004724:	fa97 f3a7 	rbit	r3, r7
 8004728:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800472e:	fa97 f3a7 	rbit	r3, r7
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	fa04 f303 	lsl.w	r3, r4, r3
 800473e:	4213      	tst	r3, r2
 8004740:	f43f aec2 	beq.w	80044c8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe f97e 	bl	8002a44 <HAL_GetTick>
 8004748:	eba0 0308 	sub.w	r3, r0, r8
 800474c:	2b02      	cmp	r3, #2
 800474e:	d9e7      	bls.n	8004720 <HAL_RCC_OscConfig+0x278>
 8004750:	e70f      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475c:	4c91      	ldr	r4, [pc, #580]	; (80049a4 <HAL_RCC_OscConfig+0x4fc>)
 800475e:	69e3      	ldr	r3, [r4, #28]
 8004760:	00d9      	lsls	r1, r3, #3
 8004762:	d433      	bmi.n	80047cc <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004764:	69e3      	ldr	r3, [r4, #28]
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	61e3      	str	r3, [r4, #28]
 800476c:	69e3      	ldr	r3, [r4, #28]
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004776:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4f8b      	ldr	r7, [pc, #556]	; (80049a8 <HAL_RCC_OscConfig+0x500>)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	05da      	lsls	r2, r3, #23
 800477e:	d527      	bpl.n	80047d0 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	68eb      	ldr	r3, [r5, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d135      	bne.n	80047f2 <HAL_RCC_OscConfig+0x34a>
 8004786:	6a23      	ldr	r3, [r4, #32]
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800478e:	f7fe f959 	bl	8002a44 <HAL_GetTick>
 8004792:	2702      	movs	r7, #2
 8004794:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	f04f 0901 	mov.w	r9, #1
 800479a:	fa97 f3a7 	rbit	r3, r7
 800479e:	fa97 f3a7 	rbit	r3, r7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d064      	beq.n	8004870 <HAL_RCC_OscConfig+0x3c8>
 80047a6:	6a22      	ldr	r2, [r4, #32]
 80047a8:	fa97 f3a7 	rbit	r3, r7
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa09 f303 	lsl.w	r3, r9, r3
 80047b8:	4213      	tst	r3, r2
 80047ba:	d050      	beq.n	800485e <HAL_RCC_OscConfig+0x3b6>
    if(pwrclkchanged == SET)
 80047bc:	2e00      	cmp	r6, #0
 80047be:	f43f ae87 	beq.w	80044d0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	69e3      	ldr	r3, [r4, #28]
 80047c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c8:	61e3      	str	r3, [r4, #28]
 80047ca:	e681      	b.n	80044d0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80047cc:	2600      	movs	r6, #0
 80047ce:	e7d3      	b.n	8004778 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80047d8:	f7fe f934 	bl	8002a44 <HAL_GetTick>
 80047dc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	d4cd      	bmi.n	8004780 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e4:	f7fe f92e 	bl	8002a44 <HAL_GetTick>
 80047e8:	eba0 0008 	sub.w	r0, r0, r8
 80047ec:	2864      	cmp	r0, #100	; 0x64
 80047ee:	d9f6      	bls.n	80047de <HAL_RCC_OscConfig+0x336>
 80047f0:	e6bf      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f2:	bb33      	cbnz	r3, 8004842 <HAL_RCC_OscConfig+0x39a>
 80047f4:	6a23      	ldr	r3, [r4, #32]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6223      	str	r3, [r4, #32]
 80047fc:	6a23      	ldr	r3, [r4, #32]
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004804:	f7fe f91e 	bl	8002a44 <HAL_GetTick>
 8004808:	2702      	movs	r7, #2
 800480a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	f04f 0901 	mov.w	r9, #1
 8004810:	fa97 f3a7 	rbit	r3, r7
 8004814:	fa97 f3a7 	rbit	r3, r7
 8004818:	b373      	cbz	r3, 8004878 <HAL_RCC_OscConfig+0x3d0>
 800481a:	6a22      	ldr	r2, [r4, #32]
 800481c:	fa97 f3a7 	rbit	r3, r7
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa09 f303 	lsl.w	r3, r9, r3
 800482c:	4213      	tst	r3, r2
 800482e:	d0c5      	beq.n	80047bc <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f7fe f908 	bl	8002a44 <HAL_GetTick>
 8004834:	f242 7310 	movw	r3, #10000	; 0x2710
 8004838:	eba0 0008 	sub.w	r0, r0, r8
 800483c:	4298      	cmp	r0, r3
 800483e:	d9e7      	bls.n	8004810 <HAL_RCC_OscConfig+0x368>
 8004840:	e697      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004842:	2b05      	cmp	r3, #5
 8004844:	6a23      	ldr	r3, [r4, #32]
 8004846:	d103      	bne.n	8004850 <HAL_RCC_OscConfig+0x3a8>
 8004848:	f043 0304 	orr.w	r3, r3, #4
 800484c:	6223      	str	r3, [r4, #32]
 800484e:	e79a      	b.n	8004786 <HAL_RCC_OscConfig+0x2de>
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6223      	str	r3, [r4, #32]
 8004856:	6a23      	ldr	r3, [r4, #32]
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	e796      	b.n	800478c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fe f8f1 	bl	8002a44 <HAL_GetTick>
 8004862:	f242 7310 	movw	r3, #10000	; 0x2710
 8004866:	eba0 0008 	sub.w	r0, r0, r8
 800486a:	4298      	cmp	r0, r3
 800486c:	d995      	bls.n	800479a <HAL_RCC_OscConfig+0x2f2>
 800486e:	e680      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
 8004870:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004876:	e797      	b.n	80047a8 <HAL_RCC_OscConfig+0x300>
 8004878:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800487e:	e7cd      	b.n	800481c <HAL_RCC_OscConfig+0x374>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004880:	4c48      	ldr	r4, [pc, #288]	; (80049a4 <HAL_RCC_OscConfig+0x4fc>)
 8004882:	6863      	ldr	r3, [r4, #4]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d07a      	beq.n	8004982 <HAL_RCC_OscConfig+0x4da>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488c:	2802      	cmp	r0, #2
 800488e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004892:	d151      	bne.n	8004938 <HAL_RCC_OscConfig+0x490>
 8004894:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80048aa:	f7fe f8cb 	bl	8002a44 <HAL_GetTick>
 80048ae:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80048b2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b4:	2601      	movs	r6, #1
 80048b6:	fa98 f3a8 	rbit	r3, r8
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	fa98 f3a8 	rbit	r3, r8
 80048c0:	fab3 f383 	clz	r3, r3
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	fa06 f303 	lsl.w	r3, r6, r3
 80048cc:	4213      	tst	r3, r2
 80048ce:	d12d      	bne.n	800492c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d0:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 80048d4:	6862      	ldr	r2, [r4, #4]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80048dc:	4313      	orrs	r3, r2
 80048de:	6063      	str	r3, [r4, #4]
 80048e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048f4:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f6:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 80048f8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80048fa:	f7fe f8a3 	bl	8002a44 <HAL_GetTick>
 80048fe:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8004902:	4605      	mov	r5, r0
 8004904:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	fa96 f3a6 	rbit	r3, r6
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	fa07 f303 	lsl.w	r3, r7, r3
 800491a:	4213      	tst	r3, r2
 800491c:	f47f addc 	bne.w	80044d8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fe f890 	bl	8002a44 <HAL_GetTick>
 8004924:	1b40      	subs	r0, r0, r5
 8004926:	2802      	cmp	r0, #2
 8004928:	d9ec      	bls.n	8004904 <HAL_RCC_OscConfig+0x45c>
 800492a:	e622      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492c:	f7fe f88a 	bl	8002a44 <HAL_GetTick>
 8004930:	1bc3      	subs	r3, r0, r7
 8004932:	2b02      	cmp	r3, #2
 8004934:	d9bf      	bls.n	80048b6 <HAL_RCC_OscConfig+0x40e>
 8004936:	e61c      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
 8004938:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800494e:	f7fe f879 	bl	8002a44 <HAL_GetTick>
 8004952:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8004956:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	2701      	movs	r7, #1
 800495a:	fa96 f3a6 	rbit	r3, r6
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	fa96 f3a6 	rbit	r3, r6
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa07 f303 	lsl.w	r3, r7, r3
 8004970:	4213      	tst	r3, r2
 8004972:	f43f adb1 	beq.w	80044d8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fe f865 	bl	8002a44 <HAL_GetTick>
 800497a:	1b40      	subs	r0, r0, r5
 800497c:	2802      	cmp	r0, #2
 800497e:	d9ec      	bls.n	800495a <HAL_RCC_OscConfig+0x4b2>
 8004980:	e5f7      	b.n	8004572 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004982:	2801      	cmp	r0, #1
 8004984:	f43f adf6 	beq.w	8004574 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8004988:	6863      	ldr	r3, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800498a:	6a2a      	ldr	r2, [r5, #32]
 800498c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004990:	4291      	cmp	r1, r2
 8004992:	f47f adc4 	bne.w	800451e <HAL_RCC_OscConfig+0x76>
 8004996:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004998:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800499c:	4293      	cmp	r3, r2
 800499e:	f43f ad9b 	beq.w	80044d8 <HAL_RCC_OscConfig+0x30>
 80049a2:	e5bc      	b.n	800451e <HAL_RCC_OscConfig+0x76>
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000

080049ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80049ae:	4c13      	ldr	r4, [pc, #76]	; (80049fc <HAL_RCC_GetSysClockFreq+0x50>)
 80049b0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b2:	f001 030c 	and.w	r3, r1, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11e      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x4c>
 80049ba:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80049be:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80049c2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x54>)
 80049d0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80049d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049d4:	220f      	movs	r2, #15
 80049d6:	fa92 f2a2 	rbit	r2, r2
 80049da:	fab2 f282 	clz	r2, r2
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	40d3      	lsrs	r3, r2
 80049e4:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x58>)
 80049e6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80049e8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049ea:	bf4a      	itet	mi
 80049ec:	4b06      	ldrmi	r3, [pc, #24]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049ee:	4b07      	ldrpl	r3, [pc, #28]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049f0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049f4:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80049f6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80049f8:	4803      	ldr	r0, [pc, #12]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80049fa:	e7fc      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800a490 	.word	0x0800a490
 8004a04:	0800a4a0 	.word	0x0800a4a0
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	003d0900 	.word	0x003d0900

08004a10 <HAL_RCC_ClockConfig>:
{
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004a16:	4604      	mov	r4, r0
 8004a18:	b910      	cbnz	r0, 8004a20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004a1a:	2001      	movs	r0, #1
}
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4a4c      	ldr	r2, [pc, #304]	; (8004b54 <HAL_RCC_ClockConfig+0x144>)
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	d32e      	bcc.n	8004a8a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	0791      	lsls	r1, r2, #30
 8004a30:	d436      	bmi.n	8004aa0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	07d2      	lsls	r2, r2, #31
 8004a34:	d43c      	bmi.n	8004ab0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a36:	4a47      	ldr	r2, [pc, #284]	; (8004b54 <HAL_RCC_ClockConfig+0x144>)
 8004a38:	6813      	ldr	r3, [r2, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	d874      	bhi.n	8004b2c <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	4d44      	ldr	r5, [pc, #272]	; (8004b58 <HAL_RCC_ClockConfig+0x148>)
 8004a46:	f012 0f04 	tst.w	r2, #4
 8004a4a:	d17b      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	0713      	lsls	r3, r2, #28
 8004a4e:	d506      	bpl.n	8004a5e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a50:	686b      	ldr	r3, [r5, #4]
 8004a52:	6922      	ldr	r2, [r4, #16]
 8004a54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004a58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a5c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a5e:	f7ff ffa5 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004a62:	686b      	ldr	r3, [r5, #4]
 8004a64:	22f0      	movs	r2, #240	; 0xf0
 8004a66:	fa92 f2a2 	rbit	r2, r2
 8004a6a:	fab2 f282 	clz	r2, r2
 8004a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a72:	40d3      	lsrs	r3, r2
 8004a74:	4a39      	ldr	r2, [pc, #228]	; (8004b5c <HAL_RCC_ClockConfig+0x14c>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	40d8      	lsrs	r0, r3
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_RCC_ClockConfig+0x150>)
 8004a7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_ClockConfig+0x154>)
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	f7fd febf 	bl	8002804 <HAL_InitTick>
  return HAL_OK;
 8004a86:	2000      	movs	r0, #0
 8004a88:	e7c8      	b.n	8004a1c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	428b      	cmp	r3, r1
 8004a9c:	d1bd      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xa>
 8004a9e:	e7c5      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	492d      	ldr	r1, [pc, #180]	; (8004b58 <HAL_RCC_ClockConfig+0x148>)
 8004aa2:	68a0      	ldr	r0, [r4, #8]
 8004aa4:	684b      	ldr	r3, [r1, #4]
 8004aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aaa:	4303      	orrs	r3, r0
 8004aac:	604b      	str	r3, [r1, #4]
 8004aae:	e7c0      	b.n	8004a32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab0:	6862      	ldr	r2, [r4, #4]
 8004ab2:	4e29      	ldr	r6, [pc, #164]	; (8004b58 <HAL_RCC_ClockConfig+0x148>)
 8004ab4:	2a01      	cmp	r2, #1
 8004ab6:	d126      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xf6>
 8004ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004abc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac0:	6831      	ldr	r1, [r6, #0]
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	fab3 f383 	clz	r3, r3
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad4:	d0a1      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad6:	6873      	ldr	r3, [r6, #4]
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8004ae0:	f7fd ffb0 	bl	8002a44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004ae8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	6873      	ldr	r3, [r6, #4]
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004af6:	d09e      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fd ffa4 	bl	8002a44 <HAL_GetTick>
 8004afc:	1bc0      	subs	r0, r0, r7
 8004afe:	4540      	cmp	r0, r8
 8004b00:	d9f3      	bls.n	8004aea <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8004b02:	2003      	movs	r0, #3
 8004b04:	e78a      	b.n	8004a1c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b06:	2a02      	cmp	r2, #2
 8004b08:	bf0c      	ite	eq
 8004b0a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8004b0e:	2302      	movne	r3, #2
 8004b10:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	6830      	ldr	r0, [r6, #0]
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	4203      	tst	r3, r0
 8004b2a:	e7d3      	b.n	8004ad4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	432b      	orrs	r3, r5
 8004b34:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	f47f af6c 	bne.w	8004a1a <HAL_RCC_ClockConfig+0xa>
 8004b42:	e77e      	b.n	8004a42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b44:	686b      	ldr	r3, [r5, #4]
 8004b46:	68e1      	ldr	r1, [r4, #12]
 8004b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	606b      	str	r3, [r5, #4]
 8004b50:	e77c      	b.n	8004a4c <HAL_RCC_ClockConfig+0x3c>
 8004b52:	bf00      	nop
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	0800a478 	.word	0x0800a478
 8004b60:	20000000 	.word	0x20000000
 8004b64:	20000008 	.word	0x20000008

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	fa92 f2a2 	rbit	r2, r2
 8004b74:	fab2 f282 	clz	r2, r2
 8004b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b7c:	40d3      	lsrs	r3, r2
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004b84:	6810      	ldr	r0, [r2, #0]
}    
 8004b86:	40d8      	lsrs	r0, r3
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	0800a488 	.word	0x0800a488
 8004b94:	20000000 	.word	0x20000000

08004b98 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b98:	230f      	movs	r3, #15
 8004b9a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_GetClockConfig+0x34>)
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	f002 0203 	and.w	r2, r2, #3
 8004ba4:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004bac:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004bb4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bbe:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_RCC_GetClockConfig+0x38>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	600b      	str	r3, [r1, #0]
}
 8004bca:	4770      	bx	lr
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40022000 	.word	0x40022000

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd4:	6803      	ldr	r3, [r0, #0]
{
 8004bd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bda:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bdc:	03d8      	lsls	r0, r3, #15
 8004bde:	d520      	bpl.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be0:	4d68      	ldr	r5, [pc, #416]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004be2:	69eb      	ldr	r3, [r5, #28]
 8004be4:	00d9      	lsls	r1, r3, #3
 8004be6:	d473      	bmi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be8:	69eb      	ldr	r3, [r5, #28]
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	61eb      	str	r3, [r5, #28]
 8004bf0:	69eb      	ldr	r3, [r5, #28]
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004bfa:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	4f62      	ldr	r7, [pc, #392]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	05da      	lsls	r2, r3, #23
 8004c02:	d567      	bpl.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c04:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004c0a:	d177      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c0c:	6a2b      	ldr	r3, [r5, #32]
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	4313      	orrs	r3, r2
 8004c16:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c18:	b11e      	cbz	r6, 8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1a:	69eb      	ldr	r3, [r5, #28]
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c20:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	07d9      	lsls	r1, r3, #31
 8004c26:	d506      	bpl.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c28:	4956      	ldr	r1, [pc, #344]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c2a:	68a0      	ldr	r0, [r4, #8]
 8004c2c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c2e:	f022 0203 	bic.w	r2, r2, #3
 8004c32:	4302      	orrs	r2, r0
 8004c34:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c36:	079a      	lsls	r2, r3, #30
 8004c38:	d506      	bpl.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c3a:	4952      	ldr	r1, [pc, #328]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c3c:	68e0      	ldr	r0, [r4, #12]
 8004c3e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004c44:	4302      	orrs	r2, r0
 8004c46:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c48:	075f      	lsls	r7, r3, #29
 8004c4a:	d506      	bpl.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4c:	494d      	ldr	r1, [pc, #308]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c4e:	6920      	ldr	r0, [r4, #16]
 8004c50:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c52:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004c56:	4302      	orrs	r2, r0
 8004c58:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c5a:	069e      	lsls	r6, r3, #26
 8004c5c:	d506      	bpl.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c5e:	4949      	ldr	r1, [pc, #292]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c60:	6960      	ldr	r0, [r4, #20]
 8004c62:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c64:	f022 0210 	bic.w	r2, r2, #16
 8004c68:	4302      	orrs	r2, r0
 8004c6a:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c6c:	039d      	lsls	r5, r3, #14
 8004c6e:	d506      	bpl.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c70:	4944      	ldr	r1, [pc, #272]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c74:	684a      	ldr	r2, [r1, #4]
 8004c76:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004c7a:	4302      	orrs	r2, r0
 8004c7c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c7e:	0658      	lsls	r0, r3, #25
 8004c80:	d506      	bpl.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c82:	4940      	ldr	r1, [pc, #256]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c84:	69a0      	ldr	r0, [r4, #24]
 8004c86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c88:	f022 0220 	bic.w	r2, r2, #32
 8004c8c:	4302      	orrs	r2, r0
 8004c8e:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004c90:	0619      	lsls	r1, r3, #24
 8004c92:	d506      	bpl.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004c94:	493b      	ldr	r1, [pc, #236]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c96:	69e0      	ldr	r0, [r4, #28]
 8004c98:	684a      	ldr	r2, [r1, #4]
 8004c9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c9e:	4302      	orrs	r2, r0
 8004ca0:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8004ca2:	051a      	lsls	r2, r3, #20
 8004ca4:	d506      	bpl.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8004ca6:	4937      	ldr	r1, [pc, #220]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ca8:	6a20      	ldr	r0, [r4, #32]
 8004caa:	684a      	ldr	r2, [r1, #4]
 8004cac:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8004cb0:	4302      	orrs	r2, r0
 8004cb2:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cb4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cb8:	bf1f      	itttt	ne
 8004cba:	4a32      	ldrne	r2, [pc, #200]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cbc:	6a61      	ldrne	r1, [r4, #36]	; 0x24
 8004cbe:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 8004cc0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8004cc4:	bf1d      	ittte	ne
 8004cc6:	430b      	orrne	r3, r1
 8004cc8:	6313      	strne	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cca:	2000      	movne	r0, #0
 8004ccc:	4618      	moveq	r0, r3
 8004cce:	e012      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
  FlagStatus       pwrclkchanged = RESET;
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	e793      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004cdc:	f7fd feb2 	bl	8002a44 <HAL_GetTick>
 8004ce0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	05db      	lsls	r3, r3, #23
 8004ce6:	d48d      	bmi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fd feac 	bl	8002a44 <HAL_GetTick>
 8004cec:	eba0 0008 	sub.w	r0, r0, r8
 8004cf0:	2864      	cmp	r0, #100	; 0x64
 8004cf2:	d9f6      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 8004cf4:	2003      	movs	r0, #3
}
 8004cf6:	b003      	add	sp, #12
 8004cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfc:	6862      	ldr	r2, [r4, #4]
 8004cfe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d082      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d06:	6a29      	ldr	r1, [r5, #32]
 8004d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004d10:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d14:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	4462      	add	r2, ip
 8004d1e:	0092      	lsls	r2, r2, #2
 8004d20:	2701      	movs	r7, #1
 8004d22:	6017      	str	r7, [r2, #0]
 8004d24:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	4463      	add	r3, ip
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8004d34:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d36:	07c8      	lsls	r0, r1, #31
 8004d38:	f57f af68 	bpl.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fe82 	bl	8002a44 <HAL_GetTick>
 8004d40:	f04f 0802 	mov.w	r8, #2
 8004d44:	4681      	mov	r9, r0
 8004d46:	fa98 f3a8 	rbit	r3, r8
 8004d4a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	b1a3      	cbz	r3, 8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d50:	6a2a      	ldr	r2, [r5, #32]
 8004d52:	fa98 f3a8 	rbit	r3, r8
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	fa07 f303 	lsl.w	r3, r7, r3
 8004d62:	4213      	tst	r3, r2
 8004d64:	f47f af52 	bne.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd fe6c 	bl	8002a44 <HAL_GetTick>
 8004d6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d70:	eba0 0009 	sub.w	r0, r0, r9
 8004d74:	4298      	cmp	r0, r3
 8004d76:	d9e6      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004d78:	e7bc      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004d7a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004d80:	e7e7      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	10908100 	.word	0x10908100

08004d90 <SDADC_EnterInitMode>:
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8004d90:	6802      	ldr	r2, [r0, #0]
{
 8004d92:	b538      	push	{r3, r4, r5, lr}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	6013      	str	r3, [r2, #0]
{
 8004d9c:	4604      	mov	r4, r0

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8004d9e:	f7fd fe51 	bl	8002a44 <HAL_GetTick>
 8004da2:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da01      	bge.n	8004db0 <SDADC_EnterInitMode+0x20>
      return HAL_TIMEOUT;
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004dac:	2000      	movs	r0, #0
}
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004db0:	f7fd fe48 	bl	8002a44 <HAL_GetTick>
 8004db4:	1b40      	subs	r0, r0, r5
 8004db6:	28c8      	cmp	r0, #200	; 0xc8
 8004db8:	d9f4      	bls.n	8004da4 <SDADC_EnterInitMode+0x14>
      return HAL_TIMEOUT;
 8004dba:	2003      	movs	r0, #3
 8004dbc:	e7f7      	b.n	8004dae <SDADC_EnterInitMode+0x1e>

08004dbe <SDADC_ExitInitMode.isra.0>:
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	6003      	str	r3, [r0, #0]
}
 8004dc6:	4770      	bx	lr

08004dc8 <SDADC_InjConvStop>:
{
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;
  
  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004dc8:	69c3      	ldr	r3, [r0, #28]
 8004dca:	2b01      	cmp	r3, #1
{
 8004dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dce:	4604      	mov	r4, r0
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004dd0:	d107      	bne.n	8004de2 <SDADC_InjConvStop+0x1a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 8004dd2:	6803      	ldr	r3, [r0, #0]
 8004dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dd6:	9201      	str	r2, [sp, #4]
    UNUSED(dummy_read_for_register_reset);
 8004dd8:	9a01      	ldr	r2, [sp, #4]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	f022 0220 	bic.w	r2, r2, #32
 8004de0:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();  
 8004de2:	f7fd fe2f 	bl	8002a44 <HAL_GetTick>
 8004de6:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	049b      	lsls	r3, r3, #18
 8004dee:	d42e      	bmi.n	8004e4e <SDADC_InjConvStop+0x86>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
      return HAL_TIMEOUT;
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 8004df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004df2:	b19b      	cbz	r3, 8004e1c <SDADC_InjConvStop+0x54>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff ffcb 	bl	8004d90 <SDADC_EnterInitMode>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d12c      	bne.n	8004e58 <SDADC_InjConvStop+0x90>
      return HAL_TIMEOUT;
    }
    else
    {
      /* Check if trigger is synchronuous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8004e00:	6820      	ldr	r0, [r4, #0]
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004e02:	2b01      	cmp	r3, #1
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8004e04:	bf0b      	itete	eq
 8004e06:	6803      	ldreq	r3, [r0, #0]
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8004e08:	6843      	ldrne	r3, [r0, #4]
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8004e0a:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8004e0e:	f423 43c0 	bicne.w	r3, r3, #24576	; 0x6000
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8004e12:	bf0c      	ite	eq
 8004e14:	6003      	streq	r3, [r0, #0]
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8004e16:	6043      	strne	r3, [r0, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004e18:	f7ff ffd1 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004e1c:	69e2      	ldr	r2, [r4, #28]
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8004e1e:	6823      	ldr	r3, [r4, #0]
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004e20:	2a01      	cmp	r2, #1
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8004e22:	bf02      	ittt	eq
 8004e24:	685a      	ldreq	r2, [r3, #4]
 8004e26:	f042 0220 	orreq.w	r2, r2, #32
 8004e2a:	605a      	streq	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 8004e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e2e:	9201      	str	r2, [sp, #4]
  UNUSED(dummy_read_for_register_reset);
 8004e30:	9a01      	ldr	r2, [sp, #4]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	f042 0204 	orr.w	r2, r2, #4
 8004e38:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8004e3a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2303      	movne	r3, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004e46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	e008      	b.n	8004e60 <SDADC_InjConvStop+0x98>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004e4e:	f7fd fdf9 	bl	8002a44 <HAL_GetTick>
 8004e52:	1b40      	subs	r0, r0, r5
 8004e54:	28c8      	cmp	r0, #200	; 0xc8
 8004e56:	d9c7      	bls.n	8004de8 <SDADC_InjConvStop+0x20>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004e58:	23ff      	movs	r3, #255	; 0xff
 8004e5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8004e5e:	2003      	movs	r0, #3
}
 8004e60:	b003      	add	sp, #12
 8004e62:	bd30      	pop	{r4, r5, pc}

08004e64 <SDADC_InjConvStart>:
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8004e64:	6a03      	ldr	r3, [r0, #32]
{
 8004e66:	b510      	push	{r4, lr}
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8004e68:	6243      	str	r3, [r0, #36]	; 0x24
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8004e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8004e6c:	4604      	mov	r4, r0
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8004e6e:	b973      	cbnz	r3, 8004e8e <SDADC_InjConvStart+0x2a>
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 8004e70:	6802      	ldr	r2, [r0, #0]
 8004e72:	6853      	ldr	r3, [r2, #4]
 8004e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e78:	6053      	str	r3, [r2, #4]
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 8004e7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	bf0c      	ite	eq
 8004e82:	2304      	moveq	r3, #4
 8004e84:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8004e86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e006      	b.n	8004e9c <SDADC_InjConvStart+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004e8e:	f7ff ff7f 	bl	8004d90 <SDADC_EnterInitMode>
 8004e92:	b120      	cbz	r0, 8004e9e <SDADC_InjConvStart+0x3a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004e94:	23ff      	movs	r3, #255	; 0xff
 8004e96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004e9a:	2003      	movs	r0, #3
}
 8004e9c:	bd10      	pop	{r4, pc}
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8004ea0:	6820      	ldr	r0, [r4, #0]
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004ea2:	2b01      	cmp	r3, #1
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8004ea4:	bf0d      	iteet	eq
 8004ea6:	6803      	ldreq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8004ea8:	6843      	ldrne	r3, [r0, #4]
 8004eaa:	6b22      	ldrne	r2, [r4, #48]	; 0x30
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8004eac:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8004eb0:	bf16      	itet	ne
 8004eb2:	4313      	orrne	r3, r2
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8004eb4:	6003      	streq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8004eb6:	6043      	strne	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 8004eb8:	f7ff ff81 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
  if(status == HAL_OK)
 8004ebc:	e7dd      	b.n	8004e7a <SDADC_InjConvStart+0x16>
	...

08004ec0 <HAL_SDADC_Init>:
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	2301      	movs	r3, #1
  if(hsdadc == NULL)
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d03e      	beq.n	8004f48 <HAL_SDADC_Init+0x88>
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8004eca:	2200      	movs	r2, #0
  hsdadc->InjConvRemaining    = 1U;
 8004ecc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8004ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004ed4:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004ed8:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8004edc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004ee0:	6382      	str	r2, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8004ee2:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_SDADC_MspInit(hsdadc);
 8004ee4:	f7fd fa52 	bl	800238c <HAL_SDADC_MspInit>
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004ee8:	6823      	ldr	r3, [r4, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004eea:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004ef2:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	4302      	orrs	r2, r0
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004efe:	685a      	ldr	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004f00:	68a1      	ldr	r1, [r4, #8]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004f02:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f06:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_SDADC_Init+0x8c>)
 8004f10:	6922      	ldr	r2, [r4, #16]
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8004f18:	4291      	cmp	r1, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_SDADC_Init+0x70>
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004f22:	6019      	str	r1, [r3, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
    HAL_Delay(2U);
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	f7fd fd90 	bl	8002a50 <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	6853      	ldr	r3, [r2, #4]
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6053      	str	r3, [r2, #4]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004f3a:	6893      	ldr	r3, [r2, #8]
 8004f3c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8004f40:	d1fb      	bne.n	8004f3a <HAL_SDADC_Init+0x7a>
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004f42:	2201      	movs	r2, #1
 8004f44:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004f48:	4618      	mov	r0, r3
}
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	40016000 	.word	0x40016000

08004f50 <HAL_SDADC_PrepareChannelConfig>:
{
 8004f50:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004f52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f56:	2b01      	cmp	r3, #1
{
 8004f58:	4606      	mov	r6, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	4615      	mov	r5, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004f5e:	d117      	bne.n	8004f90 <HAL_SDADC_PrepareChannelConfig+0x40>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004f60:	f7ff ff16 	bl	8004d90 <SDADC_EnterInitMode>
 8004f64:	4601      	mov	r1, r0
 8004f66:	b128      	cbz	r0, 8004f74 <HAL_SDADC_PrepareChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004f68:	23ff      	movs	r3, #255	; 0xff
 8004f6a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004f6e:	2103      	movs	r1, #3
}
 8004f70:	4608      	mov	r0, r1
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004f74:	e9d5 3200 	ldrd	r3, r2, [r5]
 8004f78:	4313      	orrs	r3, r2
                                             ConfParamStruct->Gain | \
 8004f7a:	68aa      	ldr	r2, [r5, #8]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004f7c:	6830      	ldr	r0, [r6, #0]
                                             ConfParamStruct->Gain | \
 8004f7e:	4313      	orrs	r3, r2
                       (uint32_t)(ConfIndex << 2UL));
 8004f80:	00a4      	lsls	r4, r4, #2
                                             ConfParamStruct->CommonMode | \
 8004f82:	68ea      	ldr	r2, [r5, #12]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004f84:	3420      	adds	r4, #32
                                             ConfParamStruct->CommonMode | \
 8004f86:	4313      	orrs	r3, r2
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004f88:	5103      	str	r3, [r0, r4]
      SDADC_ExitInitMode(hsdadc);
 8004f8a:	f7ff ff18 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
 8004f8e:	e7ef      	b.n	8004f70 <HAL_SDADC_PrepareChannelConfig+0x20>
    status = HAL_ERROR;
 8004f90:	2101      	movs	r1, #1
 8004f92:	e7ed      	b.n	8004f70 <HAL_SDADC_PrepareChannelConfig+0x20>

08004f94 <HAL_SDADC_AssociateChannelConfig>:
{
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004f96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f9a:	2b01      	cmp	r3, #1
{
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4617      	mov	r7, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004fa2:	d120      	bne.n	8004fe6 <HAL_SDADC_AssociateChannelConfig+0x52>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004fa4:	f7ff fef4 	bl	8004d90 <SDADC_EnterInitMode>
 8004fa8:	4605      	mov	r5, r0
 8004faa:	b128      	cbz	r0, 8004fb8 <HAL_SDADC_AssociateChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004fac:	23ff      	movs	r3, #255	; 0xff
 8004fae:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004fb2:	2503      	movs	r5, #3
}
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Channel != SDADC_CHANNEL_8)
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_SDADC_AssociateChannelConfig+0x58>)
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004fba:	6830      	ldr	r0, [r6, #0]
      if(Channel != SDADC_CHANNEL_8)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d010      	beq.n	8004fe2 <HAL_SDADC_AssociateChannelConfig+0x4e>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004fc0:	0ba1      	lsrs	r1, r4, #14
 8004fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fc4:	f001 041c 	and.w	r4, r1, #28
 8004fc8:	2203      	movs	r2, #3
 8004fca:	40a2      	lsls	r2, r4
 8004fcc:	ea23 0302 	bic.w	r3, r3, r2
 8004fd0:	6403      	str	r3, [r0, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8004fd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004fd4:	fa07 f404 	lsl.w	r4, r7, r4
 8004fd8:	4314      	orrs	r4, r2
 8004fda:	6404      	str	r4, [r0, #64]	; 0x40
      SDADC_ExitInitMode(hsdadc);
 8004fdc:	f7ff feef 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
 8004fe0:	e7e8      	b.n	8004fb4 <HAL_SDADC_AssociateChannelConfig+0x20>
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8004fe2:	6447      	str	r7, [r0, #68]	; 0x44
 8004fe4:	e7fa      	b.n	8004fdc <HAL_SDADC_AssociateChannelConfig+0x48>
    status = HAL_ERROR;
 8004fe6:	2501      	movs	r5, #1
 8004fe8:	e7e4      	b.n	8004fb4 <HAL_SDADC_AssociateChannelConfig+0x20>
 8004fea:	bf00      	nop
 8004fec:	00080100 	.word	0x00080100

08004ff0 <HAL_SDADC_InjectedConfigChannel>:
{
 8004ff0:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8004ff2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2bfd      	cmp	r3, #253	; 0xfd
 8004ffc:	d817      	bhi.n	800502e <HAL_SDADC_InjectedConfigChannel+0x3e>
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8004ffe:	6803      	ldr	r3, [r0, #0]
 8005000:	b289      	uxth	r1, r1
 8005002:	6159      	str	r1, [r3, #20]
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8005004:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8005006:	2a01      	cmp	r2, #1
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8005008:	bf0c      	ite	eq
 800500a:	f044 0420 	orreq.w	r4, r4, #32
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800500e:	f024 0420 	bicne.w	r4, r4, #32
 8005012:	605c      	str	r4, [r3, #4]
    hsdadc->InjectedContMode = ContinuousMode;
 8005014:	61c2      	str	r2, [r0, #28]
 8005016:	2309      	movs	r3, #9
  uint32_t nbChannels = 0UL;
 8005018:	2200      	movs	r2, #0
    if((tmp & 0x00000001UL) != 0UL)
 800501a:	07cc      	lsls	r4, r1, #31
      nbChannels++;
 800501c:	bf48      	it	mi
 800501e:	3201      	addmi	r2, #1
  for(i = 0UL ; i < 9UL ; i++)
 8005020:	3b01      	subs	r3, #1
    tmp = (uint32_t) (tmp >> 1UL);
 8005022:	ea4f 0151 	mov.w	r1, r1, lsr #1
  for(i = 0UL ; i < 9UL ; i++)
 8005026:	d1f8      	bne.n	800501a <HAL_SDADC_InjectedConfigChannel+0x2a>
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8005028:	6202      	str	r2, [r0, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	4618      	mov	r0, r3
}
 800502c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800502e:	2001      	movs	r0, #1
 8005030:	e7fc      	b.n	800502c <HAL_SDADC_InjectedConfigChannel+0x3c>
	...

08005034 <HAL_SDADC_SelectInjectedTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8005034:	6802      	ldr	r2, [r0, #0]
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_SDADC_SelectInjectedTrigger+0x20>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d101      	bne.n	8005040 <HAL_SDADC_SelectInjectedTrigger+0xc>
 800503c:	2901      	cmp	r1, #1
 800503e:	d007      	beq.n	8005050 <HAL_SDADC_SelectInjectedTrigger+0x1c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8005040:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8005044:	3b01      	subs	r3, #1
 8005046:	2b02      	cmp	r3, #2
 8005048:	d802      	bhi.n	8005050 <HAL_SDADC_SelectInjectedTrigger+0x1c>
    hsdadc->InjectedTrigger = Trigger;
 800504a:	62c1      	str	r1, [r0, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2000      	movs	r0, #0
 800504e:	4770      	bx	lr
    status = HAL_ERROR;
 8005050:	2001      	movs	r0, #1
}
 8005052:	4770      	bx	lr
 8005054:	40016000 	.word	0x40016000

08005058 <HAL_SDADC_SelectInjectedExtTrigger>:
{
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800505a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800505e:	2b01      	cmp	r3, #1
{
 8005060:	4605      	mov	r5, r0
 8005062:	460f      	mov	r7, r1
 8005064:	4616      	mov	r6, r2
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8005066:	d115      	bne.n	8005094 <HAL_SDADC_SelectInjectedExtTrigger+0x3c>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005068:	f7ff fe92 	bl	8004d90 <SDADC_EnterInitMode>
 800506c:	4604      	mov	r4, r0
 800506e:	b128      	cbz	r0, 800507c <HAL_SDADC_SelectInjectedExtTrigger+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005070:	23ff      	movs	r3, #255	; 0xff
 8005072:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005076:	2403      	movs	r4, #3
}
 8005078:	4620      	mov	r0, r4
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTSEL);
 800507c:	6828      	ldr	r0, [r5, #0]
 800507e:	6843      	ldr	r3, [r0, #4]
 8005080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005084:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedExtTrigger;
 8005086:	6843      	ldr	r3, [r0, #4]
 8005088:	433b      	orrs	r3, r7
 800508a:	6043      	str	r3, [r0, #4]
      hsdadc->ExtTriggerEdge = ExtTriggerEdge;
 800508c:	632e      	str	r6, [r5, #48]	; 0x30
      SDADC_ExitInitMode(hsdadc);
 800508e:	f7ff fe96 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
 8005092:	e7f1      	b.n	8005078 <HAL_SDADC_SelectInjectedExtTrigger+0x20>
    status = HAL_ERROR;
 8005094:	2401      	movs	r4, #1
 8005096:	e7ef      	b.n	8005078 <HAL_SDADC_SelectInjectedExtTrigger+0x20>

08005098 <HAL_SDADC_SelectInjectedDelay>:
{
 8005098:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800509a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
{
 80050a0:	4604      	mov	r4, r0
 80050a2:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80050a4:	d114      	bne.n	80050d0 <HAL_SDADC_SelectInjectedDelay+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80050a6:	f7ff fe73 	bl	8004d90 <SDADC_EnterInitMode>
 80050aa:	4602      	mov	r2, r0
 80050ac:	b128      	cbz	r0, 80050ba <HAL_SDADC_SelectInjectedDelay+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80050ae:	23ff      	movs	r3, #255	; 0xff
 80050b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80050b4:	2203      	movs	r2, #3
}
 80050b6:	4610      	mov	r0, r2
 80050b8:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	6843      	ldr	r3, [r0, #4]
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 80050c4:	6843      	ldr	r3, [r0, #4]
 80050c6:	432b      	orrs	r3, r5
 80050c8:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 80050ca:	f7ff fe78 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
 80050ce:	e7f2      	b.n	80050b6 <HAL_SDADC_SelectInjectedDelay+0x1e>
    status = HAL_ERROR;
 80050d0:	2201      	movs	r2, #1
 80050d2:	e7f0      	b.n	80050b6 <HAL_SDADC_SelectInjectedDelay+0x1e>

080050d4 <HAL_SDADC_CalibrationStart>:
{
 80050d4:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80050d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050da:	2b01      	cmp	r3, #1
{
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80050e0:	d11c      	bne.n	800511c <HAL_SDADC_CalibrationStart+0x48>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80050e2:	f7ff fe55 	bl	8004d90 <SDADC_EnterInitMode>
 80050e6:	4602      	mov	r2, r0
 80050e8:	b128      	cbz	r0, 80050f6 <HAL_SDADC_CalibrationStart+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80050ea:	23ff      	movs	r3, #255	; 0xff
 80050ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80050f0:	2203      	movs	r2, #3
}
 80050f2:	4610      	mov	r0, r2
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	6843      	ldr	r3, [r0, #4]
 80050fa:	f023 0306 	bic.w	r3, r3, #6
 80050fe:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8005100:	6843      	ldr	r3, [r0, #4]
 8005102:	432b      	orrs	r3, r5
 8005104:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 8005106:	f7ff fe5a 	bl	8004dbe <SDADC_ExitInitMode.isra.0>
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	684b      	ldr	r3, [r1, #4]
 800510e:	f043 0310 	orr.w	r3, r3, #16
 8005112:	604b      	str	r3, [r1, #4]
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8005114:	2302      	movs	r3, #2
 8005116:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800511a:	e7ea      	b.n	80050f2 <HAL_SDADC_CalibrationStart+0x1e>
    status = HAL_ERROR;
 800511c:	2201      	movs	r2, #1
 800511e:	e7e8      	b.n	80050f2 <HAL_SDADC_CalibrationStart+0x1e>

08005120 <HAL_SDADC_PollForCalibEvent>:
{
 8005120:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8005122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005126:	2b02      	cmp	r3, #2
{
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800512c:	d11a      	bne.n	8005164 <HAL_SDADC_PollForCalibEvent+0x44>
    tickstart = HAL_GetTick();  
 800512e:	f7fd fc89 	bl	8002a44 <HAL_GetTick>
 8005132:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	07d2      	lsls	r2, r2, #31
 800513a:	d508      	bpl.n	800514e <HAL_SDADC_PollForCalibEvent+0x2e>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]
    hsdadc->State = HAL_SDADC_STATE_READY;
 8005144:	2301      	movs	r3, #1
 8005146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800514a:	2000      	movs	r0, #0
}
 800514c:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800514e:	1c69      	adds	r1, r5, #1
 8005150:	d0f1      	beq.n	8005136 <HAL_SDADC_PollForCalibEvent+0x16>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8005152:	f7fd fc77 	bl	8002a44 <HAL_GetTick>
 8005156:	1b80      	subs	r0, r0, r6
 8005158:	42a8      	cmp	r0, r5
 800515a:	d801      	bhi.n	8005160 <HAL_SDADC_PollForCalibEvent+0x40>
 800515c:	2d00      	cmp	r5, #0
 800515e:	d1e9      	bne.n	8005134 <HAL_SDADC_PollForCalibEvent+0x14>
          return HAL_TIMEOUT;
 8005160:	2003      	movs	r0, #3
 8005162:	e7f3      	b.n	800514c <HAL_SDADC_PollForCalibEvent+0x2c>
    return HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e7f1      	b.n	800514c <HAL_SDADC_PollForCalibEvent+0x2c>

08005168 <HAL_SDADC_InjectedStart_DMA>:
{
 8005168:	b558      	push	{r3, r4, r6, lr}
 800516a:	460e      	mov	r6, r1
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800516c:	6801      	ldr	r1, [r0, #0]
{
 800516e:	4613      	mov	r3, r2
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 8005170:	680a      	ldr	r2, [r1, #0]
 8005172:	0392      	lsls	r2, r2, #14
{
 8005174:	4604      	mov	r4, r0
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 8005176:	d428      	bmi.n	80051ca <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8005178:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800517a:	b952      	cbnz	r2, 8005192 <HAL_SDADC_InjectedStart_DMA+0x2a>
 800517c:	69c2      	ldr	r2, [r0, #28]
 800517e:	b942      	cbnz	r2, 8005192 <HAL_SDADC_InjectedStart_DMA+0x2a>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8005180:	6942      	ldr	r2, [r0, #20]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005182:	6990      	ldr	r0, [r2, #24]
 8005184:	b910      	cbnz	r0, 800518c <HAL_SDADC_InjectedStart_DMA+0x24>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8005186:	6a20      	ldr	r0, [r4, #32]
 8005188:	4298      	cmp	r0, r3
 800518a:	d31e      	bcc.n	80051ca <HAL_SDADC_InjectedStart_DMA+0x62>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800518c:	6992      	ldr	r2, [r2, #24]
 800518e:	2a20      	cmp	r2, #32
 8005190:	d01b      	beq.n	80051ca <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8005192:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005196:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800519a:	2a01      	cmp	r2, #1
 800519c:	d115      	bne.n	80051ca <HAL_SDADC_InjectedStart_DMA+0x62>
    hsdadc->hdma->XferCpltCallback = SDADC_DMAInjectedConvCplt;
 800519e:	6960      	ldr	r0, [r4, #20]
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <HAL_SDADC_InjectedStart_DMA+0x70>)
 80051a2:	6282      	str	r2, [r0, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <HAL_SDADC_InjectedStart_DMA+0x74>)
 80051a6:	6302      	str	r2, [r0, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 80051a8:	6982      	ldr	r2, [r0, #24]
 80051aa:	2a20      	cmp	r2, #32
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMAInjectedHalfConvCplt;
 80051ac:	bf04      	itt	eq
 80051ae:	4a0c      	ldreq	r2, [pc, #48]	; (80051e0 <HAL_SDADC_InjectedStart_DMA+0x78>)
 80051b0:	62c2      	streq	r2, [r0, #44]	; 0x2c
    hsdadc->Instance->CR1 |= SDADC_CR1_JDMAEN;
 80051b2:	680a      	ldr	r2, [r1, #0]
 80051b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051b8:	f841 2b60 	str.w	r2, [r1], #96
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 80051bc:	4632      	mov	r2, r6
 80051be:	f7fe f85a 	bl	8003276 <HAL_DMA_Start_IT>
 80051c2:	b120      	cbz	r0, 80051ce <HAL_SDADC_InjectedStart_DMA+0x66>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80051c4:	23ff      	movs	r3, #255	; 0xff
 80051c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80051ca:	2001      	movs	r0, #1
 80051cc:	bd58      	pop	{r3, r4, r6, pc}
      status = SDADC_InjConvStart(hsdadc);
 80051ce:	4620      	mov	r0, r4
}
 80051d0:	e8bd 4058 	ldmia.w	sp!, {r3, r4, r6, lr}
      status = SDADC_InjConvStart(hsdadc);
 80051d4:	f7ff be46 	b.w	8004e64 <SDADC_InjConvStart>
 80051d8:	08005227 	.word	0x08005227
 80051dc:	08005233 	.word	0x08005233
 80051e0:	0800521b 	.word	0x0800521b

080051e4 <HAL_SDADC_InjectedStop_DMA>:
{
 80051e4:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 80051e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051ea:	3b04      	subs	r3, #4
 80051ec:	2b01      	cmp	r3, #1
{
 80051ee:	4604      	mov	r4, r0
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 80051f0:	d80b      	bhi.n	800520a <HAL_SDADC_InjectedStop_DMA+0x26>
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_JDMAEN);
 80051f2:	6802      	ldr	r2, [r0, #0]
    if(HAL_DMA_Abort(hsdadc->hdma) != HAL_OK)
 80051f4:	6940      	ldr	r0, [r0, #20]
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_JDMAEN);
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fc:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Abort(hsdadc->hdma) != HAL_OK)
 80051fe:	f7fe f876 	bl	80032ee <HAL_DMA_Abort>
 8005202:	b120      	cbz	r0, 800520e <HAL_SDADC_InjectedStop_DMA+0x2a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005204:	23ff      	movs	r3, #255	; 0xff
 8005206:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800520a:	2001      	movs	r0, #1
 800520c:	bd10      	pop	{r4, pc}
      status = SDADC_InjConvStop(hsdadc);
 800520e:	4620      	mov	r0, r4
}
 8005210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      status = SDADC_InjConvStop(hsdadc);
 8005214:	f7ff bdd8 	b.w	8004dc8 <SDADC_InjConvStop>

08005218 <HAL_SDADC_InjectedConvHalfCpltCallback>:
 8005218:	4770      	bx	lr

0800521a <SDADC_DMAInjectedHalfConvCplt>:
{
 800521a:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvHalfCpltCallback(hsdadc);
 800521c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800521e:	f7ff fffb 	bl	8005218 <HAL_SDADC_InjectedConvHalfCpltCallback>
}
 8005222:	bd08      	pop	{r3, pc}

08005224 <HAL_SDADC_InjectedConvCpltCallback>:
 8005224:	4770      	bx	lr

08005226 <SDADC_DMAInjectedConvCplt>:
{
 8005226:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8005228:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800522a:	f7ff fffb 	bl	8005224 <HAL_SDADC_InjectedConvCpltCallback>
}
 800522e:	bd08      	pop	{r3, pc}

08005230 <HAL_SDADC_ErrorCallback>:
 8005230:	4770      	bx	lr

08005232 <SDADC_DMAError>:
{
 8005232:	b508      	push	{r3, lr}
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8005234:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 8005236:	2303      	movs	r3, #3
 8005238:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_SDADC_ErrorCallback(hsdadc);
 800523a:	f7ff fff9 	bl	8005230 <HAL_SDADC_ErrorCallback>
}
 800523e:	bd08      	pop	{r3, pc}

08005240 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005240:	6a03      	ldr	r3, [r0, #32]
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005248:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524a:	6842      	ldr	r2, [r0, #4]
{
 800524c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005252:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005256:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005258:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800525a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800525e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005260:	4d12      	ldr	r5, [pc, #72]	; (80052ac <TIM_OC1_SetConfig+0x6c>)
 8005262:	42a8      	cmp	r0, r5
 8005264:	d006      	beq.n	8005274 <TIM_OC1_SetConfig+0x34>
 8005266:	4e12      	ldr	r6, [pc, #72]	; (80052b0 <TIM_OC1_SetConfig+0x70>)
 8005268:	42b0      	cmp	r0, r6
 800526a:	d003      	beq.n	8005274 <TIM_OC1_SetConfig+0x34>
 800526c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005270:	42b0      	cmp	r0, r6
 8005272:	d114      	bne.n	800529e <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005274:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005276:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800527a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800527e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	d006      	beq.n	8005292 <TIM_OC1_SetConfig+0x52>
 8005284:	4d0a      	ldr	r5, [pc, #40]	; (80052b0 <TIM_OC1_SetConfig+0x70>)
 8005286:	42a8      	cmp	r0, r5
 8005288:	d003      	beq.n	8005292 <TIM_OC1_SetConfig+0x52>
 800528a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800528e:	42a8      	cmp	r0, r5
 8005290:	d105      	bne.n	800529e <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005292:	f422 7540 	bic.w	r5, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005296:	e9d1 2605 	ldrd	r2, r6, [r1, #20]
 800529a:	4332      	orrs	r2, r6
 800529c:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052a2:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80052a4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a6:	6203      	str	r3, [r0, #32]
}
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	bf00      	nop
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400

080052b4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80052b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d128      	bne.n	800530e <HAL_TIM_Base_Start+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c2:	6803      	ldr	r3, [r0, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d016      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <HAL_TIM_Base_Start+0x60>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052e8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <HAL_TIM_Base_Start+0x44>
 80052f0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	2a06      	cmp	r2, #6
 8005300:	d003      	beq.n	800530a <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800530a:	2000      	movs	r0, #0
}
 800530c:	4770      	bx	lr
    return HAL_ERROR;
 800530e:	2001      	movs	r0, #1
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40000400 	.word	0x40000400

08005318 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005318:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800531c:	2b01      	cmp	r3, #1
 800531e:	d12c      	bne.n	800537a <HAL_TIM_Base_Start_IT+0x62>
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	2302      	movs	r3, #2
 8005322:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	d016      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <HAL_TIM_Base_Start_IT+0x68>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 800533c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 8005344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 800534c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 8005354:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x4c>
 800535c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005360:	4293      	cmp	r3, r2
 8005362:	d104      	bne.n	800536e <HAL_TIM_Base_Start_IT+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	2a06      	cmp	r2, #6
 800536c:	d003      	beq.n	8005376 <HAL_TIM_Base_Start_IT+0x5e>
    __HAL_TIM_ENABLE(htim);
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005376:	2000      	movs	r0, #0
}
 8005378:	4770      	bx	lr
    return HAL_ERROR;
 800537a:	2001      	movs	r0, #1
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40000400 	.word	0x40000400

08005384 <HAL_TIM_OC_MspInit>:
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_PWM_MspInit>:
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_IC_MspInit>:
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_Encoder_Start>:
{
 800538a:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800538c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005390:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005394:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005398:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800539c:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800539e:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053a0:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053a2:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 80053a4:	b9c9      	cbnz	r1, 80053da <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a6:	2a01      	cmp	r2, #1
 80053a8:	d146      	bne.n	8005438 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80053aa:	2d01      	cmp	r5, #1
 80053ac:	d146      	bne.n	800543c <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ae:	2302      	movs	r3, #2
 80053b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053b8:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 80053ca:	6802      	ldr	r2, [r0, #0]
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80053da:	2904      	cmp	r1, #4
 80053dc:	d111      	bne.n	8005402 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12a      	bne.n	8005438 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053e2:	2c01      	cmp	r4, #1
 80053e4:	d1f7      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e6:	2302      	movs	r3, #2
 80053e8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053f0:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	f022 0210 	bic.w	r2, r2, #16
 80053f8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	f042 0210 	orr.w	r2, r2, #16
 8005400:	e7e2      	b.n	80053c8 <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005402:	2a01      	cmp	r2, #1
 8005404:	d118      	bne.n	8005438 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005406:	2b01      	cmp	r3, #1
 8005408:	d118      	bne.n	800543c <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800540a:	2d01      	cmp	r5, #1
 800540c:	d1e3      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x4c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800540e:	2c01      	cmp	r4, #1
 8005410:	d1e1      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005412:	2302      	movs	r3, #2
 8005414:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005418:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800541c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005420:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005424:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	621a      	str	r2, [r3, #32]
 8005436:	e7dc      	b.n	80053f2 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e7cc      	b.n	80053d6 <HAL_TIM_Encoder_Start+0x4c>
 800543c:	4613      	mov	r3, r2
 800543e:	e7ca      	b.n	80053d6 <HAL_TIM_Encoder_Start+0x4c>

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_IC_CaptureCallback>:
 8005442:	4770      	bx	lr

08005444 <TIM_DMACaptureCplt>:
{
 8005444:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005446:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005448:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800544a:	4282      	cmp	r2, r0
 800544c:	d10d      	bne.n	800546a <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544e:	2301      	movs	r3, #1
 8005450:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005452:	6992      	ldr	r2, [r2, #24]
 8005454:	b91a      	cbnz	r2, 800545e <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff ffef 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	2300      	movs	r3, #0
 8005466:	7723      	strb	r3, [r4, #28]
}
 8005468:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800546a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800546c:	4283      	cmp	r3, r0
 800546e:	d10a      	bne.n	8005486 <TIM_DMACaptureCplt+0x42>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005470:	2202      	movs	r2, #2
 8005472:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f1      	bne.n	800545e <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	2301      	movs	r3, #1
 800547c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005484:	e7eb      	b.n	800545e <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005488:	4283      	cmp	r3, r0
 800548a:	d10a      	bne.n	80054a2 <TIM_DMACaptureCplt+0x5e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548c:	2204      	movs	r2, #4
 800548e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e3      	bne.n	800545e <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	2301      	movs	r3, #1
 8005498:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80054a0:	e7dd      	b.n	800545e <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054a4:	4283      	cmp	r3, r0
 80054a6:	d1da      	bne.n	800545e <TIM_DMACaptureCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a8:	2208      	movs	r2, #8
 80054aa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1d5      	bne.n	800545e <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	2301      	movs	r3, #1
 80054b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80054bc:	e7cf      	b.n	800545e <TIM_DMACaptureCplt+0x1a>

080054be <HAL_TIM_IC_CaptureHalfCpltCallback>:
 80054be:	4770      	bx	lr

080054c0 <TIM_DMACaptureHalfCplt>:
{
 80054c0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c6:	4283      	cmp	r3, r0
 80054c8:	d107      	bne.n	80054da <TIM_DMACaptureHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ca:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054cc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fff5 	bl	80054be <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d4:	2300      	movs	r3, #0
 80054d6:	7723      	strb	r3, [r4, #28]
}
 80054d8:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054dc:	4283      	cmp	r3, r0
 80054de:	d101      	bne.n	80054e4 <TIM_DMACaptureHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e0:	2302      	movs	r3, #2
 80054e2:	e7f3      	b.n	80054cc <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054e6:	4283      	cmp	r3, r0
 80054e8:	d101      	bne.n	80054ee <TIM_DMACaptureHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ea:	2304      	movs	r3, #4
 80054ec:	e7ee      	b.n	80054cc <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d1ec      	bne.n	80054ce <TIM_DMACaptureHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f4:	2308      	movs	r3, #8
 80054f6:	e7e9      	b.n	80054cc <TIM_DMACaptureHalfCplt+0xc>

080054f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_TriggerCallback>:
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	0791      	lsls	r1, r2, #30
{
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005506:	d50e      	bpl.n	8005526 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	0792      	lsls	r2, r2, #30
 800550c:	d50b      	bpl.n	8005526 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800550e:	f06f 0202 	mvn.w	r2, #2
 8005512:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005514:	2201      	movs	r2, #1
 8005516:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	079b      	lsls	r3, r3, #30
 800551c:	d077      	beq.n	800560e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800551e:	f7ff ff90 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	2300      	movs	r3, #0
 8005524:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	0750      	lsls	r0, r2, #29
 800552c:	d510      	bpl.n	8005550 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	0751      	lsls	r1, r2, #29
 8005532:	d50d      	bpl.n	8005550 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005534:	f06f 0204 	mvn.w	r2, #4
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553a:	2202      	movs	r2, #2
 800553c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005544:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005546:	d068      	beq.n	800561a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005548:	f7ff ff7b 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554c:	2300      	movs	r3, #0
 800554e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	0712      	lsls	r2, r2, #28
 8005556:	d50f      	bpl.n	8005578 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	0710      	lsls	r0, r2, #28
 800555c:	d50c      	bpl.n	8005578 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800555e:	f06f 0208 	mvn.w	r2, #8
 8005562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005564:	2204      	movs	r2, #4
 8005566:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800556c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800556e:	d05a      	beq.n	8005626 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005570:	f7ff ff67 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005574:	2300      	movs	r3, #0
 8005576:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	06d2      	lsls	r2, r2, #27
 800557e:	d510      	bpl.n	80055a2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	06d0      	lsls	r0, r2, #27
 8005584:	d50d      	bpl.n	80055a2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005586:	f06f 0210 	mvn.w	r2, #16
 800558a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558c:	2208      	movs	r2, #8
 800558e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005598:	d04b      	beq.n	8005632 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	f7ff ff52 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	2300      	movs	r3, #0
 80055a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	07d1      	lsls	r1, r2, #31
 80055a8:	d508      	bpl.n	80055bc <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	07d2      	lsls	r2, r2, #31
 80055ae:	d505      	bpl.n	80055bc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b0:	f06f 0201 	mvn.w	r2, #1
 80055b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7fc f8b6 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	0610      	lsls	r0, r2, #24
 80055c2:	d508      	bpl.n	80055d6 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	0611      	lsls	r1, r2, #24
 80055c8:	d505      	bpl.n	80055d6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 fdd0 	bl	8006176 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	d508      	bpl.n	80055f0 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	0650      	lsls	r0, r2, #25
 80055e2:	d505      	bpl.n	80055f0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff ff85 	bl	80054fa <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	0691      	lsls	r1, r2, #26
 80055f6:	d522      	bpl.n	800563e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	0692      	lsls	r2, r2, #26
 80055fc:	d51f      	bpl.n	800563e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005602:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005604:	611a      	str	r2, [r3, #16]
}
 8005606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800560a:	f000 bdb3 	b.w	8006174 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	f7ff ff17 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff ff70 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005618:	e783      	b.n	8005522 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	f7ff ff11 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff ff6a 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005624:	e792      	b.n	800554c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	f7ff ff0b 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff ff64 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005630:	e7a0      	b.n	8005574 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	f7ff ff05 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff ff5e 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800563c:	e7af      	b.n	800559e <HAL_TIM_IRQHandler+0xa2>
}
 800563e:	bd10      	pop	{r4, pc}

08005640 <HAL_TIM_ErrorCallback>:
 8005640:	4770      	bx	lr

08005642 <TIM_DMAError>:
{
 8005642:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005644:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005648:	4283      	cmp	r3, r0
 800564a:	d109      	bne.n	8005660 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564c:	2301      	movs	r3, #1
 800564e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fff3 	bl	8005640 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	2300      	movs	r3, #0
 800565c:	7723      	strb	r3, [r4, #28]
}
 800565e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005662:	4283      	cmp	r3, r0
 8005664:	d105      	bne.n	8005672 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	2302      	movs	r3, #2
 8005668:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	2301      	movs	r3, #1
 800566c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005670:	e7f0      	b.n	8005654 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005674:	4283      	cmp	r3, r0
 8005676:	f04f 0301 	mov.w	r3, #1
 800567a:	d104      	bne.n	8005686 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567c:	2204      	movs	r2, #4
 800567e:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005684:	e7e6      	b.n	8005654 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005686:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005688:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568a:	bf03      	ittte	eq
 800568c:	2208      	moveq	r2, #8
 800568e:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 8005694:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8005698:	e7dc      	b.n	8005654 <TIM_DMAError+0x12>
	...

0800569c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80056a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a2:	d00e      	beq.n	80056c2 <TIM_Base_SetConfig+0x26>
 80056a4:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <TIM_Base_SetConfig+0xbc>)
 80056a6:	4290      	cmp	r0, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x26>
 80056aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ae:	4290      	cmp	r0, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x26>
 80056b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056b6:	4290      	cmp	r0, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x26>
 80056ba:	f502 32a8 	add.w	r2, r2, #86016	; 0x15000
 80056be:	4290      	cmp	r0, r2
 80056c0:	d112      	bne.n	80056e8 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 80056c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80056cc:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d0:	d025      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056d2:	4a21      	ldr	r2, [pc, #132]	; (8005758 <TIM_Base_SetConfig+0xbc>)
 80056d4:	4290      	cmp	r0, r2
 80056d6:	d022      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056dc:	4290      	cmp	r0, r2
 80056de:	d01e      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056e4:	4290      	cmp	r0, r2
 80056e6:	d01a      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <TIM_Base_SetConfig+0xc0>)
 80056ea:	4290      	cmp	r0, r2
 80056ec:	d017      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056f2:	4290      	cmp	r0, r2
 80056f4:	d013      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056fa:	4290      	cmp	r0, r2
 80056fc:	d00f      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 80056fe:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8005702:	4290      	cmp	r0, r2
 8005704:	d00b      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 8005706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800570a:	4290      	cmp	r0, r2
 800570c:	d007      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 800570e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005712:	4290      	cmp	r0, r2
 8005714:	d003      	beq.n	800571e <TIM_Base_SetConfig+0x82>
 8005716:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800571a:	4290      	cmp	r0, r2
 800571c:	d103      	bne.n	8005726 <TIM_Base_SetConfig+0x8a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005724:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005726:	694a      	ldr	r2, [r1, #20]
 8005728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800572e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005730:	688b      	ldr	r3, [r1, #8]
 8005732:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005734:	680b      	ldr	r3, [r1, #0]
 8005736:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <TIM_Base_SetConfig+0xc4>)
 800573a:	4298      	cmp	r0, r3
 800573c:	d007      	beq.n	800574e <TIM_Base_SetConfig+0xb2>
 800573e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005742:	4298      	cmp	r0, r3
 8005744:	d003      	beq.n	800574e <TIM_Base_SetConfig+0xb2>
 8005746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574a:	4298      	cmp	r0, r3
 800574c:	d101      	bne.n	8005752 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005752:	2301      	movs	r3, #1
 8005754:	6143      	str	r3, [r0, #20]
}
 8005756:	4770      	bx	lr
 8005758:	40000400 	.word	0x40000400
 800575c:	40001800 	.word	0x40001800
 8005760:	40014000 	.word	0x40014000

08005764 <HAL_TIM_Base_Init>:
{
 8005764:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005766:	4604      	mov	r4, r0
 8005768:	b330      	cbz	r0, 80057b8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800576e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005772:	b91b      	cbnz	r3, 800577c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005774:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005778:	f7fc fede 	bl	8002538 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	1d21      	adds	r1, r4, #4
 8005786:	f7ff ff89 	bl	800569c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578a:	2301      	movs	r3, #1
 800578c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005790:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005796:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800579a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800579e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80057ae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80057b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057b8:	2001      	movs	r0, #1
 80057ba:	e7fc      	b.n	80057b6 <HAL_TIM_Base_Init+0x52>

080057bc <HAL_TIM_OC_Init>:
{
 80057bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80057be:	4604      	mov	r4, r0
 80057c0:	b330      	cbz	r0, 8005810 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057ca:	b91b      	cbnz	r3, 80057d4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80057cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80057d0:	f7ff fdd8 	bl	8005384 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057d6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057dc:	1d21      	adds	r1, r4, #4
 80057de:	f7ff ff5d 	bl	800569c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80057e8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80057ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005802:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005806:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800580a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800580e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005810:	2001      	movs	r0, #1
 8005812:	e7fc      	b.n	800580e <HAL_TIM_OC_Init+0x52>

08005814 <HAL_TIM_PWM_Init>:
{
 8005814:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005816:	4604      	mov	r4, r0
 8005818:	b330      	cbz	r0, 8005868 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800581a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800581e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005822:	b91b      	cbnz	r3, 800582c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005824:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005828:	f7ff fdad 	bl	8005386 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	1d21      	adds	r1, r4, #4
 8005836:	f7ff ff31 	bl	800569c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583a:	2301      	movs	r3, #1
 800583c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005840:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005846:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800584a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800584e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800585a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800585e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005866:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005868:	2001      	movs	r0, #1
 800586a:	e7fc      	b.n	8005866 <HAL_TIM_PWM_Init+0x52>

0800586c <HAL_TIM_IC_Init>:
{
 800586c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800586e:	4604      	mov	r4, r0
 8005870:	b330      	cbz	r0, 80058c0 <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005872:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005876:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800587a:	b91b      	cbnz	r3, 8005884 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800587c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005880:	f7ff fd82 	bl	8005388 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005886:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588c:	1d21      	adds	r1, r4, #4
 800588e:	f7ff ff05 	bl	800569c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005892:	2301      	movs	r3, #1
 8005894:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005898:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800589e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80058a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80058ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80058b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80058ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80058be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058c0:	2001      	movs	r0, #1
 80058c2:	e7fc      	b.n	80058be <HAL_TIM_IC_Init+0x52>

080058c4 <HAL_TIM_Encoder_Init>:
{
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	460d      	mov	r5, r1
  if (htim == NULL)
 80058c8:	4604      	mov	r4, r0
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d04d      	beq.n	800596a <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058d6:	b91b      	cbnz	r3, 80058e0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80058d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80058dc:	f7fc fefe 	bl	80026dc <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058e0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80058e2:	2302      	movs	r3, #2
 80058e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80058ec:	6883      	ldr	r3, [r0, #8]
 80058ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f8:	f7ff fed0 	bl	800569c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80058fe:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005900:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005902:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005904:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 8005906:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8005908:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800590a:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005910:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005914:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005918:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800591a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800591e:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005920:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005928:	68e9      	ldr	r1, [r5, #12]
 800592a:	430b      	orrs	r3, r1
 800592c:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800592e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005932:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005936:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005938:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800593a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800593e:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005940:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005942:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8005946:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005948:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800594c:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005952:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800596a:	2001      	movs	r0, #1
 800596c:	e7fc      	b.n	8005968 <HAL_TIM_Encoder_Init+0xa4>
	...

08005970 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005970:	6a03      	ldr	r3, [r0, #32]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005978:	6a03      	ldr	r3, [r0, #32]
{
 800597a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800597c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800597e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005982:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005986:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800598a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800598c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005990:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <TIM_OC2_SetConfig+0x54>)
 8005996:	42a8      	cmp	r0, r5
 8005998:	d007      	beq.n	80059aa <TIM_OC2_SetConfig+0x3a>
 800599a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800599e:	42a8      	cmp	r0, r5
 80059a0:	d003      	beq.n	80059aa <TIM_OC2_SetConfig+0x3a>
 80059a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059a6:	42a8      	cmp	r0, r5
 80059a8:	d106      	bne.n	80059b8 <TIM_OC2_SetConfig+0x48>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059aa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ae:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b2:	4335      	orrs	r5, r6
 80059b4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80059b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80059ba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80059bc:	684a      	ldr	r2, [r1, #4]
 80059be:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80059c0:	6203      	str	r3, [r0, #32]
}
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	40014000 	.word	0x40014000

080059c8 <HAL_TIM_OC_ConfigChannel>:
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80059ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059ce:	2b01      	cmp	r3, #1
{
 80059d0:	4605      	mov	r5, r0
 80059d2:	460e      	mov	r6, r1
  __HAL_LOCK(htim);
 80059d4:	d045      	beq.n	8005a62 <HAL_TIM_OC_ConfigChannel+0x9a>
 80059d6:	2001      	movs	r0, #1
  switch (Channel)
 80059d8:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80059da:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80059de:	d029      	beq.n	8005a34 <HAL_TIM_OC_ConfigChannel+0x6c>
 80059e0:	d806      	bhi.n	80059f0 <HAL_TIM_OC_ConfigChannel+0x28>
 80059e2:	b1f2      	cbz	r2, 8005a22 <HAL_TIM_OC_ConfigChannel+0x5a>
 80059e4:	2a04      	cmp	r2, #4
 80059e6:	d021      	beq.n	8005a2c <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_UNLOCK(htim);
 80059e8:	2300      	movs	r3, #0
 80059ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80059f0:	2a0c      	cmp	r2, #12
 80059f2:	d1f9      	bne.n	80059e8 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f4:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f6:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059fe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005a00:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005a02:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005a04:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a06:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a0e:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 8005a10:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8005a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	6871      	ldr	r1, [r6, #4]
 8005a1a:	6419      	str	r1, [r3, #64]	; 0x40
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a1c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8005a20:	e01d      	b.n	8005a5e <HAL_TIM_OC_ConfigChannel+0x96>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a22:	6828      	ldr	r0, [r5, #0]
 8005a24:	f7ff fc0c 	bl	8005240 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2000      	movs	r0, #0
}
 8005a2a:	e7dd      	b.n	80059e8 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2c:	6828      	ldr	r0, [r5, #0]
 8005a2e:	f7ff ff9f 	bl	8005970 <TIM_OC2_SetConfig>
      break;
 8005a32:	e7f9      	b.n	8005a28 <HAL_TIM_OC_ConfigChannel+0x60>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a34:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005a36:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005a40:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005a42:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005a44:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a46:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a4a:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a4c:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 8005a4e:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8005a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 8005a54:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	6871      	ldr	r1, [r6, #4]
 8005a58:	63d9      	str	r1, [r3, #60]	; 0x3c
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCER = tmpccer;
 8005a5e:	621a      	str	r2, [r3, #32]
 8005a60:	e7e2      	b.n	8005a28 <HAL_TIM_OC_ConfigChannel+0x60>
  __HAL_LOCK(htim);
 8005a62:	2002      	movs	r0, #2
 8005a64:	e7c3      	b.n	80059ee <HAL_TIM_OC_ConfigChannel+0x26>

08005a66 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a66:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005a68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
{
 8005a6e:	4606      	mov	r6, r0
 8005a70:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005a72:	d078      	beq.n	8005b66 <HAL_TIM_PWM_ConfigChannel+0x100>
 8005a74:	2001      	movs	r0, #1
  switch (Channel)
 8005a76:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005a78:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
  switch (Channel)
 8005a7c:	d050      	beq.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0xba>
 8005a7e:	d806      	bhi.n	8005a8e <HAL_TIM_PWM_ConfigChannel+0x28>
 8005a80:	b35a      	cbz	r2, 8005ada <HAL_TIM_PWM_ConfigChannel+0x74>
 8005a82:	2a04      	cmp	r2, #4
 8005a84:	d03b      	beq.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x98>
  __HAL_UNLOCK(htim);
 8005a86:	2300      	movs	r3, #0
 8005a88:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
}
 8005a8c:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8005a8e:	2a0c      	cmp	r2, #12
 8005a90:	d1f9      	bne.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a92:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005aa0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa4:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aac:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 8005aae:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 8005ab4:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8005aba:	6869      	ldr	r1, [r5, #4]
 8005abc:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005abe:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ac0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ac2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ad8:	e043      	b.n	8005b62 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ada:	6830      	ldr	r0, [r6, #0]
 8005adc:	f7ff fbb0 	bl	8005240 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae0:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af8:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2000      	movs	r0, #0
      break;
 8005afc:	e7c3      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005afe:	6830      	ldr	r0, [r6, #0]
 8005b00:	f7ff ff36 	bl	8005970 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b04:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b06:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b1e:	e7eb      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b20:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005b22:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b2a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005b2e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005b30:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b32:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b36:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b38:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 8005b3a:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 8005b40:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b42:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8005b46:	6869      	ldr	r1, [r5, #4]
 8005b48:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005b4a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b4c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b4e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b50:	f042 0208 	orr.w	r2, r2, #8
 8005b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	61da      	str	r2, [r3, #28]
 8005b64:	e7c9      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x94>
  __HAL_LOCK(htim);
 8005b66:	2002      	movs	r0, #2
 8005b68:	e790      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x26>
	...

08005b6c <TIM_TI1_SetConfig>:
{
 8005b6c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6e:	6a04      	ldr	r4, [r0, #32]
 8005b70:	f024 0401 	bic.w	r4, r4, #1
 8005b74:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpccmr1 = TIMx->CCMR1;
 8005b7a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005b7c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b7e:	d025      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005b80:	4e14      	ldr	r6, [pc, #80]	; (8005bd4 <TIM_TI1_SetConfig+0x68>)
 8005b82:	42b0      	cmp	r0, r6
 8005b84:	d022      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005b86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b8a:	42b0      	cmp	r0, r6
 8005b8c:	d01e      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005b8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b92:	42b0      	cmp	r0, r6
 8005b94:	d01a      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005b96:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005b9a:	42b0      	cmp	r0, r6
 8005b9c:	d016      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005b9e:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 8005ba2:	42b0      	cmp	r0, r6
 8005ba4:	d012      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
 8005ba6:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005baa:	42b0      	cmp	r0, r6
 8005bac:	d00e      	beq.n	8005bcc <TIM_TI1_SetConfig+0x60>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bae:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bba:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bbc:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc0:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bc4:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8005bc6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	6201      	str	r1, [r0, #32]
}
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bcc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005bd0:	4322      	orrs	r2, r4
 8005bd2:	e7ee      	b.n	8005bb2 <TIM_TI1_SetConfig+0x46>
 8005bd4:	40000400 	.word	0x40000400

08005bd8 <HAL_TIM_IC_ConfigChannel>:
{
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005bda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
{
 8005be0:	4605      	mov	r5, r0
 8005be2:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8005be4:	f000 8089 	beq.w	8005cfa <HAL_TIM_IC_ConfigChannel+0x122>
 8005be8:	2001      	movs	r0, #1
 8005bea:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005bee:	b99a      	cbnz	r2, 8005c18 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI1_SetConfig(htim->Instance,
 8005bf0:	68cb      	ldr	r3, [r1, #12]
 8005bf2:	6828      	ldr	r0, [r5, #0]
 8005bf4:	e9d1 1200 	ldrd	r1, r2, [r1]
 8005bf8:	f7ff ffb8 	bl	8005b6c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bfc:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bfe:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	f022 020c 	bic.w	r2, r2, #12
 8005c06:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c0c:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005c10:	2300      	movs	r3, #0
 8005c12:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8005c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8005c18:	2a04      	cmp	r2, #4
 8005c1a:	d123      	bne.n	8005c64 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 8005c1c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1e:	6a1e      	ldr	r6, [r3, #32]
 8005c20:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 8005c24:	e9d1 2700 	ldrd	r2, r7, [r1]
 8005c28:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2a:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2c:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8005c2e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c30:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c34:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c38:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c3a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c3e:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c40:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c42:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c44:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c48:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c4c:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c50:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c52:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c54:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c5a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c62:	e7d3      	b.n	8005c0c <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 8005c64:	2a08      	cmp	r2, #8
 8005c66:	d122      	bne.n	8005cae <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 8005c68:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6a:	6a1e      	ldr	r6, [r3, #32]
 8005c6c:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8005c70:	e9d1 2000 	ldrd	r2, r0, [r1]
 8005c74:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c76:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c78:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8005c7a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c7c:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8005c80:	4338      	orrs	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c82:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c84:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c88:	b2c9      	uxtb	r1, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c8a:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c8c:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c8e:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c92:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c96:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 8005c98:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c9a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c9c:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c9e:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ca0:	f022 020c 	bic.w	r2, r2, #12
 8005ca4:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005caa:	61da      	str	r2, [r3, #28]
 8005cac:	e7af      	b.n	8005c0e <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_4)
 8005cae:	2a0c      	cmp	r2, #12
 8005cb0:	d1ae      	bne.n	8005c10 <HAL_TIM_IC_ConfigChannel+0x38>
    TIM_TI4_SetConfig(htim->Instance,
 8005cb2:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	6a1e      	ldr	r6, [r3, #32]
 8005cb6:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8005cba:	e9d1 2700 	ldrd	r2, r7, [r1]
 8005cbe:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc0:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cc2:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 8005cc4:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cc6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cca:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cce:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cd0:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd4:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005cd6:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd8:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005cda:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005cde:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ce2:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 8005ce4:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ce6:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ce8:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cea:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cf0:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005cf8:	e7d7      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 8005cfa:	2002      	movs	r0, #2
 8005cfc:	e78b      	b.n	8005c16 <HAL_TIM_IC_ConfigChannel+0x3e>

08005cfe <TIM_ETR_SetConfig>:
{
 8005cfe:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8005d00:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d02:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d08:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8005d0c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8005d0e:	6083      	str	r3, [r0, #8]
}
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <HAL_TIM_ConfigClockSource>:
{
 8005d12:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005d14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
{
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8005d20:	f000 8091 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x134>
 8005d24:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005d26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005d2a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005d2e:	6800      	ldr	r0, [r0, #0]
 8005d30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005d3a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005d3c:	680b      	ldr	r3, [r1, #0]
 8005d3e:	2b60      	cmp	r3, #96	; 0x60
 8005d40:	d052      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0xd6>
 8005d42:	d833      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x9a>
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d067      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x106>
 8005d48:	d816      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x66>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d00d      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x58>
 8005d4e:	d80a      	bhi.n	8005d66 <HAL_TIM_ConfigClockSource+0x54>
 8005d50:	f033 0110 	bics.w	r1, r3, #16
 8005d54:	d009      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d62:	4610      	mov	r0, r2
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d1f5      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8005d6a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f043 0307 	orr.w	r3, r3, #7
 8005d76:	e017      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005d78:	2b50      	cmp	r3, #80	; 0x50
 8005d7a:	d1ec      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7c:	684a      	ldr	r2, [r1, #4]
 8005d7e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d80:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d82:	6a05      	ldr	r5, [r0, #32]
 8005d84:	f025 0501 	bic.w	r5, r5, #1
 8005d88:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d94:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005d98:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005d9e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005da8:	6083      	str	r3, [r0, #8]
 8005daa:	e011      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d00e      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0xbe>
 8005db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db6:	d00d      	beq.n	8005dd4 <HAL_TIM_ConfigClockSource+0xc2>
 8005db8:	2b70      	cmp	r3, #112	; 0x70
 8005dba:	d1cc      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005dbc:	68cb      	ldr	r3, [r1, #12]
 8005dbe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005dc2:	f7ff ff9c 	bl	8005cfe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dce:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	e7c0      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	68cb      	ldr	r3, [r1, #12]
 8005dd6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005dda:	f7ff ff90 	bl	8005cfe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	6893      	ldr	r3, [r2, #8]
 8005de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005de6:	e7f2      	b.n	8005dce <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de8:	684d      	ldr	r5, [r1, #4]
 8005dea:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dec:	6a01      	ldr	r1, [r0, #32]
 8005dee:	f021 0110 	bic.w	r1, r1, #16
 8005df2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005df6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e04:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005e08:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005e0a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005e0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e12:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005e16:	e7c7      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e18:	684a      	ldr	r2, [r1, #4]
 8005e1a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005e1c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	6a05      	ldr	r5, [r0, #32]
 8005e20:	f025 0501 	bic.w	r5, r5, #1
 8005e24:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e28:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e30:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005e34:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005e36:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005e38:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005e3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e40:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005e44:	e7b0      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8005e46:	461a      	mov	r2, r3
 8005e48:	e78b      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x50>

08005e4a <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8005e4a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e4c:	f001 011f 	and.w	r1, r1, #31
{
 8005e50:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e52:	2401      	movs	r4, #1
 8005e54:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005e56:	ea23 0304 	bic.w	r3, r3, r4
 8005e5a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e5c:	6a03      	ldr	r3, [r0, #32]
 8005e5e:	408a      	lsls	r2, r1
 8005e60:	431a      	orrs	r2, r3
 8005e62:	6202      	str	r2, [r0, #32]
}
 8005e64:	bd10      	pop	{r4, pc}
	...

08005e68 <HAL_TIM_OC_Start>:
{
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e6c:	b929      	cbnz	r1, 8005e7a <HAL_TIM_OC_Start+0x12>
 8005e6e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d01d      	beq.n	8005eb2 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8005e76:	2001      	movs	r0, #1
}
 8005e78:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e7a:	2904      	cmp	r1, #4
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_OC_Start+0x26>
 8005e7e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d1f7      	bne.n	8005e76 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	2302      	movs	r3, #2
 8005e88:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005e8c:	e014      	b.n	8005eb8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e8e:	2908      	cmp	r1, #8
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_OC_Start+0x3a>
 8005e92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d1ed      	bne.n	8005e76 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005ea0:	e00a      	b.n	8005eb8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ea2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d1e5      	bne.n	8005e76 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eaa:	2302      	movs	r3, #2
 8005eac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005eb0:	e002      	b.n	8005eb8 <HAL_TIM_OC_Start+0x50>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	f7ff ffc5 	bl	8005e4a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_TIM_OC_Start+0xc4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <HAL_TIM_OC_Start+0x70>
 8005ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <HAL_TIM_OC_Start+0x70>
 8005ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 8005ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d016      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <HAL_TIM_OC_Start+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00f      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005efc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005f04:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <HAL_TIM_OC_Start+0xac>
 8005f0c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	2a06      	cmp	r2, #6
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_OC_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7a6      	b.n	8005e78 <HAL_TIM_OC_Start+0x10>
 8005f2a:	bf00      	nop
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40000400 	.word	0x40000400

08005f34 <HAL_TIM_PWM_Start>:
 8005f34:	f7ff bf98 	b.w	8005e68 <HAL_TIM_OC_Start>

08005f38 <HAL_TIM_IC_Start_DMA>:
{
 8005f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	4617      	mov	r7, r2
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f40:	4688      	mov	r8, r1
 8005f42:	b989      	cbnz	r1, 8005f68 <HAL_TIM_IC_Start_DMA+0x30>
 8005f44:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f48:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f4c:	b2f6      	uxtb	r6, r6
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f4e:	2e02      	cmp	r6, #2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f50:	b2c4      	uxtb	r4, r0
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f52:	f000 80cb 	beq.w	80060ec <HAL_TIM_IC_Start_DMA+0x1b4>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005f56:	2c02      	cmp	r4, #2
 8005f58:	d002      	beq.n	8005f60 <HAL_TIM_IC_Start_DMA+0x28>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f5a:	2e01      	cmp	r6, #1
 8005f5c:	d01a      	beq.n	8005f94 <HAL_TIM_IC_Start_DMA+0x5c>
    return HAL_ERROR;
 8005f5e:	2401      	movs	r4, #1
}
 8005f60:	4620      	mov	r0, r4
 8005f62:	b002      	add	sp, #8
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f68:	2904      	cmp	r1, #4
 8005f6a:	d105      	bne.n	8005f78 <HAL_TIM_IC_Start_DMA+0x40>
 8005f6c:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f70:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f74:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f76:	e7ea      	b.n	8005f4e <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f78:	2908      	cmp	r1, #8
 8005f7a:	bf0b      	itete	eq
 8005f7c:	f890 6040 	ldrbeq.w	r6, [r0, #64]	; 0x40
 8005f80:	f895 6041 	ldrbne.w	r6, [r5, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f84:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 8005f88:	f895 0047 	ldrbne.w	r0, [r5, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f8c:	bf0c      	ite	eq
 8005f8e:	b2f6      	uxtbeq	r6, r6
 8005f90:	b2f6      	uxtbne	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f92:	e7dc      	b.n	8005f4e <HAL_TIM_IC_Start_DMA+0x16>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005f94:	2c01      	cmp	r4, #1
 8005f96:	d1e2      	bne.n	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
    if ((pData == NULL) && (Length > 0U))
 8005f98:	b90f      	cbnz	r7, 8005f9e <HAL_TIM_IC_Start_DMA+0x66>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1df      	bne.n	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f1b8 0f00 	cmp.w	r8, #0
 8005fa4:	d13a      	bne.n	800601c <HAL_TIM_IC_Start_DMA+0xe4>
 8005fa6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fae:	4641      	mov	r1, r8
 8005fb0:	6828      	ldr	r0, [r5, #0]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f7ff ff48 	bl	8005e4a <TIM_CCxChannelCmd>
  switch (Channel)
 8005fba:	f1b8 0f08 	cmp.w	r8, #8
 8005fbe:	6829      	ldr	r1, [r5, #0]
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	d07f      	beq.n	80060c4 <HAL_TIM_IC_Start_DMA+0x18c>
 8005fc4:	d83e      	bhi.n	8006044 <HAL_TIM_IC_Start_DMA+0x10c>
 8005fc6:	f1b8 0f00 	cmp.w	r8, #0
 8005fca:	d052      	beq.n	8006072 <HAL_TIM_IC_Start_DMA+0x13a>
 8005fcc:	f1b8 0f04 	cmp.w	r8, #4
 8005fd0:	d064      	beq.n	800609c <HAL_TIM_IC_Start_DMA+0x164>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd8:	d016      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8005fda:	4a45      	ldr	r2, [pc, #276]	; (80060f0 <HAL_TIM_IC_Start_DMA+0x1b8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8005fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00f      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8005fe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8005ff0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8005ff8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <HAL_TIM_IC_Start_DMA+0xd0>
 8006000:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8006004:	4293      	cmp	r3, r2
 8006006:	d104      	bne.n	8006012 <HAL_TIM_IC_Start_DMA+0xda>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	2a06      	cmp	r2, #6
 8006010:	d0a6      	beq.n	8005f60 <HAL_TIM_IC_Start_DMA+0x28>
    __HAL_TIM_ENABLE(htim);
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e7a1      	b.n	8005f60 <HAL_TIM_IC_Start_DMA+0x28>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800601c:	f1b8 0f04 	cmp.w	r8, #4
 8006020:	d104      	bne.n	800602c <HAL_TIM_IC_Start_DMA+0xf4>
 8006022:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
 800602a:	e7c0      	b.n	8005fae <HAL_TIM_IC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602c:	f1b8 0f08 	cmp.w	r8, #8
 8006030:	bf0b      	itete	eq
 8006032:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
 8006036:	f885 2041 	strbne.w	r2, [r5, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800603a:	f885 2046 	strbeq.w	r2, [r5, #70]	; 0x46
 800603e:	f885 2047 	strbne.w	r2, [r5, #71]	; 0x47
 8006042:	e7b4      	b.n	8005fae <HAL_TIM_IC_Start_DMA+0x76>
  switch (Channel)
 8006044:	f1b8 0f0c 	cmp.w	r8, #12
 8006048:	d1c3      	bne.n	8005fd2 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800604a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800604e:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006050:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <HAL_TIM_IC_Start_DMA+0x1c0>)
 8006052:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006054:	4a29      	ldr	r2, [pc, #164]	; (80060fc <HAL_TIM_IC_Start_DMA+0x1c4>)
 8006056:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006058:	3140      	adds	r1, #64	; 0x40
 800605a:	463a      	mov	r2, r7
 800605c:	f7fd f90b 	bl	8003276 <HAL_DMA_Start_IT>
 8006060:	4604      	mov	r4, r0
 8006062:	2800      	cmp	r0, #0
 8006064:	f47f af7b 	bne.w	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006068:	682a      	ldr	r2, [r5, #0]
 800606a:	68d3      	ldr	r3, [r2, #12]
 800606c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006070:	e012      	b.n	8006098 <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006072:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <HAL_TIM_IC_Start_DMA+0x1bc>)
 8006076:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_TIM_IC_Start_DMA+0x1c0>)
 800607a:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_TIM_IC_Start_DMA+0x1c4>)
 800607e:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006080:	3134      	adds	r1, #52	; 0x34
 8006082:	463a      	mov	r2, r7
 8006084:	f7fd f8f7 	bl	8003276 <HAL_DMA_Start_IT>
 8006088:	4604      	mov	r4, r0
 800608a:	2800      	cmp	r0, #0
 800608c:	f47f af67 	bne.w	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006090:	682a      	ldr	r2, [r5, #0]
 8006092:	68d3      	ldr	r3, [r2, #12]
 8006094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006098:	60d3      	str	r3, [r2, #12]
      break;
 800609a:	e79a      	b.n	8005fd2 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800609c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <HAL_TIM_IC_Start_DMA+0x1bc>)
 80060a0:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060a2:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <HAL_TIM_IC_Start_DMA+0x1c0>)
 80060a4:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <HAL_TIM_IC_Start_DMA+0x1c4>)
 80060a8:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80060aa:	3138      	adds	r1, #56	; 0x38
 80060ac:	463a      	mov	r2, r7
 80060ae:	f7fd f8e2 	bl	8003276 <HAL_DMA_Start_IT>
 80060b2:	4604      	mov	r4, r0
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f47f af52 	bne.w	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80060ba:	682a      	ldr	r2, [r5, #0]
 80060bc:	68d3      	ldr	r3, [r2, #12]
 80060be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060c2:	e7e9      	b.n	8006098 <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80060c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80060c6:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <HAL_TIM_IC_Start_DMA+0x1bc>)
 80060c8:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <HAL_TIM_IC_Start_DMA+0x1c0>)
 80060cc:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80060ce:	4a0b      	ldr	r2, [pc, #44]	; (80060fc <HAL_TIM_IC_Start_DMA+0x1c4>)
 80060d0:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80060d2:	313c      	adds	r1, #60	; 0x3c
 80060d4:	463a      	mov	r2, r7
 80060d6:	f7fd f8ce 	bl	8003276 <HAL_DMA_Start_IT>
 80060da:	4604      	mov	r4, r0
 80060dc:	2800      	cmp	r0, #0
 80060de:	f47f af3e 	bne.w	8005f5e <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80060e2:	682a      	ldr	r2, [r5, #0]
 80060e4:	68d3      	ldr	r3, [r2, #12]
 80060e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060ea:	e7d5      	b.n	8006098 <HAL_TIM_IC_Start_DMA+0x160>
    return HAL_BUSY;
 80060ec:	4634      	mov	r4, r6
 80060ee:	e737      	b.n	8005f60 <HAL_TIM_IC_Start_DMA+0x28>
 80060f0:	40000400 	.word	0x40000400
 80060f4:	08005445 	.word	0x08005445
 80060f8:	080054c1 	.word	0x080054c1
 80060fc:	08005643 	.word	0x08005643

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	f04f 0302 	mov.w	r3, #2
 800610c:	d02e      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x6c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006112:	6803      	ldr	r3, [r0, #0]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006114:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8006116:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006118:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800611a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006124:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006126:	d016      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006128:	4c11      	ldr	r4, [pc, #68]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800612a:	42a3      	cmp	r3, r4
 800612c:	d013      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800612e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006132:	42a3      	cmp	r3, r4
 8006134:	d00f      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006136:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800613a:	42a3      	cmp	r3, r4
 800613c:	d00b      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800613e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006142:	42a3      	cmp	r3, r4
 8006144:	d007      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006146:	f504 3494 	add.w	r4, r4, #75776	; 0x12800
 800614a:	42a3      	cmp	r3, r4
 800614c:	d003      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800614e:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8006152:	42a3      	cmp	r3, r4
 8006154:	d104      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006156:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006160:	2301      	movs	r3, #1
 8006162:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006166:	2300      	movs	r3, #0
 8006168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800616c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800616e:	bd30      	pop	{r4, r5, pc}
 8006170:	40000400 	.word	0x40000400

08006174 <HAL_TIMEx_CommutCallback>:
 8006174:	4770      	bx	lr

08006176 <HAL_TIMEx_BreakCallback>:
 8006176:	4770      	bx	lr

08006178 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006178:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800617a:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800617e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006182:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006186:	4618      	mov	r0, r3
 8006188:	4770      	bx	lr

0800618a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800618a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800618e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006192:	045b      	lsls	r3, r3, #17
 8006194:	0c5b      	lsrs	r3, r3, #17
 8006196:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800619a:	2000      	movs	r0, #0
 800619c:	4770      	bx	lr

0800619e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800619e:	b084      	sub	sp, #16
 80061a0:	b510      	push	{r4, lr}
 80061a2:	ac03      	add	r4, sp, #12
 80061a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80061b8:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 80061ba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80061be:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	4770      	bx	lr
	...

080061c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061ca:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 80061ce:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061d0:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 80061d4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80061d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061dc:	0412      	lsls	r2, r2, #16
 80061de:	4673      	mov	r3, lr
 80061e0:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80061e2:	2d03      	cmp	r5, #3
 80061e4:	d84c      	bhi.n	8006280 <USB_ActivateEndpoint+0xb8>
 80061e6:	e8df f005 	tbb	[pc, r5]
 80061ea:	4802      	.short	0x4802
 80061ec:	4446      	.short	0x4446
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80061f2:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061f4:	f248 0780 	movw	r7, #32896	; 0x8080
 80061f8:	433a      	orrs	r2, r7
 80061fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061fe:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8006202:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8006470 <USB_ActivateEndpoint+0x2a8>
 8006206:	b2b6      	uxth	r6, r6
 8006208:	ea06 060c 	and.w	r6, r6, ip
 800620c:	ea46 060e 	orr.w	r6, r6, lr
 8006210:	433e      	orrs	r6, r7
 8006212:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 8006216:	7b0a      	ldrb	r2, [r1, #12]
 8006218:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
 800621c:	2a00      	cmp	r2, #0
 800621e:	d17c      	bne.n	800631a <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006220:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 8006222:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006224:	0852      	lsrs	r2, r2, #1
 8006226:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 8006228:	b366      	cbz	r6, 8006284 <USB_ActivateEndpoint+0xbc>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800622a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800622e:	fa1e fe81 	uxtah	lr, lr, r1
 8006232:	f8ae 2400 	strh.w	r2, [lr, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006236:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800623a:	0656      	lsls	r6, r2, #25
 800623c:	d50a      	bpl.n	8006254 <USB_ActivateEndpoint+0x8c>
 800623e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006242:	b292      	uxth	r2, r2
 8006244:	ea02 020c 	and.w	r2, r2, ip
 8006248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800624c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006250:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006254:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006258:	4983      	ldr	r1, [pc, #524]	; (8006468 <USB_ActivateEndpoint+0x2a0>)
 800625a:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 800625c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800625e:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8006262:	d001      	beq.n	8006268 <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006264:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800626c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006270:	e0b1      	b.n	80063d6 <USB_ActivateEndpoint+0x20e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006272:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006276:	2400      	movs	r4, #0
      break;
 8006278:	e7bc      	b.n	80061f4 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800627a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800627e:	e7fa      	b.n	8006276 <USB_ActivateEndpoint+0xae>
  switch (ep->type)
 8006280:	2401      	movs	r4, #1
 8006282:	e7b7      	b.n	80061f4 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006284:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006288:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800628a:	fa1e f585 	uxtah	r5, lr, r5
 800628e:	f8a5 2408 	strh.w	r2, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006292:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006296:	fa1e fe82 	uxtah	lr, lr, r2
 800629a:	bb69      	cbnz	r1, 80062f8 <USB_ActivateEndpoint+0x130>
 800629c:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 80062a0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80062a4:	0412      	lsls	r2, r2, #16
 80062a6:	0c12      	lsrs	r2, r2, #16
 80062a8:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
 80062ac:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 80062b0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80062b4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80062c2:	0457      	lsls	r7, r2, #17
 80062c4:	d50d      	bpl.n	80062e2 <USB_ActivateEndpoint+0x11a>
 80062c6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80062ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80062ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062d2:	0412      	lsls	r2, r2, #16
 80062d4:	0c12      	lsrs	r2, r2, #16
 80062d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80062da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80062e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062ee:	0412      	lsls	r2, r2, #16
 80062f0:	0c12      	lsrs	r2, r2, #16
 80062f2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80062f6:	e7b7      	b.n	8006268 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062f8:	293e      	cmp	r1, #62	; 0x3e
 80062fa:	d805      	bhi.n	8006308 <USB_ActivateEndpoint+0x140>
 80062fc:	084a      	lsrs	r2, r1, #1
 80062fe:	07c9      	lsls	r1, r1, #31
 8006300:	bf48      	it	mi
 8006302:	3201      	addmi	r2, #1
 8006304:	0292      	lsls	r2, r2, #10
 8006306:	e7d7      	b.n	80062b8 <USB_ActivateEndpoint+0xf0>
 8006308:	094d      	lsrs	r5, r1, #5
 800630a:	06ca      	lsls	r2, r1, #27
 800630c:	4a57      	ldr	r2, [pc, #348]	; (800646c <USB_ActivateEndpoint+0x2a4>)
 800630e:	bf08      	it	eq
 8006310:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006314:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8006318:	e7ce      	b.n	80062b8 <USB_ActivateEndpoint+0xf0>
    if (ep->type == EP_TYPE_BULK)
 800631a:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800631c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8006320:	d15d      	bne.n	80063de <USB_ActivateEndpoint+0x216>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006322:	b292      	uxth	r2, r2
 8006324:	ea02 020c 	and.w	r2, r2, ip
 8006328:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800632c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006330:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006334:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8006338:	890a      	ldrh	r2, [r1, #8]
 800633a:	fa1e f686 	uxtah	r6, lr, r6
 800633e:	0852      	lsrs	r2, r2, #1
 8006340:	0052      	lsls	r2, r2, #1
 8006342:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 8006346:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800634a:	fa1e fe82 	uxtah	lr, lr, r2
 800634e:	894a      	ldrh	r2, [r1, #10]
 8006350:	0852      	lsrs	r2, r2, #1
 8006352:	0052      	lsls	r2, r2, #1
 8006354:	f8ae 2408 	strh.w	r2, [lr, #1032]	; 0x408
    if (ep->is_in == 0U)
 8006358:	784a      	ldrb	r2, [r1, #1]
 800635a:	2a00      	cmp	r2, #0
 800635c:	d147      	bne.n	80063ee <USB_ActivateEndpoint+0x226>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800635e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006362:	0456      	lsls	r6, r2, #17
 8006364:	d50d      	bpl.n	8006382 <USB_ActivateEndpoint+0x1ba>
 8006366:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800636a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800636e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006372:	0412      	lsls	r2, r2, #16
 8006374:	0c12      	lsrs	r2, r2, #16
 8006376:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800637a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800637e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006382:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006386:	0655      	lsls	r5, r2, #25
 8006388:	d50d      	bpl.n	80063a6 <USB_ActivateEndpoint+0x1de>
 800638a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800638e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006392:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006396:	0412      	lsls	r2, r2, #16
 8006398:	0c12      	lsrs	r2, r2, #16
 800639a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800639e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80063a2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063b2:	0412      	lsls	r2, r2, #16
 80063b4:	0c12      	lsrs	r2, r2, #16
 80063b6:	f248 0180 	movw	r1, #32896	; 0x8080
 80063ba:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80063be:	430a      	orrs	r2, r1
 80063c0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d0:	0412      	lsls	r2, r2, #16
 80063d2:	0c12      	lsrs	r2, r2, #16
 80063d4:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return ret;
}
 80063da:	4620      	mov	r0, r4
 80063dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063de:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80063e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063e6:	0412      	lsls	r2, r2, #16
 80063e8:	0c12      	lsrs	r2, r2, #16
 80063ea:	433a      	orrs	r2, r7
 80063ec:	e7a0      	b.n	8006330 <USB_ActivateEndpoint+0x168>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063f2:	0451      	lsls	r1, r2, #17
 80063f4:	d50d      	bpl.n	8006412 <USB_ActivateEndpoint+0x24a>
 80063f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80063fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006402:	0412      	lsls	r2, r2, #16
 8006404:	0c12      	lsrs	r2, r2, #16
 8006406:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800640a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800640e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006412:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006416:	0652      	lsls	r2, r2, #25
 8006418:	d50d      	bpl.n	8006436 <USB_ActivateEndpoint+0x26e>
 800641a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800641e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006426:	0412      	lsls	r2, r2, #16
 8006428:	0c12      	lsrs	r2, r2, #16
 800642a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800642e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006432:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006436:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800643a:	490b      	ldr	r1, [pc, #44]	; (8006468 <USB_ActivateEndpoint+0x2a0>)
 800643c:	b292      	uxth	r2, r2
 800643e:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8006440:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006442:	bf18      	it	ne
 8006444:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006450:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006454:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800645c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006460:	0412      	lsls	r2, r2, #16
 8006462:	0c12      	lsrs	r2, r2, #16
 8006464:	e700      	b.n	8006268 <USB_ActivateEndpoint+0xa0>
 8006466:	bf00      	nop
 8006468:	ffff8fbf 	.word	0xffff8fbf
 800646c:	ffff8000 	.word	0xffff8000
 8006470:	ffff8f8f 	.word	0xffff8f8f

08006474 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8006474:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006476:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8006478:	7b09      	ldrb	r1, [r1, #12]
 800647a:	bbd9      	cbnz	r1, 80064f4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 800647c:	b30a      	cbz	r2, 80064c2 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800647e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006482:	0651      	lsls	r1, r2, #25
 8006484:	d50d      	bpl.n	80064a2 <USB_DeactivateEndpoint+0x2e>
 8006486:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800648a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800648e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006492:	0412      	lsls	r2, r2, #16
 8006494:	0c12      	lsrs	r2, r2, #16
 8006496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800649e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064a2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80064a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80064aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064ae:	0412      	lsls	r2, r2, #16
 80064b0:	0c12      	lsrs	r2, r2, #16
 80064b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064ba:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 80064be:	2000      	movs	r0, #0
 80064c0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80064c6:	0452      	lsls	r2, r2, #17
 80064c8:	d50d      	bpl.n	80064e6 <USB_DeactivateEndpoint+0x72>
 80064ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80064ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80064d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064d6:	0412      	lsls	r2, r2, #16
 80064d8:	0c12      	lsrs	r2, r2, #16
 80064da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80064de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064e2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80064ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064f2:	e7dc      	b.n	80064ae <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	d148      	bne.n	800658a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80064fc:	0451      	lsls	r1, r2, #17
 80064fe:	d50d      	bpl.n	800651c <USB_DeactivateEndpoint+0xa8>
 8006500:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006504:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006508:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800650c:	0412      	lsls	r2, r2, #16
 800650e:	0c12      	lsrs	r2, r2, #16
 8006510:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006518:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800651c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006520:	0652      	lsls	r2, r2, #25
 8006522:	d50d      	bpl.n	8006540 <USB_DeactivateEndpoint+0xcc>
 8006524:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006528:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800652c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006530:	0412      	lsls	r2, r2, #16
 8006532:	0c12      	lsrs	r2, r2, #16
 8006534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006538:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800653c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006540:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006544:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006548:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800654c:	0412      	lsls	r2, r2, #16
 800654e:	0c12      	lsrs	r2, r2, #16
 8006550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006554:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006558:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800655c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006564:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006568:	0412      	lsls	r2, r2, #16
 800656a:	0c12      	lsrs	r2, r2, #16
 800656c:	f248 0180 	movw	r1, #32896	; 0x8080
 8006570:	430a      	orrs	r2, r1
 8006572:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006576:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800657a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006582:	0412      	lsls	r2, r2, #16
 8006584:	0c12      	lsrs	r2, r2, #16
 8006586:	430a      	orrs	r2, r1
 8006588:	e797      	b.n	80064ba <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800658a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800658e:	0451      	lsls	r1, r2, #17
 8006590:	d50d      	bpl.n	80065ae <USB_DeactivateEndpoint+0x13a>
 8006592:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006596:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800659a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800659e:	0412      	lsls	r2, r2, #16
 80065a0:	0c12      	lsrs	r2, r2, #16
 80065a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80065a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80065b2:	0652      	lsls	r2, r2, #25
 80065b4:	d50d      	bpl.n	80065d2 <USB_DeactivateEndpoint+0x15e>
 80065b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80065ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80065be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80065c2:	0412      	lsls	r2, r2, #16
 80065c4:	0c12      	lsrs	r2, r2, #16
 80065c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80065ce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80065d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80065d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80065da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80065de:	0412      	lsls	r2, r2, #16
 80065e0:	0c12      	lsrs	r2, r2, #16
 80065e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80065e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80065f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80065f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fa:	0412      	lsls	r2, r2, #16
 80065fc:	0c12      	lsrs	r2, r2, #16
 80065fe:	f248 0180 	movw	r1, #32896	; 0x8080
 8006602:	430a      	orrs	r2, r1
 8006604:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006608:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800660c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006610:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006614:	e7b5      	b.n	8006582 <USB_DeactivateEndpoint+0x10e>

08006616 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006616:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006618:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800661a:	b18b      	cbz	r3, 8006640 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800661c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006638:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800663c:	2000      	movs	r0, #0
 800663e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006640:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	0c1b      	lsrs	r3, r3, #16
 8006650:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006654:	e7ec      	b.n	8006630 <USB_EPSetStall+0x1a>

08006656 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006656:	7b0b      	ldrb	r3, [r1, #12]
 8006658:	bb3b      	cbnz	r3, 80066aa <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800665a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800665c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800665e:	b333      	cbz	r3, 80066ae <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006660:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006664:	065b      	lsls	r3, r3, #25
 8006666:	d50d      	bpl.n	8006684 <USB_EPClearStall+0x2e>
 8006668:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006680:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006684:	78cb      	ldrb	r3, [r1, #3]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d00f      	beq.n	80066aa <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800668a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800669e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80066aa:	2000      	movs	r0, #0
 80066ac:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066b2:	045b      	lsls	r3, r3, #17
 80066b4:	d50d      	bpl.n	80066d2 <USB_EPClearStall+0x7c>
 80066b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80066e6:	e7da      	b.n	800669e <USB_EPClearStall+0x48>

080066e8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80066e8:	b911      	cbnz	r1, 80066f0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066ea:	2380      	movs	r3, #128	; 0x80
 80066ec:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80066f0:	2000      	movs	r0, #0
 80066f2:	4770      	bx	lr

080066f4 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80066f4:	2000      	movs	r0, #0
 80066f6:	4770      	bx	lr

080066f8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066f8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80066fc:	b280      	uxth	r0, r0
 80066fe:	4770      	bx	lr

08006700 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006700:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006704:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8006710:	429a      	cmp	r2, r3
 8006712:	d100      	bne.n	8006716 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8006714:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006716:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800671a:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800671e:	e7f7      	b.n	8006710 <USB_WritePMA+0x10>

08006720 <USB_EPStartXfer>:
{
 8006720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006724:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006726:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 8006728:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800672a:	2901      	cmp	r1, #1
{
 800672c:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800672e:	f040 811e 	bne.w	800696e <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 8006732:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006736:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006738:	6961      	ldr	r1, [r4, #20]
 800673a:	4576      	cmp	r6, lr
 800673c:	bf28      	it	cs
 800673e:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8006740:	bb12      	cbnz	r2, 8006788 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006742:	b2b6      	uxth	r6, r6
 8006744:	88e2      	ldrh	r2, [r4, #6]
 8006746:	4633      	mov	r3, r6
 8006748:	f7ff ffda 	bl	8006700 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800674c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006750:	7823      	ldrb	r3, [r4, #0]
 8006752:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8006756:	fa11 f282 	uxtah	r2, r1, r2
 800675a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800675e:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006760:	7822      	ldrb	r2, [r4, #0]
 8006762:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006782:	2000      	movs	r0, #0
}
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8006788:	78e2      	ldrb	r2, [r4, #3]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800678a:	f894 c000 	ldrb.w	ip, [r4]
        if (ep->xfer_len_db > ep->maxpacket)
 800678e:	6a23      	ldr	r3, [r4, #32]
      if (ep->type == EP_TYPE_BULK)
 8006790:	2a02      	cmp	r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006792:	ea4f 170c 	mov.w	r7, ip, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8006796:	f040 80d4 	bne.w	8006942 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800679a:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800679c:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80067a0:	f080 80b9 	bcs.w	8006916 <USB_EPStartXfer+0x1f6>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80067a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067ac:	0412      	lsls	r2, r2, #16
 80067ae:	0c12      	lsrs	r2, r2, #16
 80067b0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80067b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067b8:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067bc:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067c0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 80067c4:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067c6:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 80067ca:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067cc:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067ce:	d052      	beq.n	8006876 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067d0:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80067d4:	fa1c f282 	uxtah	r2, ip, r2
 80067d8:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067da:	8962      	ldrh	r2, [r4, #10]
 80067dc:	f7ff ff90 	bl	8006700 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80067e0:	6a22      	ldr	r2, [r4, #32]
 80067e2:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80067e4:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067e6:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 80067e8:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80067ea:	bf8c      	ite	hi
 80067ec:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80067ee:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 80067f0:	4431      	add	r1, r6
 80067f2:	bf88      	it	hi
 80067f4:	4632      	movhi	r2, r6
 80067f6:	6223      	str	r3, [r4, #32]
 80067f8:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067fa:	b293      	uxth	r3, r2
 80067fc:	bb70      	cbnz	r0, 800685c <USB_EPStartXfer+0x13c>
 80067fe:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8006802:	7820      	ldrb	r0, [r4, #0]
 8006804:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8006808:	fa17 f686 	uxtah	r6, r7, r6
 800680c:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 8006810:	b96a      	cbnz	r2, 800682e <USB_EPStartXfer+0x10e>
 8006812:	8832      	ldrh	r2, [r6, #0]
 8006814:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006818:	0412      	lsls	r2, r2, #16
 800681a:	0c12      	lsrs	r2, r2, #16
 800681c:	8032      	strh	r2, [r6, #0]
 800681e:	8832      	ldrh	r2, [r6, #0]
 8006820:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006824:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006828:	b292      	uxth	r2, r2
 800682a:	8032      	strh	r2, [r6, #0]
 800682c:	e008      	b.n	8006840 <USB_EPStartXfer+0x120>
 800682e:	2a3e      	cmp	r2, #62	; 0x3e
 8006830:	d80b      	bhi.n	800684a <USB_EPStartXfer+0x12a>
 8006832:	0850      	lsrs	r0, r2, #1
 8006834:	07d7      	lsls	r7, r2, #31
 8006836:	bf48      	it	mi
 8006838:	3001      	addmi	r0, #1
 800683a:	0280      	lsls	r0, r0, #10
 800683c:	b280      	uxth	r0, r0
 800683e:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006840:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006842:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006844:	f7ff ff5c 	bl	8006700 <USB_WritePMA>
 8006848:	e78a      	b.n	8006760 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800684a:	0950      	lsrs	r0, r2, #5
 800684c:	06d2      	lsls	r2, r2, #27
 800684e:	4aad      	ldr	r2, [pc, #692]	; (8006b04 <USB_EPStartXfer+0x3e4>)
 8006850:	bf08      	it	eq
 8006852:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006856:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800685a:	e7e5      	b.n	8006828 <USB_EPStartXfer+0x108>
 800685c:	2801      	cmp	r0, #1
 800685e:	d1ef      	bne.n	8006840 <USB_EPStartXfer+0x120>
 8006860:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006864:	7820      	ldrb	r0, [r4, #0]
 8006866:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800686a:	fa16 f282 	uxtah	r2, r6, r2
 800686e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006872:	8013      	strh	r3, [r2, #0]
 8006874:	e7e4      	b.n	8006840 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006876:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800687a:	fa1c f282 	uxtah	r2, ip, r2
 800687e:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006880:	8922      	ldrh	r2, [r4, #8]
 8006882:	f7ff ff3d 	bl	8006700 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006886:	6a22      	ldr	r2, [r4, #32]
 8006888:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800688a:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800688c:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800688e:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8006890:	bf8c      	ite	hi
 8006892:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8006894:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 8006896:	4431      	add	r1, r6
 8006898:	bf88      	it	hi
 800689a:	4632      	movhi	r2, r6
 800689c:	6223      	str	r3, [r4, #32]
 800689e:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068a0:	b293      	uxth	r3, r2
 80068a2:	bb58      	cbnz	r0, 80068fc <USB_EPStartXfer+0x1dc>
 80068a4:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80068a8:	7820      	ldrb	r0, [r4, #0]
 80068aa:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80068ae:	fa17 f686 	uxtah	r6, r7, r6
 80068b2:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 80068b6:	b96a      	cbnz	r2, 80068d4 <USB_EPStartXfer+0x1b4>
 80068b8:	8832      	ldrh	r2, [r6, #0]
 80068ba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80068be:	0412      	lsls	r2, r2, #16
 80068c0:	0c12      	lsrs	r2, r2, #16
 80068c2:	8032      	strh	r2, [r6, #0]
 80068c4:	8832      	ldrh	r2, [r6, #0]
 80068c6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80068ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80068ce:	b292      	uxth	r2, r2
 80068d0:	8032      	strh	r2, [r6, #0]
 80068d2:	e008      	b.n	80068e6 <USB_EPStartXfer+0x1c6>
 80068d4:	2a3e      	cmp	r2, #62	; 0x3e
 80068d6:	d808      	bhi.n	80068ea <USB_EPStartXfer+0x1ca>
 80068d8:	0850      	lsrs	r0, r2, #1
 80068da:	07d7      	lsls	r7, r2, #31
 80068dc:	bf48      	it	mi
 80068de:	3001      	addmi	r0, #1
 80068e0:	0280      	lsls	r0, r0, #10
 80068e2:	b280      	uxth	r0, r0
 80068e4:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e6:	8962      	ldrh	r2, [r4, #10]
 80068e8:	e7ab      	b.n	8006842 <USB_EPStartXfer+0x122>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068ea:	0950      	lsrs	r0, r2, #5
 80068ec:	06d2      	lsls	r2, r2, #27
 80068ee:	4a85      	ldr	r2, [pc, #532]	; (8006b04 <USB_EPStartXfer+0x3e4>)
 80068f0:	bf08      	it	eq
 80068f2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80068f6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80068fa:	e7e8      	b.n	80068ce <USB_EPStartXfer+0x1ae>
 80068fc:	2801      	cmp	r0, #1
 80068fe:	d1f2      	bne.n	80068e6 <USB_EPStartXfer+0x1c6>
 8006900:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006904:	7820      	ldrb	r0, [r4, #0]
 8006906:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800690a:	fa16 f282 	uxtah	r2, r6, r2
 800690e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006912:	8013      	strh	r3, [r2, #0]
 8006914:	e7e7      	b.n	80068e6 <USB_EPStartXfer+0x1c6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006916:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800691a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800691e:	0412      	lsls	r2, r2, #16
 8006920:	0c12      	lsrs	r2, r2, #16
 8006922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800692a:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800692e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006932:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8006936:	fa16 f282 	uxtah	r2, r6, r2
 800693a:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800693c:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800693e:	8922      	ldrh	r2, [r4, #8]
 8006940:	e780      	b.n	8006844 <USB_EPStartXfer+0x124>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006942:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 8006946:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006948:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800694c:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800694e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006952:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006954:	d006      	beq.n	8006964 <USB_EPStartXfer+0x244>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006956:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800695a:	fa16 f282 	uxtah	r2, r6, r2
 800695e:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006960:	8962      	ldrh	r2, [r4, #10]
 8006962:	e76f      	b.n	8006844 <USB_EPStartXfer+0x124>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006964:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8006968:	fa16 f282 	uxtah	r2, r6, r2
 800696c:	e7e6      	b.n	800693c <USB_EPStartXfer+0x21c>
    if (ep->doublebuffer == 0U)
 800696e:	b9f2      	cbnz	r2, 80069ae <USB_EPStartXfer+0x28e>
      if (ep->xfer_len > ep->maxpacket)
 8006970:	69a3      	ldr	r3, [r4, #24]
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8006976:	bf88      	it	hi
 8006978:	1a5a      	subhi	r2, r3, r1
 800697a:	61a2      	str	r2, [r4, #24]
 800697c:	bf88      	it	hi
 800697e:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006980:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8006984:	7822      	ldrb	r2, [r4, #0]
 8006986:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800698a:	fa10 f181 	uxtah	r1, r0, r1
 800698e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80c1 	beq.w	8006b1a <USB_EPStartXfer+0x3fa>
 8006998:	2b3e      	cmp	r3, #62	; 0x3e
 800699a:	f200 80cc 	bhi.w	8006b36 <USB_EPStartXfer+0x416>
 800699e:	085a      	lsrs	r2, r3, #1
 80069a0:	07d8      	lsls	r0, r3, #31
 80069a2:	bf48      	it	mi
 80069a4:	3201      	addmi	r2, #1
 80069a6:	0292      	lsls	r2, r2, #10
 80069a8:	b292      	uxth	r2, r2
 80069aa:	800a      	strh	r2, [r1, #0]
 80069ac:	e04a      	b.n	8006a44 <USB_EPStartXfer+0x324>
      if (ep->type == EP_TYPE_BULK)
 80069ae:	78e3      	ldrb	r3, [r4, #3]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d17b      	bne.n	8006aac <USB_EPStartXfer+0x38c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80069b4:	bb61      	cbnz	r1, 8006a10 <USB_EPStartXfer+0x2f0>
 80069b6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80069ba:	7823      	ldrb	r3, [r4, #0]
 80069bc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80069c0:	fa12 f181 	uxtah	r1, r2, r1
 80069c4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d146      	bne.n	8006a5c <USB_EPStartXfer+0x33c>
 80069ce:	880a      	ldrh	r2, [r1, #0]
 80069d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80069d4:	0412      	lsls	r2, r2, #16
 80069d6:	0c12      	lsrs	r2, r2, #16
 80069d8:	800a      	strh	r2, [r1, #0]
 80069da:	880a      	ldrh	r2, [r1, #0]
 80069dc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80069e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80069e4:	b292      	uxth	r2, r2
 80069e6:	800a      	strh	r2, [r1, #0]
 80069e8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80069ec:	7822      	ldrb	r2, [r4, #0]
 80069ee:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80069f2:	fa10 f181 	uxtah	r1, r0, r1
 80069f6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03f      	beq.n	8006a7e <USB_EPStartXfer+0x35e>
 80069fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006a00:	d84b      	bhi.n	8006a9a <USB_EPStartXfer+0x37a>
 8006a02:	085a      	lsrs	r2, r3, #1
 8006a04:	07d8      	lsls	r0, r3, #31
 8006a06:	bf48      	it	mi
 8006a08:	3201      	addmi	r2, #1
 8006a0a:	0292      	lsls	r2, r2, #10
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	800a      	strh	r2, [r1, #0]
        if (ep->xfer_count != 0U)
 8006a10:	69e3      	ldr	r3, [r4, #28]
 8006a12:	b1bb      	cbz	r3, 8006a44 <USB_EPStartXfer+0x324>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a14:	7822      	ldrb	r2, [r4, #0]
 8006a16:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a1a:	f244 0340 	movw	r3, #16448	; 0x4040
 8006a1e:	ea03 0001 	and.w	r0, r3, r1
 8006a22:	438b      	bics	r3, r1
 8006a24:	d000      	beq.n	8006a28 <USB_EPStartXfer+0x308>
 8006a26:	b968      	cbnz	r0, 8006a44 <USB_EPStartXfer+0x324>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a28:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a40:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a44:	7822      	ldrb	r2, [r4, #0]
 8006a46:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006a5a:	e68c      	b.n	8006776 <USB_EPStartXfer+0x56>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5e:	d805      	bhi.n	8006a6c <USB_EPStartXfer+0x34c>
 8006a60:	085a      	lsrs	r2, r3, #1
 8006a62:	07df      	lsls	r7, r3, #31
 8006a64:	bf48      	it	mi
 8006a66:	3201      	addmi	r2, #1
 8006a68:	0292      	lsls	r2, r2, #10
 8006a6a:	e7bb      	b.n	80069e4 <USB_EPStartXfer+0x2c4>
 8006a6c:	0958      	lsrs	r0, r3, #5
 8006a6e:	4a25      	ldr	r2, [pc, #148]	; (8006b04 <USB_EPStartXfer+0x3e4>)
 8006a70:	06de      	lsls	r6, r3, #27
 8006a72:	bf08      	it	eq
 8006a74:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006a78:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8006a7c:	e7b2      	b.n	80069e4 <USB_EPStartXfer+0x2c4>
 8006a7e:	880b      	ldrh	r3, [r1, #0]
 8006a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	0c1b      	lsrs	r3, r3, #16
 8006a88:	800b      	strh	r3, [r1, #0]
 8006a8a:	880b      	ldrh	r3, [r1, #0]
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	800b      	strh	r3, [r1, #0]
 8006a98:	e7ba      	b.n	8006a10 <USB_EPStartXfer+0x2f0>
 8006a9a:	095a      	lsrs	r2, r3, #5
 8006a9c:	06db      	lsls	r3, r3, #27
 8006a9e:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <USB_EPStartXfer+0x3e4>)
 8006aa0:	bf08      	it	eq
 8006aa2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006aa6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006aaa:	e7f3      	b.n	8006a94 <USB_EPStartXfer+0x374>
      else if (ep->type == EP_TYPE_ISOC)
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d14b      	bne.n	8006b48 <USB_EPStartXfer+0x428>
        if (ep->xfer_len > ep->maxpacket)
 8006ab0:	69a3      	ldr	r3, [r4, #24]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 8006ab6:	bf8a      	itet	hi
 8006ab8:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 8006aba:	2000      	movls	r0, #0
 8006abc:	4613      	movhi	r3, r2
 8006abe:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d1bf      	bne.n	8006a44 <USB_EPStartXfer+0x324>
 8006ac4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8006ac8:	7822      	ldrb	r2, [r4, #0]
 8006aca:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8006ace:	fa10 f181 	uxtah	r1, r0, r1
 8006ad2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8006ad6:	b96b      	cbnz	r3, 8006af4 <USB_EPStartXfer+0x3d4>
 8006ad8:	880a      	ldrh	r2, [r1, #0]
 8006ada:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006ade:	0412      	lsls	r2, r2, #16
 8006ae0:	0c12      	lsrs	r2, r2, #16
 8006ae2:	800a      	strh	r2, [r1, #0]
 8006ae4:	880a      	ldrh	r2, [r1, #0]
 8006ae6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006aea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006aee:	b292      	uxth	r2, r2
 8006af0:	800a      	strh	r2, [r1, #0]
 8006af2:	e745      	b.n	8006980 <USB_EPStartXfer+0x260>
 8006af4:	2b3e      	cmp	r3, #62	; 0x3e
 8006af6:	d807      	bhi.n	8006b08 <USB_EPStartXfer+0x3e8>
 8006af8:	085a      	lsrs	r2, r3, #1
 8006afa:	07df      	lsls	r7, r3, #31
 8006afc:	bf48      	it	mi
 8006afe:	3201      	addmi	r2, #1
 8006b00:	0292      	lsls	r2, r2, #10
 8006b02:	e7f4      	b.n	8006aee <USB_EPStartXfer+0x3ce>
 8006b04:	ffff8000 	.word	0xffff8000
 8006b08:	0958      	lsrs	r0, r3, #5
 8006b0a:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <USB_EPStartXfer+0x42c>)
 8006b0c:	06de      	lsls	r6, r3, #27
 8006b0e:	bf08      	it	eq
 8006b10:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006b14:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8006b18:	e7e9      	b.n	8006aee <USB_EPStartXfer+0x3ce>
 8006b1a:	880b      	ldrh	r3, [r1, #0]
 8006b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	800b      	strh	r3, [r1, #0]
 8006b26:	880b      	ldrh	r3, [r1, #0]
 8006b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	800b      	strh	r3, [r1, #0]
 8006b34:	e786      	b.n	8006a44 <USB_EPStartXfer+0x324>
 8006b36:	095a      	lsrs	r2, r3, #5
 8006b38:	06db      	lsls	r3, r3, #27
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <USB_EPStartXfer+0x42c>)
 8006b3c:	bf08      	it	eq
 8006b3e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006b42:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006b46:	e7f3      	b.n	8006b30 <USB_EPStartXfer+0x410>
        return HAL_ERROR;
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e61b      	b.n	8006784 <USB_EPStartXfer+0x64>
 8006b4c:	ffff8000 	.word	0xffff8000

08006b50 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b50:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8006b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b5a:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8006b5c:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b5e:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8006b60:	462e      	mov	r6, r5
 8006b62:	3402      	adds	r4, #2
 8006b64:	b936      	cbnz	r6, 8006b74 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b66:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8006b68:	bf44      	itt	mi
 8006b6a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b6e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8006b74:	f837 0b04 	ldrh.w	r0, [r7], #4
 8006b78:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b7a:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b7e:	0a00      	lsrs	r0, r0, #8
 8006b80:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8006b84:	3e01      	subs	r6, #1
 8006b86:	e7ec      	b.n	8006b62 <USB_ReadPMA+0x12>

08006b88 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b88:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8006b8c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b8e:	b16b      	cbz	r3, 8006bac <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b90:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b94:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006b98:	28ff      	cmp	r0, #255	; 0xff
 8006b9a:	d007      	beq.n	8006bac <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006ba6:	23ff      	movs	r3, #255	; 0xff
 8006ba8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006bac:	2000      	movs	r0, #0
 8006bae:	bd10      	pop	{r4, pc}

08006bb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006bb0:	2343      	movs	r3, #67	; 0x43
 8006bb2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006bb4:	4800      	ldr	r0, [pc, #0]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006bb6:	4770      	bx	lr
 8006bb8:	20000044 	.word	0x20000044

08006bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006bbc:	2343      	movs	r3, #67	; 0x43
 8006bbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006bc0:	4800      	ldr	r0, [pc, #0]	; (8006bc4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8006bc2:	4770      	bx	lr
 8006bc4:	20000088 	.word	0x20000088

08006bc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bc8:	2343      	movs	r3, #67	; 0x43
 8006bca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006bcc:	4800      	ldr	r0, [pc, #0]	; (8006bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006bce:	4770      	bx	lr
 8006bd0:	200000d8 	.word	0x200000d8

08006bd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bd4:	230a      	movs	r3, #10
 8006bd6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006bd8:	4800      	ldr	r0, [pc, #0]	; (8006bdc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006bda:	4770      	bx	lr
 8006bdc:	200000cc 	.word	0x200000cc

08006be0 <USBD_CDC_DataOut>:
{
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006be8:	f000 fee6 	bl	80079b8 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8006bec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8006bf4:	b14b      	cbz	r3, 8006c0a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bf6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006bfa:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006c04:	4798      	blx	r3
    return USBD_OK;
 8006c06:	2000      	movs	r0, #0
}
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	e7fc      	b.n	8006c08 <USBD_CDC_DataOut+0x28>

08006c0e <USBD_CDC_DataIn>:
{
 8006c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c10:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8006c14:	b1d6      	cbz	r6, 8006c4c <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c16:	2214      	movs	r2, #20
 8006c18:	fb02 0201 	mla	r2, r2, r1, r0
 8006c1c:	69d4      	ldr	r4, [r2, #28]
 8006c1e:	b18c      	cbz	r4, 8006c44 <USBD_CDC_DataIn+0x36>
 8006c20:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006c24:	2728      	movs	r7, #40	; 0x28
 8006c26:	fb07 3501 	mla	r5, r7, r1, r3
 8006c2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006c2c:	fbb4 f5f3 	udiv	r5, r4, r3
 8006c30:	fb03 4415 	mls	r4, r3, r5, r4
 8006c34:	b934      	cbnz	r4, 8006c44 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8006c36:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c38:	4623      	mov	r3, r4
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	f000 feaa 	bl	8007994 <USBD_LL_Transmit>
    return USBD_OK;
 8006c40:	4620      	mov	r0, r4
}
 8006c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8006c44:	2000      	movs	r0, #0
 8006c46:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8006c4a:	e7fa      	b.n	8006c42 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8006c4c:	2002      	movs	r0, #2
 8006c4e:	e7f8      	b.n	8006c42 <USBD_CDC_DataIn+0x34>

08006c50 <USBD_CDC_Setup>:
{
 8006c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c54:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c56:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8006c5a:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c5e:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8006c62:	4605      	mov	r5, r0
 8006c64:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8006c66:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8006c6a:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	d028      	beq.n	8006cc2 <USBD_CDC_Setup+0x72>
 8006c70:	2c20      	cmp	r4, #32
 8006c72:	d142      	bne.n	8006cfa <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8006c74:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c76:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8006c78:	b1e4      	cbz	r4, 8006cb4 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8006c7a:	0612      	lsls	r2, r2, #24
 8006c7c:	d511      	bpl.n	8006ca2 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c7e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006c82:	4639      	mov	r1, r7
 8006c84:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c8e:	88f2      	ldrh	r2, [r6, #6]
 8006c90:	4639      	mov	r1, r7
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 fc48 	bl	8007528 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006c98:	4644      	mov	r4, r8
}
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	b003      	add	sp, #12
 8006c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8006ca2:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ca6:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006caa:	4622      	mov	r2, r4
 8006cac:	4639      	mov	r1, r7
 8006cae:	f000 fc50 	bl	8007552 <USBD_CtlPrepareRx>
 8006cb2:	e7f1      	b.n	8006c98 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cb4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006cb8:	4618      	mov	r0, r3
 8006cba:	6895      	ldr	r5, [r2, #8]
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	47a8      	blx	r5
 8006cc0:	e7eb      	b.n	8006c9a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8006cc2:	784b      	ldrb	r3, [r1, #1]
 8006cc4:	2b0a      	cmp	r3, #10
 8006cc6:	d00c      	beq.n	8006ce2 <USBD_CDC_Setup+0x92>
 8006cc8:	2b0b      	cmp	r3, #11
 8006cca:	d012      	beq.n	8006cf2 <USBD_CDC_Setup+0xa2>
 8006ccc:	b9ab      	cbnz	r3, 8006cfa <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d111      	bne.n	8006cfa <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cdc:	f000 fc24 	bl	8007528 <USBD_CtlSendData>
 8006ce0:	e7db      	b.n	8006c9a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d107      	bne.n	8006cfa <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cea:	2201      	movs	r2, #1
 8006cec:	f10d 0105 	add.w	r1, sp, #5
 8006cf0:	e7f4      	b.n	8006cdc <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cf2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d0cf      	beq.n	8006c9a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 fbec 	bl	80074da <USBD_CtlError>
          ret = USBD_FAIL;
 8006d02:	2402      	movs	r4, #2
          break;
 8006d04:	e7c9      	b.n	8006c9a <USBD_CDC_Setup+0x4a>

08006d06 <USBD_CDC_DeInit>:
{
 8006d06:	b538      	push	{r3, r4, r5, lr}
 8006d08:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d0a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d0c:	2181      	movs	r1, #129	; 0x81
 8006d0e:	f000 fe0a 	bl	8007926 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d12:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d14:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fe05 	bl	8007926 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d1c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d20:	2182      	movs	r1, #130	; 0x82
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fdff 	bl	8007926 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006d28:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d2c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8006d2e:	b14b      	cbz	r3, 8006d44 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d30:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d38:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8006d3c:	f000 fe44 	bl	80079c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d40:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8006d44:	2000      	movs	r0, #0
 8006d46:	bd38      	pop	{r3, r4, r5, pc}

08006d48 <USBD_CDC_Init>:
{
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d4c:	7c03      	ldrb	r3, [r0, #16]
{
 8006d4e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d50:	bbbb      	cbnz	r3, 8006dc2 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d56:	2202      	movs	r2, #2
 8006d58:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d5a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d5c:	f000 fdd7 	bl	800790e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d60:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d62:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d66:	4629      	mov	r1, r5
 8006d68:	2202      	movs	r2, #2
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fdcf 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d70:	2701      	movs	r7, #1
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d72:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d76:	2308      	movs	r3, #8
 8006d78:	2203      	movs	r2, #3
 8006d7a:	2182      	movs	r1, #130	; 0x82
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fdc6 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d82:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d88:	f000 fe1a 	bl	80079c0 <USBD_static_malloc>
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8006d92:	b340      	cbz	r0, 8006de6 <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d94:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hcdc->TxState = 0U;
 8006d98:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8006da0:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8006da4:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da8:	7c26      	ldrb	r6, [r4, #16]
 8006daa:	b99e      	cbnz	r6, 8006dd4 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dac:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db4:	4639      	mov	r1, r7
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fdf5 	bl	80079a6 <USBD_LL_PrepareReceive>
}
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dc8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dca:	f000 fda0 	bl	800790e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dce:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	e7c8      	b.n	8006d66 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dd4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fde2 	bl	80079a6 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006de2:	4646      	mov	r6, r8
 8006de4:	e7ea      	b.n	8006dbc <USBD_CDC_Init+0x74>
    ret = 1U;
 8006de6:	463e      	mov	r6, r7
 8006de8:	e7e8      	b.n	8006dbc <USBD_CDC_Init+0x74>

08006dea <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006dea:	b119      	cbz	r1, 8006df4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006dec:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8006df0:	2000      	movs	r0, #0
 8006df2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006df4:	2002      	movs	r0, #2
  }

  return ret;
}
 8006df6:	4770      	bx	lr

08006df8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006df8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8006dfc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8006dfe:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8006e06:	4770      	bx	lr

08006e08 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8006e08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8006e0c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8006e0e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8006e12:	4770      	bx	lr

08006e14 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8006e18:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8006e1a:	b182      	cbz	r2, 8006e3e <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8006e1c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8006e20:	2301      	movs	r3, #1
 8006e22:	b974      	cbnz	r4, 8006e42 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e24:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e28:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006e2c:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e2e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2181      	movs	r1, #129	; 0x81
 8006e36:	f000 fdad 	bl	8007994 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8006e3a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006e3c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006e3e:	2002      	movs	r0, #2
 8006e40:	e7fc      	b.n	8006e3c <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8006e42:	4618      	mov	r0, r3
 8006e44:	e7fa      	b.n	8006e3c <USBD_CDC_TransmitPacket+0x28>

08006e46 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e46:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8006e4a:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e4c:	b182      	cbz	r2, 8006e70 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4e:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e50:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e54:	b934      	cbnz	r4, 8006e64 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8006e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	f000 fda3 	bl	80079a6 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006e60:	4620      	mov	r0, r4
 8006e62:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	2101      	movs	r1, #1
 8006e68:	f000 fd9d 	bl	80079a6 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	e7f7      	b.n	8006e60 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8006e70:	2402      	movs	r4, #2
 8006e72:	e7f5      	b.n	8006e60 <USBD_CDC_ReceivePacket+0x1a>

08006e74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e74:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e76:	b180      	cbz	r0, 8006e9a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e78:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e7c:	b113      	cbz	r3, 8006e84 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e84:	b109      	cbz	r1, 8006e8a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8006e86:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8006e90:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e92:	f000 fcf1 	bl	8007878 <USBD_LL_Init>

  return USBD_OK;
 8006e96:	2000      	movs	r0, #0
}
 8006e98:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006e9a:	2002      	movs	r0, #2
 8006e9c:	e7fc      	b.n	8006e98 <USBD_Init+0x24>

08006e9e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006e9e:	b119      	cbz	r1, 8006ea8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ea0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ea8:	2002      	movs	r0, #2
  }

  return status;
}
 8006eaa:	4770      	bx	lr

08006eac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eac:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006eae:	f000 fd25 	bl	80078fc <USBD_LL_Start>

  return USBD_OK;
}
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	bd08      	pop	{r3, pc}

08006eb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006eb8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ebc:	b90b      	cbnz	r3, 8006ec2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ebe:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006ec0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4798      	blx	r3
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d0fa      	beq.n	8006ec0 <USBD_SetClassConfig+0xa>
 8006eca:	e7f8      	b.n	8006ebe <USBD_SetClassConfig+0x8>

08006ecc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ecc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ece:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4798      	blx	r3

  return USBD_OK;
}
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	bd08      	pop	{r3, pc}

08006eda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eda:	b538      	push	{r3, r4, r5, lr}
 8006edc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ede:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 fae5 	bl	80074b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ee8:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006eea:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8006eee:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8006ef2:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8006ef6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8006efa:	f001 031f 	and.w	r3, r1, #31
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d008      	beq.n	8006f14 <USBD_LL_SetupStage+0x3a>
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d00b      	beq.n	8006f1e <USBD_LL_SetupStage+0x44>
 8006f06:	b97b      	cbnz	r3, 8006f28 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f8fc 	bl	8007108 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8006f10:	2000      	movs	r0, #0
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 fa1e 	bl	8007358 <USBD_StdItfReq>
      break;
 8006f1c:	e7f8      	b.n	8006f10 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fa3d 	bl	80073a0 <USBD_StdEPReq>
      break;
 8006f26:	e7f3      	b.n	8006f10 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f28:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fd03 	bl	8007938 <USBD_LL_StallEP>
      break;
 8006f32:	e7ed      	b.n	8006f10 <USBD_LL_SetupStage+0x36>

08006f34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	4604      	mov	r4, r0
 8006f38:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	bb39      	cbnz	r1, 8006f8e <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f3e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d11c      	bne.n	8006f80 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f46:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8006f4a:	4296      	cmp	r6, r2
 8006f4c:	d90b      	bls.n	8006f66 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8006f4e:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8006f50:	42b2      	cmp	r2, r6
        pep->rem_length -= pep->maxpacket;
 8006f52:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8006f56:	bf8c      	ite	hi
 8006f58:	b2b2      	uxthhi	r2, r6
 8006f5a:	b292      	uxthls	r2, r2
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f000 fb05 	bl	800756c <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8006f62:	4628      	mov	r0, r5
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f66:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	b123      	cbz	r3, 8006f78 <USBD_LL_DataOutStage+0x44>
 8006f6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006f72:	2a03      	cmp	r2, #3
 8006f74:	d100      	bne.n	8006f78 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8006f76:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 faff 	bl	800757c <USBD_CtlSendStatus>
 8006f7e:	e7f0      	b.n	8006f62 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d1ee      	bne.n	8006f62 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f84:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f88:	f000 fcd6 	bl	8007938 <USBD_LL_StallEP>
 8006f8c:	e7e9      	b.n	8006f62 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	b133      	cbz	r3, 8006fa4 <USBD_LL_DataOutStage+0x70>
 8006f96:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006f9a:	2a03      	cmp	r2, #3
 8006f9c:	d102      	bne.n	8006fa4 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8006f9e:	4798      	blx	r3
  return USBD_OK;
 8006fa0:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8006fa2:	e7de      	b.n	8006f62 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8006fa4:	2502      	movs	r5, #2
 8006fa6:	e7dc      	b.n	8006f62 <USBD_LL_DataOutStage+0x2e>

08006fa8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fae:	460d      	mov	r5, r1
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d147      	bne.n	8007044 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fb4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d13c      	bne.n	8007036 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fbc:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8006fc0:	429e      	cmp	r6, r3
 8006fc2:	d914      	bls.n	8006fee <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8006fc4:	1af3      	subs	r3, r6, r3
 8006fc6:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f000 fab9 	bl	8007542 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 fce5 	bl	80079a6 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006fdc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8006fea:	4628      	mov	r0, r5
 8006fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fee:	69c2      	ldr	r2, [r0, #28]
 8006ff0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff4:	fb03 2616 	mls	r6, r3, r6, r2
 8006ff8:	b95e      	cbnz	r6, 8007012 <USBD_LL_DataInStage+0x6a>
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d809      	bhi.n	8007012 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8006ffe:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8007002:	429a      	cmp	r2, r3
 8007004:	d205      	bcs.n	8007012 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007006:	460a      	mov	r2, r1
 8007008:	f000 fa9b 	bl	8007542 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800700c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8007010:	e7de      	b.n	8006fd0 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007012:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	b12b      	cbz	r3, 8007026 <USBD_LL_DataInStage+0x7e>
 800701a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800701e:	2a03      	cmp	r2, #3
 8007020:	d101      	bne.n	8007026 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8007022:	4620      	mov	r0, r4
 8007024:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fc85 	bl	8007938 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800702e:	4620      	mov	r0, r4
 8007030:	f000 faaf 	bl	8007592 <USBD_CtlReceiveStatus>
 8007034:	e7d2      	b.n	8006fdc <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007036:	f033 0304 	bics.w	r3, r3, #4
 800703a:	d1cf      	bne.n	8006fdc <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	f000 fc7b 	bl	8007938 <USBD_LL_StallEP>
 8007042:	e7cb      	b.n	8006fdc <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8007044:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	b133      	cbz	r3, 800705a <USBD_LL_DataInStage+0xb2>
 800704c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007050:	2a03      	cmp	r2, #3
 8007052:	d102      	bne.n	800705a <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8007054:	4798      	blx	r3
  return USBD_OK;
 8007056:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007058:	e7c7      	b.n	8006fea <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800705a:	2502      	movs	r5, #2
 800705c:	e7c5      	b.n	8006fea <USBD_LL_DataInStage+0x42>

0800705e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800705e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007060:	2200      	movs	r2, #0
{
 8007062:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007064:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007066:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007068:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	f000 fc4f 	bl	800790e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007070:	4633      	mov	r3, r6
 8007072:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007074:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007078:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800707c:	2200      	movs	r2, #0
 800707e:	4620      	mov	r0, r4
 8007080:	f000 fc45 	bl	800790e <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007084:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007088:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800708a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800708c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007092:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8007096:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007098:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800709c:	b123      	cbz	r3, 80070a8 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800709e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80070a2:	4620      	mov	r0, r4
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80070a8:	2000      	movs	r0, #0
 80070aa:	bd70      	pop	{r4, r5, r6, pc}

080070ac <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80070ac:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80070ae:	2000      	movs	r0, #0
 80070b0:	4770      	bx	lr

080070b2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80070b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070b6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070ba:	2304      	movs	r3, #4
 80070bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	4770      	bx	lr

080070c4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070c8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80070ca:	bf04      	itt	eq
 80070cc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80070d0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80070d4:	2000      	movs	r0, #0
 80070d6:	4770      	bx	lr

080070d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070d8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070da:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80070de:	2a03      	cmp	r2, #3
 80070e0:	d104      	bne.n	80070ec <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80070e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	b103      	cbz	r3, 80070ec <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80070ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd08      	pop	{r3, pc}

080070f0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80070f0:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80070f2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80070f4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80070f6:	f000 fc1f 	bl	8007938 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80070fa:	4620      	mov	r0, r4
 80070fc:	2100      	movs	r1, #0
}
 80070fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007102:	f000 bc19 	b.w	8007938 <USBD_LL_StallEP>
	...

08007108 <USBD_StdDevReq>:
{
 8007108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800710a:	780b      	ldrb	r3, [r1, #0]
 800710c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007110:	2b20      	cmp	r3, #32
{
 8007112:	4604      	mov	r4, r0
 8007114:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007116:	d012      	beq.n	800713e <USBD_StdDevReq+0x36>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d010      	beq.n	800713e <USBD_StdDevReq+0x36>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d151      	bne.n	80071c4 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8007120:	784b      	ldrb	r3, [r1, #1]
 8007122:	2b09      	cmp	r3, #9
 8007124:	d84e      	bhi.n	80071c4 <USBD_StdDevReq+0xbc>
 8007126:	e8df f013 	tbh	[pc, r3, lsl #1]
 800712a:	00ee      	.short	0x00ee
 800712c:	004d0109 	.word	0x004d0109
 8007130:	004d0102 	.word	0x004d0102
 8007134:	00130087 	.word	0x00130087
 8007138:	00d6004d 	.word	0x00d6004d
 800713c:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800713e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007142:	4629      	mov	r1, r5
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	4620      	mov	r0, r4
 8007148:	4798      	blx	r3
}
 800714a:	2000      	movs	r0, #0
 800714c:	b003      	add	sp, #12
 800714e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007156:	884b      	ldrh	r3, [r1, #2]
 8007158:	0a1a      	lsrs	r2, r3, #8
 800715a:	3a01      	subs	r2, #1
 800715c:	2a06      	cmp	r2, #6
 800715e:	d831      	bhi.n	80071c4 <USBD_StdDevReq+0xbc>
 8007160:	e8df f002 	tbb	[pc, r2]
 8007164:	30231604 	.word	0x30231604
 8007168:	4830      	.short	0x4830
 800716a:	52          	.byte	0x52
 800716b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800716c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007170:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007172:	7c20      	ldrb	r0, [r4, #16]
 8007174:	f10d 0106 	add.w	r1, sp, #6
 8007178:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800717a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800717e:	2a00      	cmp	r2, #0
 8007180:	d056      	beq.n	8007230 <USBD_StdDevReq+0x128>
 8007182:	88eb      	ldrh	r3, [r5, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d14a      	bne.n	800721e <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8007188:	4620      	mov	r0, r4
 800718a:	f000 f9f7 	bl	800757c <USBD_CtlSendStatus>
 800718e:	e7dc      	b.n	800714a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007190:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8007192:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007196:	b932      	cbnz	r2, 80071a6 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800719a:	f10d 0006 	add.w	r0, sp, #6
 800719e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071a0:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071a2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80071a4:	e7e9      	b.n	800717a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	e7f7      	b.n	800719a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b05      	cmp	r3, #5
 80071ae:	d809      	bhi.n	80071c4 <USBD_StdDevReq+0xbc>
 80071b0:	e8df f003 	tbb	[pc, r3]
 80071b4:	14100c03 	.word	0x14100c03
 80071b8:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071be:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1d6      	bne.n	8007172 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff ff93 	bl	80070f0 <USBD_CtlError.constprop.0>
        break;
 80071ca:	e7be      	b.n	800714a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	e7f5      	b.n	80071c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	e7f1      	b.n	80071c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	e7ed      	b.n	80071c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	e7e9      	b.n	80071c0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	e7e5      	b.n	80071c0 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f4:	7c03      	ldrb	r3, [r0, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e4      	bne.n	80071c4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80071fe:	f10d 0006 	add.w	r0, sp, #6
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	4798      	blx	r3
  if (err != 0U)
 8007206:	e7b8      	b.n	800717a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007208:	7c03      	ldrb	r3, [r0, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1da      	bne.n	80071c4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800720e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007212:	f10d 0006 	add.w	r0, sp, #6
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800721a:	2307      	movs	r3, #7
 800721c:	e7c1      	b.n	80071a2 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800721e:	429a      	cmp	r2, r3
 8007220:	bf28      	it	cs
 8007222:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007224:	4601      	mov	r1, r0
 8007226:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8007228:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800722c:	f000 f97c 	bl	8007528 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007230:	88eb      	ldrh	r3, [r5, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d189      	bne.n	800714a <USBD_StdDevReq+0x42>
 8007236:	e7a7      	b.n	8007188 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007238:	888b      	ldrh	r3, [r1, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1c2      	bne.n	80071c4 <USBD_StdDevReq+0xbc>
 800723e:	88cb      	ldrh	r3, [r1, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1bf      	bne.n	80071c4 <USBD_StdDevReq+0xbc>
 8007244:	884d      	ldrh	r5, [r1, #2]
 8007246:	2d7f      	cmp	r5, #127	; 0x7f
 8007248:	d8bc      	bhi.n	80071c4 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800724e:	2b03      	cmp	r3, #3
 8007250:	d0b8      	beq.n	80071c4 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007252:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8007254:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007258:	f000 fb93 	bl	8007982 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800725c:	4620      	mov	r0, r4
 800725e:	f000 f98d 	bl	800757c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007262:	b11d      	cbz	r5, 800726c <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007264:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007266:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800726a:	e76e      	b.n	800714a <USBD_StdDevReq+0x42>
 800726c:	2301      	movs	r3, #1
 800726e:	e7fa      	b.n	8007266 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8007270:	7889      	ldrb	r1, [r1, #2]
 8007272:	4d38      	ldr	r5, [pc, #224]	; (8007354 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007274:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007276:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007278:	d8a4      	bhi.n	80071c4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800727a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800727e:	2b02      	cmp	r3, #2
 8007280:	d008      	beq.n	8007294 <USBD_StdDevReq+0x18c>
 8007282:	2b03      	cmp	r3, #3
 8007284:	d015      	beq.n	80072b2 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8007286:	f7ff ff33 	bl	80070f0 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800728a:	7829      	ldrb	r1, [r5, #0]
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff fe1d 	bl	8006ecc <USBD_ClrClassConfig>
        break;
 8007292:	e75a      	b.n	800714a <USBD_StdDevReq+0x42>
        if (cfgidx)
 8007294:	2900      	cmp	r1, #0
 8007296:	f43f af77 	beq.w	8007188 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800729a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800729c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800729e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072a0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff fe06 	bl	8006eb6 <USBD_SetClassConfig>
 80072aa:	2802      	cmp	r0, #2
 80072ac:	f47f af6c 	bne.w	8007188 <USBD_StdDevReq+0x80>
 80072b0:	e788      	b.n	80071c4 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80072b2:	b931      	cbnz	r1, 80072c2 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b4:	2302      	movs	r3, #2
 80072b6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80072ba:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80072bc:	f7ff fe06 	bl	8006ecc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80072c0:	e762      	b.n	8007188 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80072c2:	6841      	ldr	r1, [r0, #4]
 80072c4:	2901      	cmp	r1, #1
 80072c6:	f43f af5f 	beq.w	8007188 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072ca:	b2c9      	uxtb	r1, r1
 80072cc:	f7ff fdfe 	bl	8006ecc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072d0:	7829      	ldrb	r1, [r5, #0]
 80072d2:	6061      	str	r1, [r4, #4]
 80072d4:	e7e6      	b.n	80072a4 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80072d6:	88ca      	ldrh	r2, [r1, #6]
 80072d8:	2a01      	cmp	r2, #1
 80072da:	f47f af73 	bne.w	80071c4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80072de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d80a      	bhi.n	80072fc <USBD_StdDevReq+0x1f4>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f43f af6c 	beq.w	80071c4 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80072ec:	4601      	mov	r1, r0
 80072ee:	2300      	movs	r3, #0
 80072f0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 f917 	bl	8007528 <USBD_CtlSendData>
      break;
 80072fa:	e726      	b.n	800714a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	f47f af61 	bne.w	80071c4 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007302:	1d01      	adds	r1, r0, #4
 8007304:	e7f6      	b.n	80072f4 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8007306:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800730a:	3b01      	subs	r3, #1
 800730c:	2b02      	cmp	r3, #2
 800730e:	f63f af59 	bhi.w	80071c4 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8007312:	88ca      	ldrh	r2, [r1, #6]
 8007314:	2a02      	cmp	r2, #2
 8007316:	f47f af55 	bne.w	80071c4 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800731a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800731e:	4601      	mov	r1, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	bf14      	ite	ne
 8007324:	4613      	movne	r3, r2
 8007326:	2300      	moveq	r3, #0
 8007328:	f841 3f0c 	str.w	r3, [r1, #12]!
 800732c:	e7e2      	b.n	80072f4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800732e:	884b      	ldrh	r3, [r1, #2]
 8007330:	2b01      	cmp	r3, #1
 8007332:	f47f af0a 	bne.w	800714a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007336:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800733a:	e725      	b.n	8007188 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800733c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007340:	3b01      	subs	r3, #1
 8007342:	2b02      	cmp	r3, #2
 8007344:	f63f af3e 	bhi.w	80071c4 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007348:	884b      	ldrh	r3, [r1, #2]
 800734a:	2b01      	cmp	r3, #1
 800734c:	f47f aefd 	bne.w	800714a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	e7f0      	b.n	8007336 <USBD_StdDevReq+0x22e>
 8007354:	20000af0 	.word	0x20000af0

08007358 <USBD_StdItfReq>:
{
 8007358:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735a:	780b      	ldrb	r3, [r1, #0]
 800735c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007360:	2a40      	cmp	r2, #64	; 0x40
{
 8007362:	4604      	mov	r4, r0
 8007364:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007366:	d001      	beq.n	800736c <USBD_StdItfReq+0x14>
 8007368:	065b      	lsls	r3, r3, #25
 800736a:	d415      	bmi.n	8007398 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800736c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007370:	3b01      	subs	r3, #1
 8007372:	2b02      	cmp	r3, #2
 8007374:	d810      	bhi.n	8007398 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007376:	792b      	ldrb	r3, [r5, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d80d      	bhi.n	8007398 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800737c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007380:	4629      	mov	r1, r5
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4620      	mov	r0, r4
 8007386:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007388:	88eb      	ldrh	r3, [r5, #6]
 800738a:	b91b      	cbnz	r3, 8007394 <USBD_StdItfReq+0x3c>
 800738c:	b910      	cbnz	r0, 8007394 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f8f4 	bl	800757c <USBD_CtlSendStatus>
}
 8007394:	2000      	movs	r0, #0
 8007396:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff fea9 	bl	80070f0 <USBD_CtlError.constprop.0>
          break;
 800739e:	e7f9      	b.n	8007394 <USBD_StdItfReq+0x3c>

080073a0 <USBD_StdEPReq>:
{
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	780a      	ldrb	r2, [r1, #0]
 80073a4:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a8:	2a20      	cmp	r2, #32
{
 80073aa:	4604      	mov	r4, r0
 80073ac:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ae:	d028      	beq.n	8007402 <USBD_StdEPReq+0x62>
 80073b0:	2a40      	cmp	r2, #64	; 0x40
 80073b2:	d026      	beq.n	8007402 <USBD_StdEPReq+0x62>
 80073b4:	bb9a      	cbnz	r2, 800741e <USBD_StdEPReq+0x7e>
      switch (req->bRequest)
 80073b6:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80073b8:	888d      	ldrh	r5, [r1, #4]
 80073ba:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80073bc:	2a01      	cmp	r2, #1
 80073be:	d03e      	beq.n	800743e <USBD_StdEPReq+0x9e>
 80073c0:	2a03      	cmp	r2, #3
 80073c2:	d026      	beq.n	8007412 <USBD_StdEPReq+0x72>
 80073c4:	bb5a      	cbnz	r2, 800741e <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 80073c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d04e      	beq.n	800746c <USBD_StdEPReq+0xcc>
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d125      	bne.n	800741e <USBD_StdEPReq+0x7e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073d2:	f001 030f 	and.w	r3, r1, #15
 80073d6:	2214      	movs	r2, #20
              if ((ep_addr & 0x80U) == 0x80U)
 80073d8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073dc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80073e0:	d053      	beq.n	800748a <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	b1db      	cbz	r3, 800741e <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80073ea:	3501      	adds	r5, #1
 80073ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80073f0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073f4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80073f8:	d153      	bne.n	80074a2 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80073fa:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073fc:	2202      	movs	r2, #2
 80073fe:	4629      	mov	r1, r5
 8007400:	e03f      	b.n	8007482 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 8007402:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8007406:	4619      	mov	r1, r3
 8007408:	6892      	ldr	r2, [r2, #8]
 800740a:	4620      	mov	r0, r4
 800740c:	4790      	blx	r2
}
 800740e:	2000      	movs	r0, #0
 8007410:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8007412:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007416:	2a02      	cmp	r2, #2
 8007418:	d01f      	beq.n	800745a <USBD_StdEPReq+0xba>
 800741a:	2a03      	cmp	r2, #3
 800741c:	d003      	beq.n	8007426 <USBD_StdEPReq+0x86>
              USBD_CtlError(pdev, req);
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff fe66 	bl	80070f0 <USBD_CtlError.constprop.0>
              break;
 8007424:	e7f3      	b.n	800740e <USBD_StdEPReq+0x6e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007426:	885a      	ldrh	r2, [r3, #2]
 8007428:	b92a      	cbnz	r2, 8007436 <USBD_StdEPReq+0x96>
                if ((ep_addr != 0x00U) &&
 800742a:	064a      	lsls	r2, r1, #25
 800742c:	d003      	beq.n	8007436 <USBD_StdEPReq+0x96>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800742e:	88db      	ldrh	r3, [r3, #6]
 8007430:	b90b      	cbnz	r3, 8007436 <USBD_StdEPReq+0x96>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007432:	f000 fa81 	bl	8007938 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f8a0 	bl	800757c <USBD_CtlSendStatus>
              break;
 800743c:	e7e7      	b.n	800740e <USBD_StdEPReq+0x6e>
          switch (pdev->dev_state)
 800743e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007442:	2a02      	cmp	r2, #2
 8007444:	d009      	beq.n	800745a <USBD_StdEPReq+0xba>
 8007446:	2a03      	cmp	r2, #3
 8007448:	d1e9      	bne.n	800741e <USBD_StdEPReq+0x7e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1de      	bne.n	800740e <USBD_StdEPReq+0x6e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007450:	064d      	lsls	r5, r1, #25
 8007452:	d0f0      	beq.n	8007436 <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007454:	f000 fa79 	bl	800794a <USBD_LL_ClearStallEP>
 8007458:	e7ed      	b.n	8007436 <USBD_StdEPReq+0x96>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800745a:	064b      	lsls	r3, r1, #25
 800745c:	d0df      	beq.n	800741e <USBD_StdEPReq+0x7e>
                USBD_LL_StallEP(pdev, ep_addr);
 800745e:	f000 fa6b 	bl	8007938 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fa67 	bl	8007938 <USBD_LL_StallEP>
 800746a:	e7d0      	b.n	800740e <USBD_StdEPReq+0x6e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746c:	064a      	lsls	r2, r1, #25
 800746e:	d1d6      	bne.n	800741e <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007470:	062b      	lsls	r3, r5, #24
 8007472:	bf4c      	ite	mi
 8007474:	f100 0114 	addmi.w	r1, r0, #20
 8007478:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800747c:	2300      	movs	r3, #0
 800747e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007480:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007482:	4620      	mov	r0, r4
 8007484:	f000 f850 	bl	8007528 <USBD_CtlSendData>
              break;
 8007488:	e7c1      	b.n	800740e <USBD_StdEPReq+0x6e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800748a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0c5      	beq.n	800741e <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007492:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007496:	2314      	movs	r3, #20
 8007498:	fb03 0505 	mla	r5, r3, r5, r0
 800749c:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80074a0:	e7a8      	b.n	80073f4 <USBD_StdEPReq+0x54>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fa5a 	bl	800795c <USBD_LL_IsStallEP>
 80074a8:	b108      	cbz	r0, 80074ae <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7a5      	b.n	80073fa <USBD_StdEPReq+0x5a>
                pep->status = 0x0000U;
 80074ae:	6028      	str	r0, [r5, #0]
 80074b0:	e7a4      	b.n	80073fc <USBD_StdEPReq+0x5c>

080074b2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80074b2:	780b      	ldrb	r3, [r1, #0]
 80074b4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074b6:	784b      	ldrb	r3, [r1, #1]
 80074b8:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074ba:	78ca      	ldrb	r2, [r1, #3]
 80074bc:	788b      	ldrb	r3, [r1, #2]
 80074be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80074c2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074c4:	794a      	ldrb	r2, [r1, #5]
 80074c6:	790b      	ldrb	r3, [r1, #4]
 80074c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80074cc:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80074ce:	79ca      	ldrb	r2, [r1, #7]
 80074d0:	798b      	ldrb	r3, [r1, #6]
 80074d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80074d6:	80c3      	strh	r3, [r0, #6]
}
 80074d8:	4770      	bx	lr

080074da <USBD_CtlError>:
{
 80074da:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 80074dc:	2180      	movs	r1, #128	; 0x80
{
 80074de:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80074e0:	f000 fa2a 	bl	8007938 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074e4:	4620      	mov	r0, r4
 80074e6:	2100      	movs	r1, #0
}
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80074ec:	f000 ba24 	b.w	8007938 <USBD_LL_StallEP>

080074f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074f0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80074f2:	b188      	cbz	r0, 8007518 <USBD_GetString+0x28>
 80074f4:	2400      	movs	r4, #0
 80074f6:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80074f8:	4623      	mov	r3, r4
 80074fa:	3401      	adds	r4, #1
 80074fc:	5d05      	ldrb	r5, [r0, r4]
 80074fe:	2d00      	cmp	r5, #0
 8007500:	d1fa      	bne.n	80074f8 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007502:	b2db      	uxtb	r3, r3
 8007504:	3301      	adds	r3, #1
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800750a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800750c:	2303      	movs	r3, #3
 800750e:	704b      	strb	r3, [r1, #1]
 8007510:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007512:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007516:	b904      	cbnz	r4, 800751a <USBD_GetString+0x2a>
}
 8007518:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8007520:	3302      	adds	r3, #2
 8007522:	548d      	strb	r5, [r1, r2]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	e7f4      	b.n	8007512 <USBD_GetString+0x22>

08007528 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007528:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800752a:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800752c:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800752e:	e9c0 2207 	strd	r2, r2, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007532:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007536:	460a      	mov	r2, r1
 8007538:	2100      	movs	r1, #0
 800753a:	f000 fa2b 	bl	8007994 <USBD_LL_Transmit>

  return USBD_OK;
}
 800753e:	2000      	movs	r0, #0
 8007540:	bd10      	pop	{r4, pc}

08007542 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007542:	b508      	push	{r3, lr}
 8007544:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007546:	460a      	mov	r2, r1
 8007548:	2100      	movs	r1, #0
 800754a:	f000 fa23 	bl	8007994 <USBD_LL_Transmit>

  return USBD_OK;
}
 800754e:	2000      	movs	r0, #0
 8007550:	bd08      	pop	{r3, pc}

08007552 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007552:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007554:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007556:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 8007558:	e9c0 2257 	strd	r2, r2, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800755c:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007560:	460a      	mov	r2, r1
 8007562:	2100      	movs	r1, #0
 8007564:	f000 fa1f 	bl	80079a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007568:	2000      	movs	r0, #0
 800756a:	bd10      	pop	{r4, pc}

0800756c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800756c:	b508      	push	{r3, lr}
 800756e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007570:	460a      	mov	r2, r1
 8007572:	2100      	movs	r1, #0
 8007574:	f000 fa17 	bl	80079a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007578:	2000      	movs	r0, #0
 800757a:	bd08      	pop	{r3, pc}

0800757c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800757c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800757e:	2304      	movs	r3, #4
 8007580:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007584:	2300      	movs	r3, #0
 8007586:	461a      	mov	r2, r3
 8007588:	4619      	mov	r1, r3
 800758a:	f000 fa03 	bl	8007994 <USBD_LL_Transmit>

  return USBD_OK;
}
 800758e:	2000      	movs	r0, #0
 8007590:	bd08      	pop	{r3, pc}

08007592 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007592:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007594:	2305      	movs	r3, #5
 8007596:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800759a:	2300      	movs	r3, #0
 800759c:	461a      	mov	r2, r3
 800759e:	4619      	mov	r1, r3
 80075a0:	f000 fa01 	bl	80079a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075a4:	2000      	movs	r0, #0
 80075a6:	bd08      	pop	{r3, pc}

080075a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075aa:	490f      	ldr	r1, [pc, #60]	; (80075e8 <MX_USB_DEVICE_Init+0x40>)
 80075ac:	480f      	ldr	r0, [pc, #60]	; (80075ec <MX_USB_DEVICE_Init+0x44>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	f7ff fc60 	bl	8006e74 <USBD_Init>
 80075b4:	b108      	cbz	r0, 80075ba <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80075b6:	f7fa f8c1 	bl	800173c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075ba:	490d      	ldr	r1, [pc, #52]	; (80075f0 <MX_USB_DEVICE_Init+0x48>)
 80075bc:	480b      	ldr	r0, [pc, #44]	; (80075ec <MX_USB_DEVICE_Init+0x44>)
 80075be:	f7ff fc6e 	bl	8006e9e <USBD_RegisterClass>
 80075c2:	b108      	cbz	r0, 80075c8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80075c4:	f7fa f8ba 	bl	800173c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075c8:	490a      	ldr	r1, [pc, #40]	; (80075f4 <MX_USB_DEVICE_Init+0x4c>)
 80075ca:	4808      	ldr	r0, [pc, #32]	; (80075ec <MX_USB_DEVICE_Init+0x44>)
 80075cc:	f7ff fc0d 	bl	8006dea <USBD_CDC_RegisterInterface>
 80075d0:	b108      	cbz	r0, 80075d6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80075d2:	f7fa f8b3 	bl	800173c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075d6:	4805      	ldr	r0, [pc, #20]	; (80075ec <MX_USB_DEVICE_Init+0x44>)
 80075d8:	f7ff fc68 	bl	8006eac <USBD_Start>
 80075dc:	b118      	cbz	r0, 80075e6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80075e2:	f7fa b8ab 	b.w	800173c <Error_Handler>
}
 80075e6:	bd08      	pop	{r3, pc}
 80075e8:	2000012c 	.word	0x2000012c
 80075ec:	20000af4 	.word	0x20000af4
 80075f0:	2000000c 	.word	0x2000000c
 80075f4:	2000011c 	.word	0x2000011c

080075f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80075f8:	2000      	movs	r0, #0
 80075fa:	4770      	bx	lr

080075fc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80075fc:	2000      	movs	r0, #0
 80075fe:	4770      	bx	lr

08007600 <CDC_Init_FS>:
{
 8007600:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007602:	4c06      	ldr	r4, [pc, #24]	; (800761c <CDC_Init_FS+0x1c>)
 8007604:	4906      	ldr	r1, [pc, #24]	; (8007620 <CDC_Init_FS+0x20>)
 8007606:	2200      	movs	r2, #0
 8007608:	4620      	mov	r0, r4
 800760a:	f7ff fbf5 	bl	8006df8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800760e:	4905      	ldr	r1, [pc, #20]	; (8007624 <CDC_Init_FS+0x24>)
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff fbf9 	bl	8006e08 <USBD_CDC_SetRxBuffer>
}
 8007616:	2000      	movs	r0, #0
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	20000af4 	.word	0x20000af4
 8007620:	200011a0 	.word	0x200011a0
 8007624:	20000db8 	.word	0x20000db8

08007628 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007628:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800762a:	4c09      	ldr	r4, [pc, #36]	; (8007650 <CDC_Transmit_FS+0x28>)
 800762c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8007630:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8007634:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8007636:	b943      	cbnz	r3, 800764a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007638:	4601      	mov	r1, r0
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fbdc 	bl	8006df8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007640:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8007642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007646:	f7ff bbe5 	b.w	8006e14 <USBD_CDC_TransmitPacket>
}
 800764a:	2001      	movs	r0, #1
 800764c:	bd10      	pop	{r4, pc}
 800764e:	bf00      	nop
 8007650:	20000af4 	.word	0x20000af4

08007654 <CDC_Receive_FS>:
{
 8007654:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007656:	4e08      	ldr	r6, [pc, #32]	; (8007678 <CDC_Receive_FS+0x24>)
{
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800765c:	4601      	mov	r1, r0
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff fbd2 	bl	8006e08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007664:	4630      	mov	r0, r6
 8007666:	f7ff fbee 	bl	8006e46 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 800766a:	4620      	mov	r0, r4
 800766c:	6829      	ldr	r1, [r5, #0]
 800766e:	f7f9 ff13 	bl	8001498 <CDC_ReceiveCallback>
}
 8007672:	2000      	movs	r0, #0
 8007674:	bd70      	pop	{r4, r5, r6, pc}
 8007676:	bf00      	nop
 8007678:	20000af4 	.word	0x20000af4

0800767c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800767c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800767e:	4801      	ldr	r0, [pc, #4]	; (8007684 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007680:	800b      	strh	r3, [r1, #0]
}
 8007682:	4770      	bx	lr
 8007684:	20000148 	.word	0x20000148

08007688 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007688:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800768a:	4801      	ldr	r0, [pc, #4]	; (8007690 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800768c:	800b      	strh	r3, [r1, #0]
}
 800768e:	4770      	bx	lr
 8007690:	2000015c 	.word	0x2000015c

08007694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007694:	2300      	movs	r3, #0
 8007696:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007698:	1c4d      	adds	r5, r1, #1
 800769a:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 800769c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800769e:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80076a2:	bf34      	ite	cc
 80076a4:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076a6:	3437      	addcs	r4, #55	; 0x37
 80076a8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80076ac:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80076b0:	3301      	adds	r3, #1
 80076b2:	b2dc      	uxtb	r4, r3
 80076b4:	42a2      	cmp	r2, r4
    value = value << 4;
 80076b6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80076ba:	d8ef      	bhi.n	800769c <IntToUnicode+0x8>
  }
}
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080076c0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80076c0:	231a      	movs	r3, #26
{
 80076c2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80076c4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <USBD_FS_SerialStrDescriptor+0x30>)
 80076c8:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 80076cc:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 80076d0:	1880      	adds	r0, r0, r2
 80076d2:	d00a      	beq.n	80076ea <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076d4:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076d8:	4906      	ldr	r1, [pc, #24]	; (80076f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80076da:	2208      	movs	r2, #8
 80076dc:	f7ff ffda 	bl	8007694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076e0:	2204      	movs	r2, #4
 80076e2:	3110      	adds	r1, #16
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7ff ffd5 	bl	8007694 <IntToUnicode>
}
 80076ea:	4803      	ldr	r0, [pc, #12]	; (80076f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	1ffff000 	.word	0x1ffff000
 80076f4:	20000162 	.word	0x20000162
 80076f8:	20000160 	.word	0x20000160

080076fc <USBD_FS_ManufacturerStrDescriptor>:
{
 80076fc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076fe:	4c04      	ldr	r4, [pc, #16]	; (8007710 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007700:	4804      	ldr	r0, [pc, #16]	; (8007714 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8007702:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff fef3 	bl	80074f0 <USBD_GetString>
}
 800770a:	4620      	mov	r0, r4
 800770c:	bd10      	pop	{r4, pc}
 800770e:	bf00      	nop
 8007710:	20001588 	.word	0x20001588
 8007714:	0800a4b0 	.word	0x0800a4b0

08007718 <USBD_FS_ProductStrDescriptor>:
{
 8007718:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771a:	4c04      	ldr	r4, [pc, #16]	; (800772c <USBD_FS_ProductStrDescriptor+0x14>)
 800771c:	4804      	ldr	r0, [pc, #16]	; (8007730 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800771e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007720:	4621      	mov	r1, r4
 8007722:	f7ff fee5 	bl	80074f0 <USBD_GetString>
}
 8007726:	4620      	mov	r0, r4
 8007728:	bd10      	pop	{r4, pc}
 800772a:	bf00      	nop
 800772c:	20001588 	.word	0x20001588
 8007730:	0800a4c3 	.word	0x0800a4c3

08007734 <USBD_FS_ConfigStrDescriptor>:
{
 8007734:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007736:	4c04      	ldr	r4, [pc, #16]	; (8007748 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007738:	4804      	ldr	r0, [pc, #16]	; (800774c <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800773a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800773c:	4621      	mov	r1, r4
 800773e:	f7ff fed7 	bl	80074f0 <USBD_GetString>
}
 8007742:	4620      	mov	r0, r4
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	20001588 	.word	0x20001588
 800774c:	0800a4d9 	.word	0x0800a4d9

08007750 <USBD_FS_InterfaceStrDescriptor>:
{
 8007750:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007752:	4c04      	ldr	r4, [pc, #16]	; (8007764 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007754:	4804      	ldr	r0, [pc, #16]	; (8007768 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8007756:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007758:	4621      	mov	r1, r4
 800775a:	f7ff fec9 	bl	80074f0 <USBD_GetString>
}
 800775e:	4620      	mov	r0, r4
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	20001588 	.word	0x20001588
 8007768:	0800a4e4 	.word	0x0800a4e4

0800776c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800776c:	2803      	cmp	r0, #3
 800776e:	bf9a      	itte	ls
 8007770:	4b01      	ldrls	r3, [pc, #4]	; (8007778 <USBD_Get_USB_Status+0xc>)
 8007772:	5c18      	ldrbls	r0, [r3, r0]
{
 8007774:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007776:	4770      	bx	lr
 8007778:	0800a4f2 	.word	0x0800a4f2

0800777c <HAL_PCD_MspInit>:
{
 800777c:	b510      	push	{r4, lr}
 800777e:	4604      	mov	r4, r0
 8007780:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007782:	2214      	movs	r2, #20
 8007784:	2100      	movs	r1, #0
 8007786:	a803      	add	r0, sp, #12
 8007788:	f000 f958 	bl	8007a3c <memset>
  if(pcdHandle->Instance==USB)
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	4b17      	ldr	r3, [pc, #92]	; (80077ec <HAL_PCD_MspInit+0x70>)
 8007790:	429a      	cmp	r2, r3
 8007792:	d128      	bne.n	80077e6 <HAL_PCD_MspInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007794:	4c16      	ldr	r4, [pc, #88]	; (80077f0 <HAL_PCD_MspInit+0x74>)
 8007796:	6963      	ldr	r3, [r4, #20]
 8007798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779c:	6163      	str	r3, [r4, #20]
 800779e:	6963      	ldr	r3, [r4, #20]
 80077a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80077b2:	2103      	movs	r1, #3
 80077b4:	230e      	movs	r3, #14
 80077b6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077be:	a903      	add	r1, sp, #12
 80077c0:	f7fb ff1a 	bl	80035f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 80077c4:	69e3      	ldr	r3, [r4, #28]
 80077c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ca:	61e3      	str	r3, [r4, #28]
 80077cc:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80077ce:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80077d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d4:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80077d6:	204b      	movs	r0, #75	; 0x4b
 80077d8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80077da:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80077dc:	f7fb fc58 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80077e0:	204b      	movs	r0, #75	; 0x4b
 80077e2:	f7fb fc87 	bl	80030f4 <HAL_NVIC_EnableIRQ>
}
 80077e6:	b008      	add	sp, #32
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	bf00      	nop
 80077ec:	40005c00 	.word	0x40005c00
 80077f0:	40021000 	.word	0x40021000

080077f4 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80077f8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80077fc:	f7ff bb6d 	b.w	8006eda <USBD_LL_SetupStage>

08007800 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007800:	2328      	movs	r3, #40	; 0x28
 8007802:	fb03 0301 	mla	r3, r3, r1, r0
 8007806:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800780a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800780e:	f7ff bb91 	b.w	8006f34 <USBD_LL_DataOutStage>

08007812 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007812:	2328      	movs	r3, #40	; 0x28
 8007814:	fb03 0301 	mla	r3, r3, r1, r0
 8007818:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800781c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800781e:	f7ff bbc3 	b.w	8006fa8 <USBD_LL_DataInStage>

08007822 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007822:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007826:	f7ff bc57 	b.w	80070d8 <USBD_LL_SOF>

0800782a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800782a:	6883      	ldr	r3, [r0, #8]
 800782c:	2b02      	cmp	r3, #2
{
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007832:	d001      	beq.n	8007838 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007834:	f7f9 ff82 	bl	800173c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007838:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800783c:	2101      	movs	r1, #1
 800783e:	f7ff fc35 	bl	80070ac <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007842:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800784a:	f7ff bc08 	b.w	800705e <USBD_LL_Reset>
	...

08007850 <HAL_PCD_SuspendCallback>:
{
 8007850:	b510      	push	{r4, lr}
 8007852:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007854:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007858:	f7ff fc2b 	bl	80070b2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800785c:	69a3      	ldr	r3, [r4, #24]
 800785e:	b123      	cbz	r3, 800786a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007860:	4a02      	ldr	r2, [pc, #8]	; (800786c <HAL_PCD_SuspendCallback+0x1c>)
 8007862:	6913      	ldr	r3, [r2, #16]
 8007864:	f043 0306 	orr.w	r3, r3, #6
 8007868:	6113      	str	r3, [r2, #16]
}
 800786a:	bd10      	pop	{r4, pc}
 800786c:	e000ed00 	.word	0xe000ed00

08007870 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007870:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007874:	f7ff bc26 	b.w	80070c4 <USBD_LL_Resume>

08007878 <USBD_LL_Init>:
{
 8007878:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <USBD_LL_Init+0x7c>)
{
 800787c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800787e:	481e      	ldr	r0, [pc, #120]	; (80078f8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007880:	2308      	movs	r3, #8
 8007882:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007886:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 8007888:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800788c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800788e:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 8007890:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007894:	2300      	movs	r3, #0
 8007896:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007898:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800789a:	f7fb ff7c 	bl	8003796 <HAL_PCD_Init>
 800789e:	b108      	cbz	r0, 80078a4 <USBD_LL_Init+0x2c>
    Error_Handler( );
 80078a0:	f7f9 ff4c 	bl	800173c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80078a4:	2200      	movs	r2, #0
 80078a6:	4611      	mov	r1, r2
 80078a8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80078ac:	2318      	movs	r3, #24
 80078ae:	f7fc fdca 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80078b2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80078b6:	2358      	movs	r3, #88	; 0x58
 80078b8:	2200      	movs	r2, #0
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	f7fc fdc3 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80078c0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80078c4:	23c0      	movs	r3, #192	; 0xc0
 80078c6:	2200      	movs	r2, #0
 80078c8:	2181      	movs	r1, #129	; 0x81
 80078ca:	f7fc fdbc 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80078ce:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80078d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80078d6:	2200      	movs	r2, #0
 80078d8:	2101      	movs	r1, #1
 80078da:	f7fc fdb4 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80078de:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80078e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078e6:	2200      	movs	r2, #0
 80078e8:	2182      	movs	r1, #130	; 0x82
 80078ea:	f7fc fdac 	bl	8004446 <HAL_PCDEx_PMAConfig>
}
 80078ee:	2000      	movs	r0, #0
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	bf00      	nop
 80078f4:	40005c00 	.word	0x40005c00
 80078f8:	20001788 	.word	0x20001788

080078fc <USBD_LL_Start>:
{
 80078fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80078fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007902:	f7fb ff9f 	bl	8003844 <HAL_PCD_Start>
}
 8007906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800790a:	f7ff bf2f 	b.w	800776c <USBD_Get_USB_Status>

0800790e <USBD_LL_OpenEP>:
{
 800790e:	b510      	push	{r4, lr}
 8007910:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007912:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8007916:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007918:	4623      	mov	r3, r4
 800791a:	f7fc fc8b 	bl	8004234 <HAL_PCD_EP_Open>
}
 800791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007922:	f7ff bf23 	b.w	800776c <USBD_Get_USB_Status>

08007926 <USBD_LL_CloseEP>:
{
 8007926:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007928:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800792c:	f7fc fcb8 	bl	80042a0 <HAL_PCD_EP_Close>
}
 8007930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007934:	f7ff bf1a 	b.w	800776c <USBD_Get_USB_Status>

08007938 <USBD_LL_StallEP>:
{
 8007938:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800793a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800793e:	f7fc fd1a 	bl	8004376 <HAL_PCD_EP_SetStall>
}
 8007942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007946:	f7ff bf11 	b.w	800776c <USBD_Get_USB_Status>

0800794a <USBD_LL_ClearStallEP>:
{
 800794a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800794c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007950:	f7fc fd43 	bl	80043da <HAL_PCD_EP_ClrStall>
}
 8007954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007958:	f7ff bf08 	b.w	800776c <USBD_Get_USB_Status>

0800795c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800795c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007960:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8007964:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007968:	bf1d      	ittte	ne
 800796a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800796e:	fb01 2102 	mlane	r1, r1, r2, r2
 8007972:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007974:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007978:	bf14      	ite	ne
 800797a:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800797c:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8007980:	4770      	bx	lr

08007982 <USBD_LL_SetUSBAddress>:
{
 8007982:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007984:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007988:	f7fb ff75 	bl	8003876 <HAL_PCD_SetAddress>
}
 800798c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007990:	f7ff beec 	b.w	800776c <USBD_Get_USB_Status>

08007994 <USBD_LL_Transmit>:
{
 8007994:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007996:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800799a:	f7fc fccc 	bl	8004336 <HAL_PCD_EP_Transmit>
}
 800799e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a2:	f7ff bee3 	b.w	800776c <USBD_Get_USB_Status>

080079a6 <USBD_LL_PrepareReceive>:
{
 80079a6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80079ac:	f7fc fca5 	bl	80042fa <HAL_PCD_EP_Receive>
}
 80079b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b4:	f7ff beda 	b.w	800776c <USBD_Get_USB_Status>

080079b8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079b8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80079bc:	f7fc bcb3 	b.w	8004326 <HAL_PCD_EP_GetRxCount>

080079c0 <USBD_static_malloc>:
}
 80079c0:	4800      	ldr	r0, [pc, #0]	; (80079c4 <USBD_static_malloc+0x4>)
 80079c2:	4770      	bx	lr
 80079c4:	20001a74 	.word	0x20001a74

080079c8 <USBD_static_free>:
}
 80079c8:	4770      	bx	lr

080079ca <HAL_PCDEx_SetConnectionState>:
}
 80079ca:	4770      	bx	lr

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	2000017c 	.word	0x2000017c

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4d0d      	ldr	r5, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2600      	movs	r6, #0
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4d0b      	ldr	r5, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f002 fd36 	bl	800a45c <_init>
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2600      	movs	r6, #0
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	0800a8d4 	.word	0x0800a8d4
 8007a14:	0800a8d4 	.word	0x0800a8d4
 8007a18:	0800a8d4 	.word	0x0800a8d4
 8007a1c:	0800a8d8 	.word	0x0800a8d8

08007a20 <memcpy>:
 8007a20:	440a      	add	r2, r1
 8007a22:	4291      	cmp	r1, r2
 8007a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	4770      	bx	lr
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a36:	4291      	cmp	r1, r2
 8007a38:	d1f9      	bne.n	8007a2e <memcpy+0xe>
 8007a3a:	bd10      	pop	{r4, pc}

08007a3c <memset>:
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d100      	bne.n	8007a46 <memset+0xa>
 8007a44:	4770      	bx	lr
 8007a46:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4a:	e7f9      	b.n	8007a40 <memset+0x4>

08007a4c <__cvt>:
 8007a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	ec55 4b10 	vmov	r4, r5, d0
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	460e      	mov	r6, r1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a62:	461d      	movlt	r5, r3
 8007a64:	2300      	movge	r3, #0
 8007a66:	232d      	movlt	r3, #45	; 0x2d
 8007a68:	700b      	strb	r3, [r1, #0]
 8007a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a70:	4691      	mov	r9, r2
 8007a72:	f023 0820 	bic.w	r8, r3, #32
 8007a76:	bfbc      	itt	lt
 8007a78:	4622      	movlt	r2, r4
 8007a7a:	4614      	movlt	r4, r2
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a80:	d005      	beq.n	8007a8e <__cvt+0x42>
 8007a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a86:	d100      	bne.n	8007a8a <__cvt+0x3e>
 8007a88:	3601      	adds	r6, #1
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	e000      	b.n	8007a90 <__cvt+0x44>
 8007a8e:	2103      	movs	r1, #3
 8007a90:	ab03      	add	r3, sp, #12
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	ab02      	add	r3, sp, #8
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	ec45 4b10 	vmov	d0, r4, r5
 8007a9c:	4653      	mov	r3, sl
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	f000 fcca 	bl	8008438 <_dtoa_r>
 8007aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	d102      	bne.n	8007ab2 <__cvt+0x66>
 8007aac:	f019 0f01 	tst.w	r9, #1
 8007ab0:	d022      	beq.n	8007af8 <__cvt+0xac>
 8007ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ab6:	eb07 0906 	add.w	r9, r7, r6
 8007aba:	d110      	bne.n	8007ade <__cvt+0x92>
 8007abc:	783b      	ldrb	r3, [r7, #0]
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d10a      	bne.n	8007ad8 <__cvt+0x8c>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ace:	b918      	cbnz	r0, 8007ad8 <__cvt+0x8c>
 8007ad0:	f1c6 0601 	rsb	r6, r6, #1
 8007ad4:	f8ca 6000 	str.w	r6, [sl]
 8007ad8:	f8da 3000 	ldr.w	r3, [sl]
 8007adc:	4499      	add	r9, r3
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aea:	b108      	cbz	r0, 8007af0 <__cvt+0xa4>
 8007aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007af0:	2230      	movs	r2, #48	; 0x30
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	454b      	cmp	r3, r9
 8007af6:	d307      	bcc.n	8007b08 <__cvt+0xbc>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007afc:	1bdb      	subs	r3, r3, r7
 8007afe:	4638      	mov	r0, r7
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	b004      	add	sp, #16
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	1c59      	adds	r1, r3, #1
 8007b0a:	9103      	str	r1, [sp, #12]
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e7f0      	b.n	8007af2 <__cvt+0xa6>

08007b10 <__exponent>:
 8007b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b12:	4603      	mov	r3, r0
 8007b14:	2900      	cmp	r1, #0
 8007b16:	bfb8      	it	lt
 8007b18:	4249      	neglt	r1, r1
 8007b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b1e:	bfb4      	ite	lt
 8007b20:	222d      	movlt	r2, #45	; 0x2d
 8007b22:	222b      	movge	r2, #43	; 0x2b
 8007b24:	2909      	cmp	r1, #9
 8007b26:	7042      	strb	r2, [r0, #1]
 8007b28:	dd2a      	ble.n	8007b80 <__exponent+0x70>
 8007b2a:	f10d 0407 	add.w	r4, sp, #7
 8007b2e:	46a4      	mov	ip, r4
 8007b30:	270a      	movs	r7, #10
 8007b32:	46a6      	mov	lr, r4
 8007b34:	460a      	mov	r2, r1
 8007b36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007b3e:	3530      	adds	r5, #48	; 0x30
 8007b40:	2a63      	cmp	r2, #99	; 0x63
 8007b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	dcf1      	bgt.n	8007b32 <__exponent+0x22>
 8007b4e:	3130      	adds	r1, #48	; 0x30
 8007b50:	f1ae 0502 	sub.w	r5, lr, #2
 8007b54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b58:	1c44      	adds	r4, r0, #1
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4561      	cmp	r1, ip
 8007b5e:	d30a      	bcc.n	8007b76 <__exponent+0x66>
 8007b60:	f10d 0209 	add.w	r2, sp, #9
 8007b64:	eba2 020e 	sub.w	r2, r2, lr
 8007b68:	4565      	cmp	r5, ip
 8007b6a:	bf88      	it	hi
 8007b6c:	2200      	movhi	r2, #0
 8007b6e:	4413      	add	r3, r2
 8007b70:	1a18      	subs	r0, r3, r0
 8007b72:	b003      	add	sp, #12
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b7e:	e7ed      	b.n	8007b5c <__exponent+0x4c>
 8007b80:	2330      	movs	r3, #48	; 0x30
 8007b82:	3130      	adds	r1, #48	; 0x30
 8007b84:	7083      	strb	r3, [r0, #2]
 8007b86:	70c1      	strb	r1, [r0, #3]
 8007b88:	1d03      	adds	r3, r0, #4
 8007b8a:	e7f1      	b.n	8007b70 <__exponent+0x60>

08007b8c <_printf_float>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	ed2d 8b02 	vpush	{d8}
 8007b94:	b08d      	sub	sp, #52	; 0x34
 8007b96:	460c      	mov	r4, r1
 8007b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	f001 fa37 	bl	8009014 <_localeconv_r>
 8007ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb10 	bl	80001d0 <strlen>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bc0:	3307      	adds	r3, #7
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	f103 0208 	add.w	r2, r3, #8
 8007bca:	f8c8 2000 	str.w	r2, [r8]
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007be4:	ee08 0a10 	vmov	s16, r0
 8007be8:	4b9f      	ldr	r3, [pc, #636]	; (8007e68 <_printf_float+0x2dc>)
 8007bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	f7f8 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 8007bf6:	bb88      	cbnz	r0, 8007c5c <_printf_float+0xd0>
 8007bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	; (8007e68 <_printf_float+0x2dc>)
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007c02:	f7f8 ff75 	bl	8000af0 <__aeabi_dcmple>
 8007c06:	bb48      	cbnz	r0, 8007c5c <_printf_float+0xd0>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff64 	bl	8000adc <__aeabi_dcmplt>
 8007c14:	b110      	cbz	r0, 8007c1c <_printf_float+0x90>
 8007c16:	232d      	movs	r3, #45	; 0x2d
 8007c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1c:	4b93      	ldr	r3, [pc, #588]	; (8007e6c <_printf_float+0x2e0>)
 8007c1e:	4894      	ldr	r0, [pc, #592]	; (8007e70 <_printf_float+0x2e4>)
 8007c20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c24:	bf94      	ite	ls
 8007c26:	4698      	movls	r8, r3
 8007c28:	4680      	movhi	r8, r0
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	f023 0204 	bic.w	r2, r3, #4
 8007c34:	6022      	str	r2, [r4, #0]
 8007c36:	f04f 0900 	mov.w	r9, #0
 8007c3a:	9700      	str	r7, [sp, #0]
 8007c3c:	4633      	mov	r3, r6
 8007c3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f9d8 	bl	8007ff8 <_printf_common>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f040 8090 	bne.w	8007d6e <_printf_float+0x1e2>
 8007c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c52:	b00d      	add	sp, #52	; 0x34
 8007c54:	ecbd 8b02 	vpop	{d8}
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff62 	bl	8000b2c <__aeabi_dcmpun>
 8007c68:	b140      	cbz	r0, 8007c7c <_printf_float+0xf0>
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bfbc      	itt	lt
 8007c70:	232d      	movlt	r3, #45	; 0x2d
 8007c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c76:	487f      	ldr	r0, [pc, #508]	; (8007e74 <_printf_float+0x2e8>)
 8007c78:	4b7f      	ldr	r3, [pc, #508]	; (8007e78 <_printf_float+0x2ec>)
 8007c7a:	e7d1      	b.n	8007c20 <_printf_float+0x94>
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c82:	9206      	str	r2, [sp, #24]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	d13f      	bne.n	8007d08 <_printf_float+0x17c>
 8007c88:	2306      	movs	r3, #6
 8007c8a:	6063      	str	r3, [r4, #4]
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	6861      	ldr	r1, [r4, #4]
 8007c90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c94:	2300      	movs	r3, #0
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	ab0a      	add	r3, sp, #40	; 0x28
 8007c9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c9e:	ab09      	add	r3, sp, #36	; 0x24
 8007ca0:	ec49 8b10 	vmov	d0, r8, r9
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff fecd 	bl	8007a4c <__cvt>
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb6:	2b47      	cmp	r3, #71	; 0x47
 8007cb8:	4680      	mov	r8, r0
 8007cba:	d108      	bne.n	8007cce <_printf_float+0x142>
 8007cbc:	1cc8      	adds	r0, r1, #3
 8007cbe:	db02      	blt.n	8007cc6 <_printf_float+0x13a>
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	dd41      	ble.n	8007d4a <_printf_float+0x1be>
 8007cc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cca:	fa5f fb8b 	uxtb.w	fp, fp
 8007cce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cd2:	d820      	bhi.n	8007d16 <_printf_float+0x18a>
 8007cd4:	3901      	subs	r1, #1
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8007cde:	f7ff ff17 	bl	8007b10 <__exponent>
 8007ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce4:	1813      	adds	r3, r2, r0
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	4681      	mov	r9, r0
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	dc02      	bgt.n	8007cf4 <_printf_float+0x168>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	07d2      	lsls	r2, r2, #31
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_float+0x16c>
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d09c      	beq.n	8007c3a <_printf_float+0xae>
 8007d00:	232d      	movs	r3, #45	; 0x2d
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d06:	e798      	b.n	8007c3a <_printf_float+0xae>
 8007d08:	9a06      	ldr	r2, [sp, #24]
 8007d0a:	2a47      	cmp	r2, #71	; 0x47
 8007d0c:	d1be      	bne.n	8007c8c <_printf_float+0x100>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1bc      	bne.n	8007c8c <_printf_float+0x100>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e7b9      	b.n	8007c8a <_printf_float+0xfe>
 8007d16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d1a:	d118      	bne.n	8007d4e <_printf_float+0x1c2>
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	dd0b      	ble.n	8007d3a <_printf_float+0x1ae>
 8007d22:	6121      	str	r1, [r4, #16]
 8007d24:	b913      	cbnz	r3, 8007d2c <_printf_float+0x1a0>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	07d0      	lsls	r0, r2, #31
 8007d2a:	d502      	bpl.n	8007d32 <_printf_float+0x1a6>
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	440b      	add	r3, r1
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	e7de      	b.n	8007cf8 <_printf_float+0x16c>
 8007d3a:	b913      	cbnz	r3, 8007d42 <_printf_float+0x1b6>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	07d2      	lsls	r2, r2, #31
 8007d40:	d501      	bpl.n	8007d46 <_printf_float+0x1ba>
 8007d42:	3302      	adds	r3, #2
 8007d44:	e7f4      	b.n	8007d30 <_printf_float+0x1a4>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7f2      	b.n	8007d30 <_printf_float+0x1a4>
 8007d4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	4299      	cmp	r1, r3
 8007d52:	db05      	blt.n	8007d60 <_printf_float+0x1d4>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	6121      	str	r1, [r4, #16]
 8007d58:	07d8      	lsls	r0, r3, #31
 8007d5a:	d5ea      	bpl.n	8007d32 <_printf_float+0x1a6>
 8007d5c:	1c4b      	adds	r3, r1, #1
 8007d5e:	e7e7      	b.n	8007d30 <_printf_float+0x1a4>
 8007d60:	2900      	cmp	r1, #0
 8007d62:	bfd4      	ite	le
 8007d64:	f1c1 0202 	rsble	r2, r1, #2
 8007d68:	2201      	movgt	r2, #1
 8007d6a:	4413      	add	r3, r2
 8007d6c:	e7e0      	b.n	8007d30 <_printf_float+0x1a4>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	055a      	lsls	r2, r3, #21
 8007d72:	d407      	bmi.n	8007d84 <_printf_float+0x1f8>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	4642      	mov	r2, r8
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d12c      	bne.n	8007ddc <_printf_float+0x250>
 8007d82:	e764      	b.n	8007c4e <_printf_float+0xc2>
 8007d84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d88:	f240 80e0 	bls.w	8007f4c <_printf_float+0x3c0>
 8007d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	f7f8 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d034      	beq.n	8007e06 <_printf_float+0x27a>
 8007d9c:	4a37      	ldr	r2, [pc, #220]	; (8007e7c <_printf_float+0x2f0>)
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4631      	mov	r1, r6
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b8      	blx	r7
 8007da6:	3001      	adds	r0, #1
 8007da8:	f43f af51 	beq.w	8007c4e <_printf_float+0xc2>
 8007dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db0:	429a      	cmp	r2, r3
 8007db2:	db02      	blt.n	8007dba <_printf_float+0x22e>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	07d8      	lsls	r0, r3, #31
 8007db8:	d510      	bpl.n	8007ddc <_printf_float+0x250>
 8007dba:	ee18 3a10 	vmov	r3, s16
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f af41 	beq.w	8007c4e <_printf_float+0xc2>
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	f104 091a 	add.w	r9, r4, #26
 8007dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	4543      	cmp	r3, r8
 8007dda:	dc09      	bgt.n	8007df0 <_printf_float+0x264>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	079b      	lsls	r3, r3, #30
 8007de0:	f100 8105 	bmi.w	8007fee <_printf_float+0x462>
 8007de4:	68e0      	ldr	r0, [r4, #12]
 8007de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de8:	4298      	cmp	r0, r3
 8007dea:	bfb8      	it	lt
 8007dec:	4618      	movlt	r0, r3
 8007dee:	e730      	b.n	8007c52 <_printf_float+0xc6>
 8007df0:	2301      	movs	r3, #1
 8007df2:	464a      	mov	r2, r9
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af27 	beq.w	8007c4e <_printf_float+0xc2>
 8007e00:	f108 0801 	add.w	r8, r8, #1
 8007e04:	e7e6      	b.n	8007dd4 <_printf_float+0x248>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc39      	bgt.n	8007e80 <_printf_float+0x2f4>
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <_printf_float+0x2f0>)
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	f43f af19 	beq.w	8007c4e <_printf_float+0xc2>
 8007e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e20:	4313      	orrs	r3, r2
 8007e22:	d102      	bne.n	8007e2a <_printf_float+0x29e>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	07d9      	lsls	r1, r3, #31
 8007e28:	d5d8      	bpl.n	8007ddc <_printf_float+0x250>
 8007e2a:	ee18 3a10 	vmov	r3, s16
 8007e2e:	4652      	mov	r2, sl
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f af09 	beq.w	8007c4e <_printf_float+0xc2>
 8007e3c:	f04f 0900 	mov.w	r9, #0
 8007e40:	f104 0a1a 	add.w	sl, r4, #26
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	425b      	negs	r3, r3
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	dc01      	bgt.n	8007e50 <_printf_float+0x2c4>
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4e:	e792      	b.n	8007d76 <_printf_float+0x1ea>
 8007e50:	2301      	movs	r3, #1
 8007e52:	4652      	mov	r2, sl
 8007e54:	4631      	mov	r1, r6
 8007e56:	4628      	mov	r0, r5
 8007e58:	47b8      	blx	r7
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	f43f aef7 	beq.w	8007c4e <_printf_float+0xc2>
 8007e60:	f109 0901 	add.w	r9, r9, #1
 8007e64:	e7ee      	b.n	8007e44 <_printf_float+0x2b8>
 8007e66:	bf00      	nop
 8007e68:	7fefffff 	.word	0x7fefffff
 8007e6c:	0800a4fc 	.word	0x0800a4fc
 8007e70:	0800a500 	.word	0x0800a500
 8007e74:	0800a508 	.word	0x0800a508
 8007e78:	0800a504 	.word	0x0800a504
 8007e7c:	0800a50c 	.word	0x0800a50c
 8007e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e84:	429a      	cmp	r2, r3
 8007e86:	bfa8      	it	ge
 8007e88:	461a      	movge	r2, r3
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	4691      	mov	r9, r2
 8007e8e:	dc37      	bgt.n	8007f00 <_printf_float+0x374>
 8007e90:	f04f 0b00 	mov.w	fp, #0
 8007e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e98:	f104 021a 	add.w	r2, r4, #26
 8007e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	eba3 0309 	sub.w	r3, r3, r9
 8007ea4:	455b      	cmp	r3, fp
 8007ea6:	dc33      	bgt.n	8007f10 <_printf_float+0x384>
 8007ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eac:	429a      	cmp	r2, r3
 8007eae:	db3b      	blt.n	8007f28 <_printf_float+0x39c>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	07da      	lsls	r2, r3, #31
 8007eb4:	d438      	bmi.n	8007f28 <_printf_float+0x39c>
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb8:	9a05      	ldr	r2, [sp, #20]
 8007eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ebc:	1a9a      	subs	r2, r3, r2
 8007ebe:	eba3 0901 	sub.w	r9, r3, r1
 8007ec2:	4591      	cmp	r9, r2
 8007ec4:	bfa8      	it	ge
 8007ec6:	4691      	movge	r9, r2
 8007ec8:	f1b9 0f00 	cmp.w	r9, #0
 8007ecc:	dc35      	bgt.n	8007f3a <_printf_float+0x3ae>
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed6:	f104 0a1a 	add.w	sl, r4, #26
 8007eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	eba3 0309 	sub.w	r3, r3, r9
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	f77f af79 	ble.w	8007ddc <_printf_float+0x250>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4652      	mov	r2, sl
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f aeaa 	beq.w	8007c4e <_printf_float+0xc2>
 8007efa:	f108 0801 	add.w	r8, r8, #1
 8007efe:	e7ec      	b.n	8007eda <_printf_float+0x34e>
 8007f00:	4613      	mov	r3, r2
 8007f02:	4631      	mov	r1, r6
 8007f04:	4642      	mov	r2, r8
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d1c0      	bne.n	8007e90 <_printf_float+0x304>
 8007f0e:	e69e      	b.n	8007c4e <_printf_float+0xc2>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4631      	mov	r1, r6
 8007f14:	4628      	mov	r0, r5
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f ae97 	beq.w	8007c4e <_printf_float+0xc2>
 8007f20:	9a05      	ldr	r2, [sp, #20]
 8007f22:	f10b 0b01 	add.w	fp, fp, #1
 8007f26:	e7b9      	b.n	8007e9c <_printf_float+0x310>
 8007f28:	ee18 3a10 	vmov	r3, s16
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1be      	bne.n	8007eb6 <_printf_float+0x32a>
 8007f38:	e689      	b.n	8007c4e <_printf_float+0xc2>
 8007f3a:	9a05      	ldr	r2, [sp, #20]
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	4442      	add	r2, r8
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	d1c1      	bne.n	8007ece <_printf_float+0x342>
 8007f4a:	e680      	b.n	8007c4e <_printf_float+0xc2>
 8007f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4e:	2a01      	cmp	r2, #1
 8007f50:	dc01      	bgt.n	8007f56 <_printf_float+0x3ca>
 8007f52:	07db      	lsls	r3, r3, #31
 8007f54:	d538      	bpl.n	8007fc8 <_printf_float+0x43c>
 8007f56:	2301      	movs	r3, #1
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	f43f ae74 	beq.w	8007c4e <_printf_float+0xc2>
 8007f66:	ee18 3a10 	vmov	r3, s16
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f ae6b 	beq.w	8007c4e <_printf_float+0xc2>
 8007f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f7f8 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f84:	b9d8      	cbnz	r0, 8007fbe <_printf_float+0x432>
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	f108 0201 	add.w	r2, r8, #1
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	d10e      	bne.n	8007fb6 <_printf_float+0x42a>
 8007f98:	e659      	b.n	8007c4e <_printf_float+0xc2>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae52 	beq.w	8007c4e <_printf_float+0xc2>
 8007faa:	f108 0801 	add.w	r8, r8, #1
 8007fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4543      	cmp	r3, r8
 8007fb4:	dcf1      	bgt.n	8007f9a <_printf_float+0x40e>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fbc:	e6dc      	b.n	8007d78 <_printf_float+0x1ec>
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	f104 0a1a 	add.w	sl, r4, #26
 8007fc6:	e7f2      	b.n	8007fae <_printf_float+0x422>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4642      	mov	r2, r8
 8007fcc:	e7df      	b.n	8007f8e <_printf_float+0x402>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	464a      	mov	r2, r9
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae38 	beq.w	8007c4e <_printf_float+0xc2>
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	dcf0      	bgt.n	8007fce <_printf_float+0x442>
 8007fec:	e6fa      	b.n	8007de4 <_printf_float+0x258>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	f104 0919 	add.w	r9, r4, #25
 8007ff6:	e7f4      	b.n	8007fe2 <_printf_float+0x456>

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	4293      	cmp	r3, r2
 800800a:	bfb8      	it	lt
 800800c:	4613      	movlt	r3, r2
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008014:	4607      	mov	r7, r0
 8008016:	460c      	mov	r4, r1
 8008018:	b10a      	cbz	r2, 800801e <_printf_common+0x26>
 800801a:	3301      	adds	r3, #1
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	0699      	lsls	r1, r3, #26
 8008022:	bf42      	ittt	mi
 8008024:	6833      	ldrmi	r3, [r6, #0]
 8008026:	3302      	addmi	r3, #2
 8008028:	6033      	strmi	r3, [r6, #0]
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	f015 0506 	ands.w	r5, r5, #6
 8008030:	d106      	bne.n	8008040 <_printf_common+0x48>
 8008032:	f104 0a19 	add.w	sl, r4, #25
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	6832      	ldr	r2, [r6, #0]
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	42ab      	cmp	r3, r5
 800803e:	dc26      	bgt.n	800808e <_printf_common+0x96>
 8008040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008044:	1e13      	subs	r3, r2, #0
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	bf18      	it	ne
 800804a:	2301      	movne	r3, #1
 800804c:	0692      	lsls	r2, r2, #26
 800804e:	d42b      	bmi.n	80080a8 <_printf_common+0xb0>
 8008050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008054:	4649      	mov	r1, r9
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	3001      	adds	r0, #1
 800805c:	d01e      	beq.n	800809c <_printf_common+0xa4>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	68e5      	ldr	r5, [r4, #12]
 8008062:	6832      	ldr	r2, [r6, #0]
 8008064:	f003 0306 	and.w	r3, r3, #6
 8008068:	2b04      	cmp	r3, #4
 800806a:	bf08      	it	eq
 800806c:	1aad      	subeq	r5, r5, r2
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	bf0c      	ite	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	2500      	movne	r5, #0
 800807a:	4293      	cmp	r3, r2
 800807c:	bfc4      	itt	gt
 800807e:	1a9b      	subgt	r3, r3, r2
 8008080:	18ed      	addgt	r5, r5, r3
 8008082:	2600      	movs	r6, #0
 8008084:	341a      	adds	r4, #26
 8008086:	42b5      	cmp	r5, r6
 8008088:	d11a      	bne.n	80080c0 <_printf_common+0xc8>
 800808a:	2000      	movs	r0, #0
 800808c:	e008      	b.n	80080a0 <_printf_common+0xa8>
 800808e:	2301      	movs	r3, #1
 8008090:	4652      	mov	r2, sl
 8008092:	4649      	mov	r1, r9
 8008094:	4638      	mov	r0, r7
 8008096:	47c0      	blx	r8
 8008098:	3001      	adds	r0, #1
 800809a:	d103      	bne.n	80080a4 <_printf_common+0xac>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	3501      	adds	r5, #1
 80080a6:	e7c6      	b.n	8008036 <_printf_common+0x3e>
 80080a8:	18e1      	adds	r1, r4, r3
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	2030      	movs	r0, #48	; 0x30
 80080ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b2:	4422      	add	r2, r4
 80080b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080bc:	3302      	adds	r3, #2
 80080be:	e7c7      	b.n	8008050 <_printf_common+0x58>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4622      	mov	r2, r4
 80080c4:	4649      	mov	r1, r9
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	3001      	adds	r0, #1
 80080cc:	d0e6      	beq.n	800809c <_printf_common+0xa4>
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7d9      	b.n	8008086 <_printf_common+0x8e>
	...

080080d4 <_printf_i>:
 80080d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	7e0f      	ldrb	r7, [r1, #24]
 80080da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080dc:	2f78      	cmp	r7, #120	; 0x78
 80080de:	4691      	mov	r9, r2
 80080e0:	4680      	mov	r8, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	469a      	mov	sl, r3
 80080e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080ea:	d807      	bhi.n	80080fc <_printf_i+0x28>
 80080ec:	2f62      	cmp	r7, #98	; 0x62
 80080ee:	d80a      	bhi.n	8008106 <_printf_i+0x32>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f000 80d8 	beq.w	80082a6 <_printf_i+0x1d2>
 80080f6:	2f58      	cmp	r7, #88	; 0x58
 80080f8:	f000 80a3 	beq.w	8008242 <_printf_i+0x16e>
 80080fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008104:	e03a      	b.n	800817c <_printf_i+0xa8>
 8008106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800810a:	2b15      	cmp	r3, #21
 800810c:	d8f6      	bhi.n	80080fc <_printf_i+0x28>
 800810e:	a101      	add	r1, pc, #4	; (adr r1, 8008114 <_printf_i+0x40>)
 8008110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008114:	0800816d 	.word	0x0800816d
 8008118:	08008181 	.word	0x08008181
 800811c:	080080fd 	.word	0x080080fd
 8008120:	080080fd 	.word	0x080080fd
 8008124:	080080fd 	.word	0x080080fd
 8008128:	080080fd 	.word	0x080080fd
 800812c:	08008181 	.word	0x08008181
 8008130:	080080fd 	.word	0x080080fd
 8008134:	080080fd 	.word	0x080080fd
 8008138:	080080fd 	.word	0x080080fd
 800813c:	080080fd 	.word	0x080080fd
 8008140:	0800828d 	.word	0x0800828d
 8008144:	080081b1 	.word	0x080081b1
 8008148:	0800826f 	.word	0x0800826f
 800814c:	080080fd 	.word	0x080080fd
 8008150:	080080fd 	.word	0x080080fd
 8008154:	080082af 	.word	0x080082af
 8008158:	080080fd 	.word	0x080080fd
 800815c:	080081b1 	.word	0x080081b1
 8008160:	080080fd 	.word	0x080080fd
 8008164:	080080fd 	.word	0x080080fd
 8008168:	08008277 	.word	0x08008277
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	1d1a      	adds	r2, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	602a      	str	r2, [r5, #0]
 8008174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800817c:	2301      	movs	r3, #1
 800817e:	e0a3      	b.n	80082c8 <_printf_i+0x1f4>
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	6829      	ldr	r1, [r5, #0]
 8008184:	0606      	lsls	r6, r0, #24
 8008186:	f101 0304 	add.w	r3, r1, #4
 800818a:	d50a      	bpl.n	80081a2 <_printf_i+0xce>
 800818c:	680e      	ldr	r6, [r1, #0]
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	2e00      	cmp	r6, #0
 8008192:	da03      	bge.n	800819c <_printf_i+0xc8>
 8008194:	232d      	movs	r3, #45	; 0x2d
 8008196:	4276      	negs	r6, r6
 8008198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819c:	485e      	ldr	r0, [pc, #376]	; (8008318 <_printf_i+0x244>)
 800819e:	230a      	movs	r3, #10
 80081a0:	e019      	b.n	80081d6 <_printf_i+0x102>
 80081a2:	680e      	ldr	r6, [r1, #0]
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081aa:	bf18      	it	ne
 80081ac:	b236      	sxthne	r6, r6
 80081ae:	e7ef      	b.n	8008190 <_printf_i+0xbc>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	6820      	ldr	r0, [r4, #0]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	6029      	str	r1, [r5, #0]
 80081b8:	0601      	lsls	r1, r0, #24
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0xec>
 80081bc:	681e      	ldr	r6, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0xf2>
 80081c0:	0646      	lsls	r6, r0, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0xe8>
 80081c4:	881e      	ldrh	r6, [r3, #0]
 80081c6:	4854      	ldr	r0, [pc, #336]	; (8008318 <_printf_i+0x244>)
 80081c8:	2f6f      	cmp	r7, #111	; 0x6f
 80081ca:	bf0c      	ite	eq
 80081cc:	2308      	moveq	r3, #8
 80081ce:	230a      	movne	r3, #10
 80081d0:	2100      	movs	r1, #0
 80081d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d6:	6865      	ldr	r5, [r4, #4]
 80081d8:	60a5      	str	r5, [r4, #8]
 80081da:	2d00      	cmp	r5, #0
 80081dc:	bfa2      	ittt	ge
 80081de:	6821      	ldrge	r1, [r4, #0]
 80081e0:	f021 0104 	bicge.w	r1, r1, #4
 80081e4:	6021      	strge	r1, [r4, #0]
 80081e6:	b90e      	cbnz	r6, 80081ec <_printf_i+0x118>
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	d04d      	beq.n	8008288 <_printf_i+0x1b4>
 80081ec:	4615      	mov	r5, r2
 80081ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80081f2:	fb03 6711 	mls	r7, r3, r1, r6
 80081f6:	5dc7      	ldrb	r7, [r0, r7]
 80081f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081fc:	4637      	mov	r7, r6
 80081fe:	42bb      	cmp	r3, r7
 8008200:	460e      	mov	r6, r1
 8008202:	d9f4      	bls.n	80081ee <_printf_i+0x11a>
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10b      	bne.n	8008220 <_printf_i+0x14c>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	07de      	lsls	r6, r3, #31
 800820c:	d508      	bpl.n	8008220 <_printf_i+0x14c>
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4299      	cmp	r1, r3
 8008214:	bfde      	ittt	le
 8008216:	2330      	movle	r3, #48	; 0x30
 8008218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800821c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008220:	1b52      	subs	r2, r2, r5
 8008222:	6122      	str	r2, [r4, #16]
 8008224:	f8cd a000 	str.w	sl, [sp]
 8008228:	464b      	mov	r3, r9
 800822a:	aa03      	add	r2, sp, #12
 800822c:	4621      	mov	r1, r4
 800822e:	4640      	mov	r0, r8
 8008230:	f7ff fee2 	bl	8007ff8 <_printf_common>
 8008234:	3001      	adds	r0, #1
 8008236:	d14c      	bne.n	80082d2 <_printf_i+0x1fe>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	b004      	add	sp, #16
 800823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008242:	4835      	ldr	r0, [pc, #212]	; (8008318 <_printf_i+0x244>)
 8008244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008248:	6829      	ldr	r1, [r5, #0]
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008250:	6029      	str	r1, [r5, #0]
 8008252:	061d      	lsls	r5, r3, #24
 8008254:	d514      	bpl.n	8008280 <_printf_i+0x1ac>
 8008256:	07df      	lsls	r7, r3, #31
 8008258:	bf44      	itt	mi
 800825a:	f043 0320 	orrmi.w	r3, r3, #32
 800825e:	6023      	strmi	r3, [r4, #0]
 8008260:	b91e      	cbnz	r6, 800826a <_printf_i+0x196>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f023 0320 	bic.w	r3, r3, #32
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	2310      	movs	r3, #16
 800826c:	e7b0      	b.n	80081d0 <_printf_i+0xfc>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f043 0320 	orr.w	r3, r3, #32
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	2378      	movs	r3, #120	; 0x78
 8008278:	4828      	ldr	r0, [pc, #160]	; (800831c <_printf_i+0x248>)
 800827a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827e:	e7e3      	b.n	8008248 <_printf_i+0x174>
 8008280:	0659      	lsls	r1, r3, #25
 8008282:	bf48      	it	mi
 8008284:	b2b6      	uxthmi	r6, r6
 8008286:	e7e6      	b.n	8008256 <_printf_i+0x182>
 8008288:	4615      	mov	r5, r2
 800828a:	e7bb      	b.n	8008204 <_printf_i+0x130>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	6826      	ldr	r6, [r4, #0]
 8008290:	6961      	ldr	r1, [r4, #20]
 8008292:	1d18      	adds	r0, r3, #4
 8008294:	6028      	str	r0, [r5, #0]
 8008296:	0635      	lsls	r5, r6, #24
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0x1cc>
 800829c:	6019      	str	r1, [r3, #0]
 800829e:	e002      	b.n	80082a6 <_printf_i+0x1d2>
 80082a0:	0670      	lsls	r0, r6, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0x1c8>
 80082a4:	8019      	strh	r1, [r3, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	4615      	mov	r5, r2
 80082ac:	e7ba      	b.n	8008224 <_printf_i+0x150>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	602a      	str	r2, [r5, #0]
 80082b4:	681d      	ldr	r5, [r3, #0]
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4628      	mov	r0, r5
 80082bc:	f7f7 ff90 	bl	80001e0 <memchr>
 80082c0:	b108      	cbz	r0, 80082c6 <_printf_i+0x1f2>
 80082c2:	1b40      	subs	r0, r0, r5
 80082c4:	6060      	str	r0, [r4, #4]
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	2300      	movs	r3, #0
 80082cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d0:	e7a8      	b.n	8008224 <_printf_i+0x150>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	462a      	mov	r2, r5
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d0ab      	beq.n	8008238 <_printf_i+0x164>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	079b      	lsls	r3, r3, #30
 80082e4:	d413      	bmi.n	800830e <_printf_i+0x23a>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	4298      	cmp	r0, r3
 80082ec:	bfb8      	it	lt
 80082ee:	4618      	movlt	r0, r3
 80082f0:	e7a4      	b.n	800823c <_printf_i+0x168>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4632      	mov	r2, r6
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	47d0      	blx	sl
 80082fc:	3001      	adds	r0, #1
 80082fe:	d09b      	beq.n	8008238 <_printf_i+0x164>
 8008300:	3501      	adds	r5, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	42ab      	cmp	r3, r5
 800830a:	dcf2      	bgt.n	80082f2 <_printf_i+0x21e>
 800830c:	e7eb      	b.n	80082e6 <_printf_i+0x212>
 800830e:	2500      	movs	r5, #0
 8008310:	f104 0619 	add.w	r6, r4, #25
 8008314:	e7f5      	b.n	8008302 <_printf_i+0x22e>
 8008316:	bf00      	nop
 8008318:	0800a50e 	.word	0x0800a50e
 800831c:	0800a51f 	.word	0x0800a51f

08008320 <quorem>:
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	6903      	ldr	r3, [r0, #16]
 8008326:	690c      	ldr	r4, [r1, #16]
 8008328:	42a3      	cmp	r3, r4
 800832a:	4607      	mov	r7, r0
 800832c:	f2c0 8081 	blt.w	8008432 <quorem+0x112>
 8008330:	3c01      	subs	r4, #1
 8008332:	f101 0814 	add.w	r8, r1, #20
 8008336:	f100 0514 	add.w	r5, r0, #20
 800833a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008348:	3301      	adds	r3, #1
 800834a:	429a      	cmp	r2, r3
 800834c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008354:	fbb2 f6f3 	udiv	r6, r2, r3
 8008358:	d331      	bcc.n	80083be <quorem+0x9e>
 800835a:	f04f 0e00 	mov.w	lr, #0
 800835e:	4640      	mov	r0, r8
 8008360:	46ac      	mov	ip, r5
 8008362:	46f2      	mov	sl, lr
 8008364:	f850 2b04 	ldr.w	r2, [r0], #4
 8008368:	b293      	uxth	r3, r2
 800836a:	fb06 e303 	mla	r3, r6, r3, lr
 800836e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ebaa 0303 	sub.w	r3, sl, r3
 8008378:	f8dc a000 	ldr.w	sl, [ip]
 800837c:	0c12      	lsrs	r2, r2, #16
 800837e:	fa13 f38a 	uxtah	r3, r3, sl
 8008382:	fb06 e202 	mla	r2, r6, r2, lr
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800838e:	b292      	uxth	r2, r2
 8008390:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008398:	f8bd 3000 	ldrh.w	r3, [sp]
 800839c:	4581      	cmp	r9, r0
 800839e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a2:	f84c 3b04 	str.w	r3, [ip], #4
 80083a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083aa:	d2db      	bcs.n	8008364 <quorem+0x44>
 80083ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80083b0:	b92b      	cbnz	r3, 80083be <quorem+0x9e>
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	3b04      	subs	r3, #4
 80083b6:	429d      	cmp	r5, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	d32e      	bcc.n	800841a <quorem+0xfa>
 80083bc:	613c      	str	r4, [r7, #16]
 80083be:	4638      	mov	r0, r7
 80083c0:	f001 f8b6 	bl	8009530 <__mcmp>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	db24      	blt.n	8008412 <quorem+0xf2>
 80083c8:	3601      	adds	r6, #1
 80083ca:	4628      	mov	r0, r5
 80083cc:	f04f 0c00 	mov.w	ip, #0
 80083d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80083d4:	f8d0 e000 	ldr.w	lr, [r0]
 80083d8:	b293      	uxth	r3, r2
 80083da:	ebac 0303 	sub.w	r3, ip, r3
 80083de:	0c12      	lsrs	r2, r2, #16
 80083e0:	fa13 f38e 	uxtah	r3, r3, lr
 80083e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083f2:	45c1      	cmp	r9, r8
 80083f4:	f840 3b04 	str.w	r3, [r0], #4
 80083f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083fc:	d2e8      	bcs.n	80083d0 <quorem+0xb0>
 80083fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008406:	b922      	cbnz	r2, 8008412 <quorem+0xf2>
 8008408:	3b04      	subs	r3, #4
 800840a:	429d      	cmp	r5, r3
 800840c:	461a      	mov	r2, r3
 800840e:	d30a      	bcc.n	8008426 <quorem+0x106>
 8008410:	613c      	str	r4, [r7, #16]
 8008412:	4630      	mov	r0, r6
 8008414:	b003      	add	sp, #12
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	3b04      	subs	r3, #4
 800841e:	2a00      	cmp	r2, #0
 8008420:	d1cc      	bne.n	80083bc <quorem+0x9c>
 8008422:	3c01      	subs	r4, #1
 8008424:	e7c7      	b.n	80083b6 <quorem+0x96>
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	3b04      	subs	r3, #4
 800842a:	2a00      	cmp	r2, #0
 800842c:	d1f0      	bne.n	8008410 <quorem+0xf0>
 800842e:	3c01      	subs	r4, #1
 8008430:	e7eb      	b.n	800840a <quorem+0xea>
 8008432:	2000      	movs	r0, #0
 8008434:	e7ee      	b.n	8008414 <quorem+0xf4>
	...

08008438 <_dtoa_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b04 	vpush	{d8-d9}
 8008440:	ec57 6b10 	vmov	r6, r7, d0
 8008444:	b093      	sub	sp, #76	; 0x4c
 8008446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008448:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800844c:	9106      	str	r1, [sp, #24]
 800844e:	ee10 aa10 	vmov	sl, s0
 8008452:	4604      	mov	r4, r0
 8008454:	9209      	str	r2, [sp, #36]	; 0x24
 8008456:	930c      	str	r3, [sp, #48]	; 0x30
 8008458:	46bb      	mov	fp, r7
 800845a:	b975      	cbnz	r5, 800847a <_dtoa_r+0x42>
 800845c:	2010      	movs	r0, #16
 800845e:	f000 fddd 	bl	800901c <malloc>
 8008462:	4602      	mov	r2, r0
 8008464:	6260      	str	r0, [r4, #36]	; 0x24
 8008466:	b920      	cbnz	r0, 8008472 <_dtoa_r+0x3a>
 8008468:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <_dtoa_r+0x2d0>)
 800846a:	21ea      	movs	r1, #234	; 0xea
 800846c:	48a7      	ldr	r0, [pc, #668]	; (800870c <_dtoa_r+0x2d4>)
 800846e:	f001 fa67 	bl	8009940 <__assert_func>
 8008472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008476:	6005      	str	r5, [r0, #0]
 8008478:	60c5      	str	r5, [r0, #12]
 800847a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	b151      	cbz	r1, 8008496 <_dtoa_r+0x5e>
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	604a      	str	r2, [r1, #4]
 8008484:	2301      	movs	r3, #1
 8008486:	4093      	lsls	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
 800848a:	4620      	mov	r0, r4
 800848c:	f000 fe0e 	bl	80090ac <_Bfree>
 8008490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	1e3b      	subs	r3, r7, #0
 8008498:	bfaa      	itet	ge
 800849a:	2300      	movge	r3, #0
 800849c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80084a0:	f8c8 3000 	strge.w	r3, [r8]
 80084a4:	4b9a      	ldr	r3, [pc, #616]	; (8008710 <_dtoa_r+0x2d8>)
 80084a6:	bfbc      	itt	lt
 80084a8:	2201      	movlt	r2, #1
 80084aa:	f8c8 2000 	strlt.w	r2, [r8]
 80084ae:	ea33 030b 	bics.w	r3, r3, fp
 80084b2:	d11b      	bne.n	80084ec <_dtoa_r+0xb4>
 80084b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084c0:	4333      	orrs	r3, r6
 80084c2:	f000 8592 	beq.w	8008fea <_dtoa_r+0xbb2>
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	b963      	cbnz	r3, 80084e4 <_dtoa_r+0xac>
 80084ca:	4b92      	ldr	r3, [pc, #584]	; (8008714 <_dtoa_r+0x2dc>)
 80084cc:	e022      	b.n	8008514 <_dtoa_r+0xdc>
 80084ce:	4b92      	ldr	r3, [pc, #584]	; (8008718 <_dtoa_r+0x2e0>)
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	3308      	adds	r3, #8
 80084d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	9801      	ldr	r0, [sp, #4]
 80084da:	b013      	add	sp, #76	; 0x4c
 80084dc:	ecbd 8b04 	vpop	{d8-d9}
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	4b8b      	ldr	r3, [pc, #556]	; (8008714 <_dtoa_r+0x2dc>)
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	3303      	adds	r3, #3
 80084ea:	e7f3      	b.n	80084d4 <_dtoa_r+0x9c>
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	f7f8 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80084f8:	ec4b ab19 	vmov	d9, sl, fp
 80084fc:	4680      	mov	r8, r0
 80084fe:	b158      	cbz	r0, 8008518 <_dtoa_r+0xe0>
 8008500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008502:	2301      	movs	r3, #1
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 856b 	beq.w	8008fe4 <_dtoa_r+0xbac>
 800850e:	4883      	ldr	r0, [pc, #524]	; (800871c <_dtoa_r+0x2e4>)
 8008510:	6018      	str	r0, [r3, #0]
 8008512:	1e43      	subs	r3, r0, #1
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	e7df      	b.n	80084d8 <_dtoa_r+0xa0>
 8008518:	ec4b ab10 	vmov	d0, sl, fp
 800851c:	aa10      	add	r2, sp, #64	; 0x40
 800851e:	a911      	add	r1, sp, #68	; 0x44
 8008520:	4620      	mov	r0, r4
 8008522:	f001 f8ab 	bl	800967c <__d2b>
 8008526:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800852a:	ee08 0a10 	vmov	s16, r0
 800852e:	2d00      	cmp	r5, #0
 8008530:	f000 8084 	beq.w	800863c <_dtoa_r+0x204>
 8008534:	ee19 3a90 	vmov	r3, s19
 8008538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800853c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008540:	4656      	mov	r6, sl
 8008542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800854a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800854e:	4b74      	ldr	r3, [pc, #464]	; (8008720 <_dtoa_r+0x2e8>)
 8008550:	2200      	movs	r2, #0
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f7 fe97 	bl	8000288 <__aeabi_dsub>
 800855a:	a365      	add	r3, pc, #404	; (adr r3, 80086f0 <_dtoa_r+0x2b8>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f7f8 f84a 	bl	80005f8 <__aeabi_dmul>
 8008564:	a364      	add	r3, pc, #400	; (adr r3, 80086f8 <_dtoa_r+0x2c0>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe8f 	bl	800028c <__adddf3>
 800856e:	4606      	mov	r6, r0
 8008570:	4628      	mov	r0, r5
 8008572:	460f      	mov	r7, r1
 8008574:	f7f7 ffd6 	bl	8000524 <__aeabi_i2d>
 8008578:	a361      	add	r3, pc, #388	; (adr r3, 8008700 <_dtoa_r+0x2c8>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 f83b 	bl	80005f8 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f7 fe7f 	bl	800028c <__adddf3>
 800858e:	4606      	mov	r6, r0
 8008590:	460f      	mov	r7, r1
 8008592:	f7f8 fae1 	bl	8000b58 <__aeabi_d2iz>
 8008596:	2200      	movs	r2, #0
 8008598:	9000      	str	r0, [sp, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f8 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80085a4:	b150      	cbz	r0, 80085bc <_dtoa_r+0x184>
 80085a6:	9800      	ldr	r0, [sp, #0]
 80085a8:	f7f7 ffbc 	bl	8000524 <__aeabi_i2d>
 80085ac:	4632      	mov	r2, r6
 80085ae:	463b      	mov	r3, r7
 80085b0:	f7f8 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b4:	b910      	cbnz	r0, 80085bc <_dtoa_r+0x184>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	2b16      	cmp	r3, #22
 80085c0:	d85a      	bhi.n	8008678 <_dtoa_r+0x240>
 80085c2:	9a00      	ldr	r2, [sp, #0]
 80085c4:	4b57      	ldr	r3, [pc, #348]	; (8008724 <_dtoa_r+0x2ec>)
 80085c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	ec51 0b19 	vmov	r0, r1, d9
 80085d2:	f7f8 fa83 	bl	8000adc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d050      	beq.n	800867c <_dtoa_r+0x244>
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	3b01      	subs	r3, #1
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085e6:	1b5d      	subs	r5, r3, r5
 80085e8:	1e6b      	subs	r3, r5, #1
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	bf45      	ittet	mi
 80085ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80085f2:	9304      	strmi	r3, [sp, #16]
 80085f4:	2300      	movpl	r3, #0
 80085f6:	2300      	movmi	r3, #0
 80085f8:	bf4c      	ite	mi
 80085fa:	9305      	strmi	r3, [sp, #20]
 80085fc:	9304      	strpl	r3, [sp, #16]
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	db3d      	blt.n	8008680 <_dtoa_r+0x248>
 8008604:	9b05      	ldr	r3, [sp, #20]
 8008606:	9a00      	ldr	r2, [sp, #0]
 8008608:	920a      	str	r2, [sp, #40]	; 0x28
 800860a:	4413      	add	r3, r2
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	2300      	movs	r3, #0
 8008610:	9307      	str	r3, [sp, #28]
 8008612:	9b06      	ldr	r3, [sp, #24]
 8008614:	2b09      	cmp	r3, #9
 8008616:	f200 8089 	bhi.w	800872c <_dtoa_r+0x2f4>
 800861a:	2b05      	cmp	r3, #5
 800861c:	bfc4      	itt	gt
 800861e:	3b04      	subgt	r3, #4
 8008620:	9306      	strgt	r3, [sp, #24]
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	f1a3 0302 	sub.w	r3, r3, #2
 8008628:	bfcc      	ite	gt
 800862a:	2500      	movgt	r5, #0
 800862c:	2501      	movle	r5, #1
 800862e:	2b03      	cmp	r3, #3
 8008630:	f200 8087 	bhi.w	8008742 <_dtoa_r+0x30a>
 8008634:	e8df f003 	tbb	[pc, r3]
 8008638:	59383a2d 	.word	0x59383a2d
 800863c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008640:	441d      	add	r5, r3
 8008642:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008646:	2b20      	cmp	r3, #32
 8008648:	bfc1      	itttt	gt
 800864a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800864e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008652:	fa0b f303 	lslgt.w	r3, fp, r3
 8008656:	fa26 f000 	lsrgt.w	r0, r6, r0
 800865a:	bfda      	itte	le
 800865c:	f1c3 0320 	rsble	r3, r3, #32
 8008660:	fa06 f003 	lslle.w	r0, r6, r3
 8008664:	4318      	orrgt	r0, r3
 8008666:	f7f7 ff4d 	bl	8000504 <__aeabi_ui2d>
 800866a:	2301      	movs	r3, #1
 800866c:	4606      	mov	r6, r0
 800866e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008672:	3d01      	subs	r5, #1
 8008674:	930e      	str	r3, [sp, #56]	; 0x38
 8008676:	e76a      	b.n	800854e <_dtoa_r+0x116>
 8008678:	2301      	movs	r3, #1
 800867a:	e7b2      	b.n	80085e2 <_dtoa_r+0x1aa>
 800867c:	900b      	str	r0, [sp, #44]	; 0x2c
 800867e:	e7b1      	b.n	80085e4 <_dtoa_r+0x1ac>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	9a00      	ldr	r2, [sp, #0]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	4253      	negs	r3, r2
 800868a:	9307      	str	r3, [sp, #28]
 800868c:	2300      	movs	r3, #0
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	e7bf      	b.n	8008612 <_dtoa_r+0x1da>
 8008692:	2300      	movs	r3, #0
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc55      	bgt.n	8008748 <_dtoa_r+0x310>
 800869c:	2301      	movs	r3, #1
 800869e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086a2:	461a      	mov	r2, r3
 80086a4:	9209      	str	r2, [sp, #36]	; 0x24
 80086a6:	e00c      	b.n	80086c2 <_dtoa_r+0x28a>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e7f3      	b.n	8008694 <_dtoa_r+0x25c>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	9308      	str	r3, [sp, #32]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	4413      	add	r3, r2
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	3301      	adds	r3, #1
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	bfb8      	it	lt
 80086c0:	2301      	movlt	r3, #1
 80086c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086c4:	2200      	movs	r2, #0
 80086c6:	6042      	str	r2, [r0, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	f102 0614 	add.w	r6, r2, #20
 80086ce:	429e      	cmp	r6, r3
 80086d0:	6841      	ldr	r1, [r0, #4]
 80086d2:	d93d      	bls.n	8008750 <_dtoa_r+0x318>
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 fca9 	bl	800902c <_Balloc>
 80086da:	9001      	str	r0, [sp, #4]
 80086dc:	2800      	cmp	r0, #0
 80086de:	d13b      	bne.n	8008758 <_dtoa_r+0x320>
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <_dtoa_r+0x2f0>)
 80086e2:	4602      	mov	r2, r0
 80086e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086e8:	e6c0      	b.n	800846c <_dtoa_r+0x34>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7df      	b.n	80086ae <_dtoa_r+0x276>
 80086ee:	bf00      	nop
 80086f0:	636f4361 	.word	0x636f4361
 80086f4:	3fd287a7 	.word	0x3fd287a7
 80086f8:	8b60c8b3 	.word	0x8b60c8b3
 80086fc:	3fc68a28 	.word	0x3fc68a28
 8008700:	509f79fb 	.word	0x509f79fb
 8008704:	3fd34413 	.word	0x3fd34413
 8008708:	0800a53d 	.word	0x0800a53d
 800870c:	0800a554 	.word	0x0800a554
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	0800a539 	.word	0x0800a539
 8008718:	0800a530 	.word	0x0800a530
 800871c:	0800a50d 	.word	0x0800a50d
 8008720:	3ff80000 	.word	0x3ff80000
 8008724:	0800a648 	.word	0x0800a648
 8008728:	0800a5af 	.word	0x0800a5af
 800872c:	2501      	movs	r5, #1
 800872e:	2300      	movs	r3, #0
 8008730:	9306      	str	r3, [sp, #24]
 8008732:	9508      	str	r5, [sp, #32]
 8008734:	f04f 33ff 	mov.w	r3, #4294967295
 8008738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	2312      	movs	r3, #18
 8008740:	e7b0      	b.n	80086a4 <_dtoa_r+0x26c>
 8008742:	2301      	movs	r3, #1
 8008744:	9308      	str	r3, [sp, #32]
 8008746:	e7f5      	b.n	8008734 <_dtoa_r+0x2fc>
 8008748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800874e:	e7b8      	b.n	80086c2 <_dtoa_r+0x28a>
 8008750:	3101      	adds	r1, #1
 8008752:	6041      	str	r1, [r0, #4]
 8008754:	0052      	lsls	r2, r2, #1
 8008756:	e7b8      	b.n	80086ca <_dtoa_r+0x292>
 8008758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875a:	9a01      	ldr	r2, [sp, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	2b0e      	cmp	r3, #14
 8008762:	f200 809d 	bhi.w	80088a0 <_dtoa_r+0x468>
 8008766:	2d00      	cmp	r5, #0
 8008768:	f000 809a 	beq.w	80088a0 <_dtoa_r+0x468>
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	dd32      	ble.n	80087d8 <_dtoa_r+0x3a0>
 8008772:	4ab7      	ldr	r2, [pc, #732]	; (8008a50 <_dtoa_r+0x618>)
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800877c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	05d8      	lsls	r0, r3, #23
 8008784:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008788:	d516      	bpl.n	80087b8 <_dtoa_r+0x380>
 800878a:	4bb2      	ldr	r3, [pc, #712]	; (8008a54 <_dtoa_r+0x61c>)
 800878c:	ec51 0b19 	vmov	r0, r1, d9
 8008790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008794:	f7f8 f85a 	bl	800084c <__aeabi_ddiv>
 8008798:	f007 070f 	and.w	r7, r7, #15
 800879c:	4682      	mov	sl, r0
 800879e:	468b      	mov	fp, r1
 80087a0:	2503      	movs	r5, #3
 80087a2:	4eac      	ldr	r6, [pc, #688]	; (8008a54 <_dtoa_r+0x61c>)
 80087a4:	b957      	cbnz	r7, 80087bc <_dtoa_r+0x384>
 80087a6:	4642      	mov	r2, r8
 80087a8:	464b      	mov	r3, r9
 80087aa:	4650      	mov	r0, sl
 80087ac:	4659      	mov	r1, fp
 80087ae:	f7f8 f84d 	bl	800084c <__aeabi_ddiv>
 80087b2:	4682      	mov	sl, r0
 80087b4:	468b      	mov	fp, r1
 80087b6:	e028      	b.n	800880a <_dtoa_r+0x3d2>
 80087b8:	2502      	movs	r5, #2
 80087ba:	e7f2      	b.n	80087a2 <_dtoa_r+0x36a>
 80087bc:	07f9      	lsls	r1, r7, #31
 80087be:	d508      	bpl.n	80087d2 <_dtoa_r+0x39a>
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087c8:	f7f7 ff16 	bl	80005f8 <__aeabi_dmul>
 80087cc:	3501      	adds	r5, #1
 80087ce:	4680      	mov	r8, r0
 80087d0:	4689      	mov	r9, r1
 80087d2:	107f      	asrs	r7, r7, #1
 80087d4:	3608      	adds	r6, #8
 80087d6:	e7e5      	b.n	80087a4 <_dtoa_r+0x36c>
 80087d8:	f000 809b 	beq.w	8008912 <_dtoa_r+0x4da>
 80087dc:	9b00      	ldr	r3, [sp, #0]
 80087de:	4f9d      	ldr	r7, [pc, #628]	; (8008a54 <_dtoa_r+0x61c>)
 80087e0:	425e      	negs	r6, r3
 80087e2:	4b9b      	ldr	r3, [pc, #620]	; (8008a50 <_dtoa_r+0x618>)
 80087e4:	f006 020f 	and.w	r2, r6, #15
 80087e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	ec51 0b19 	vmov	r0, r1, d9
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	1136      	asrs	r6, r6, #4
 80087fa:	4682      	mov	sl, r0
 80087fc:	468b      	mov	fp, r1
 80087fe:	2300      	movs	r3, #0
 8008800:	2502      	movs	r5, #2
 8008802:	2e00      	cmp	r6, #0
 8008804:	d17a      	bne.n	80088fc <_dtoa_r+0x4c4>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1d3      	bne.n	80087b2 <_dtoa_r+0x37a>
 800880a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8082 	beq.w	8008916 <_dtoa_r+0x4de>
 8008812:	4b91      	ldr	r3, [pc, #580]	; (8008a58 <_dtoa_r+0x620>)
 8008814:	2200      	movs	r2, #0
 8008816:	4650      	mov	r0, sl
 8008818:	4659      	mov	r1, fp
 800881a:	f7f8 f95f 	bl	8000adc <__aeabi_dcmplt>
 800881e:	2800      	cmp	r0, #0
 8008820:	d079      	beq.n	8008916 <_dtoa_r+0x4de>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d076      	beq.n	8008916 <_dtoa_r+0x4de>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	dd36      	ble.n	800889c <_dtoa_r+0x464>
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	4650      	mov	r0, sl
 8008832:	4659      	mov	r1, fp
 8008834:	1e5f      	subs	r7, r3, #1
 8008836:	2200      	movs	r2, #0
 8008838:	4b88      	ldr	r3, [pc, #544]	; (8008a5c <_dtoa_r+0x624>)
 800883a:	f7f7 fedd 	bl	80005f8 <__aeabi_dmul>
 800883e:	9e02      	ldr	r6, [sp, #8]
 8008840:	4682      	mov	sl, r0
 8008842:	468b      	mov	fp, r1
 8008844:	3501      	adds	r5, #1
 8008846:	4628      	mov	r0, r5
 8008848:	f7f7 fe6c 	bl	8000524 <__aeabi_i2d>
 800884c:	4652      	mov	r2, sl
 800884e:	465b      	mov	r3, fp
 8008850:	f7f7 fed2 	bl	80005f8 <__aeabi_dmul>
 8008854:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <_dtoa_r+0x628>)
 8008856:	2200      	movs	r2, #0
 8008858:	f7f7 fd18 	bl	800028c <__adddf3>
 800885c:	46d0      	mov	r8, sl
 800885e:	46d9      	mov	r9, fp
 8008860:	4682      	mov	sl, r0
 8008862:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008866:	2e00      	cmp	r6, #0
 8008868:	d158      	bne.n	800891c <_dtoa_r+0x4e4>
 800886a:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <_dtoa_r+0x62c>)
 800886c:	2200      	movs	r2, #0
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fd09 	bl	8000288 <__aeabi_dsub>
 8008876:	4652      	mov	r2, sl
 8008878:	465b      	mov	r3, fp
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	f7f8 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8008882:	2800      	cmp	r0, #0
 8008884:	f040 8295 	bne.w	8008db2 <_dtoa_r+0x97a>
 8008888:	4652      	mov	r2, sl
 800888a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f8 f923 	bl	8000adc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f040 8289 	bne.w	8008dae <_dtoa_r+0x976>
 800889c:	ec5b ab19 	vmov	sl, fp, d9
 80088a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f2c0 8148 	blt.w	8008b38 <_dtoa_r+0x700>
 80088a8:	9a00      	ldr	r2, [sp, #0]
 80088aa:	2a0e      	cmp	r2, #14
 80088ac:	f300 8144 	bgt.w	8008b38 <_dtoa_r+0x700>
 80088b0:	4b67      	ldr	r3, [pc, #412]	; (8008a50 <_dtoa_r+0x618>)
 80088b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f280 80d5 	bge.w	8008a6c <_dtoa_r+0x634>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f300 80d1 	bgt.w	8008a6c <_dtoa_r+0x634>
 80088ca:	f040 826f 	bne.w	8008dac <_dtoa_r+0x974>
 80088ce:	4b65      	ldr	r3, [pc, #404]	; (8008a64 <_dtoa_r+0x62c>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	4640      	mov	r0, r8
 80088d4:	4649      	mov	r1, r9
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	4652      	mov	r2, sl
 80088dc:	465b      	mov	r3, fp
 80088de:	f7f8 f911 	bl	8000b04 <__aeabi_dcmpge>
 80088e2:	9e03      	ldr	r6, [sp, #12]
 80088e4:	4637      	mov	r7, r6
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f040 8245 	bne.w	8008d76 <_dtoa_r+0x93e>
 80088ec:	9d01      	ldr	r5, [sp, #4]
 80088ee:	2331      	movs	r3, #49	; 0x31
 80088f0:	f805 3b01 	strb.w	r3, [r5], #1
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	e240      	b.n	8008d7e <_dtoa_r+0x946>
 80088fc:	07f2      	lsls	r2, r6, #31
 80088fe:	d505      	bpl.n	800890c <_dtoa_r+0x4d4>
 8008900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008904:	f7f7 fe78 	bl	80005f8 <__aeabi_dmul>
 8008908:	3501      	adds	r5, #1
 800890a:	2301      	movs	r3, #1
 800890c:	1076      	asrs	r6, r6, #1
 800890e:	3708      	adds	r7, #8
 8008910:	e777      	b.n	8008802 <_dtoa_r+0x3ca>
 8008912:	2502      	movs	r5, #2
 8008914:	e779      	b.n	800880a <_dtoa_r+0x3d2>
 8008916:	9f00      	ldr	r7, [sp, #0]
 8008918:	9e03      	ldr	r6, [sp, #12]
 800891a:	e794      	b.n	8008846 <_dtoa_r+0x40e>
 800891c:	9901      	ldr	r1, [sp, #4]
 800891e:	4b4c      	ldr	r3, [pc, #304]	; (8008a50 <_dtoa_r+0x618>)
 8008920:	4431      	add	r1, r6
 8008922:	910d      	str	r1, [sp, #52]	; 0x34
 8008924:	9908      	ldr	r1, [sp, #32]
 8008926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800892a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800892e:	2900      	cmp	r1, #0
 8008930:	d043      	beq.n	80089ba <_dtoa_r+0x582>
 8008932:	494d      	ldr	r1, [pc, #308]	; (8008a68 <_dtoa_r+0x630>)
 8008934:	2000      	movs	r0, #0
 8008936:	f7f7 ff89 	bl	800084c <__aeabi_ddiv>
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	f7f7 fca3 	bl	8000288 <__aeabi_dsub>
 8008942:	9d01      	ldr	r5, [sp, #4]
 8008944:	4682      	mov	sl, r0
 8008946:	468b      	mov	fp, r1
 8008948:	4649      	mov	r1, r9
 800894a:	4640      	mov	r0, r8
 800894c:	f7f8 f904 	bl	8000b58 <__aeabi_d2iz>
 8008950:	4606      	mov	r6, r0
 8008952:	f7f7 fde7 	bl	8000524 <__aeabi_i2d>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f7 fc93 	bl	8000288 <__aeabi_dsub>
 8008962:	3630      	adds	r6, #48	; 0x30
 8008964:	f805 6b01 	strb.w	r6, [r5], #1
 8008968:	4652      	mov	r2, sl
 800896a:	465b      	mov	r3, fp
 800896c:	4680      	mov	r8, r0
 800896e:	4689      	mov	r9, r1
 8008970:	f7f8 f8b4 	bl	8000adc <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d163      	bne.n	8008a40 <_dtoa_r+0x608>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	4936      	ldr	r1, [pc, #216]	; (8008a58 <_dtoa_r+0x620>)
 800897e:	2000      	movs	r0, #0
 8008980:	f7f7 fc82 	bl	8000288 <__aeabi_dsub>
 8008984:	4652      	mov	r2, sl
 8008986:	465b      	mov	r3, fp
 8008988:	f7f8 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	f040 80b5 	bne.w	8008afc <_dtoa_r+0x6c4>
 8008992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008994:	429d      	cmp	r5, r3
 8008996:	d081      	beq.n	800889c <_dtoa_r+0x464>
 8008998:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <_dtoa_r+0x624>)
 800899a:	2200      	movs	r2, #0
 800899c:	4650      	mov	r0, sl
 800899e:	4659      	mov	r1, fp
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	4b2d      	ldr	r3, [pc, #180]	; (8008a5c <_dtoa_r+0x624>)
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	2200      	movs	r2, #0
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	e7c6      	b.n	8008948 <_dtoa_r+0x510>
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c4:	9d01      	ldr	r5, [sp, #4]
 80089c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089c8:	4682      	mov	sl, r0
 80089ca:	468b      	mov	fp, r1
 80089cc:	4649      	mov	r1, r9
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7f8 f8c2 	bl	8000b58 <__aeabi_d2iz>
 80089d4:	4606      	mov	r6, r0
 80089d6:	f7f7 fda5 	bl	8000524 <__aeabi_i2d>
 80089da:	3630      	adds	r6, #48	; 0x30
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f7 fc50 	bl	8000288 <__aeabi_dsub>
 80089e8:	f805 6b01 	strb.w	r6, [r5], #1
 80089ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ee:	429d      	cmp	r5, r3
 80089f0:	4680      	mov	r8, r0
 80089f2:	4689      	mov	r9, r1
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	d124      	bne.n	8008a44 <_dtoa_r+0x60c>
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <_dtoa_r+0x630>)
 80089fc:	4650      	mov	r0, sl
 80089fe:	4659      	mov	r1, fp
 8008a00:	f7f7 fc44 	bl	800028c <__adddf3>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f8 f884 	bl	8000b18 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d173      	bne.n	8008afc <_dtoa_r+0x6c4>
 8008a14:	4652      	mov	r2, sl
 8008a16:	465b      	mov	r3, fp
 8008a18:	4913      	ldr	r1, [pc, #76]	; (8008a68 <_dtoa_r+0x630>)
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f7f7 fc34 	bl	8000288 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4640      	mov	r0, r8
 8008a26:	4649      	mov	r1, r9
 8008a28:	f7f8 f858 	bl	8000adc <__aeabi_dcmplt>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f43f af35 	beq.w	800889c <_dtoa_r+0x464>
 8008a32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a34:	1e6b      	subs	r3, r5, #1
 8008a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a3c:	2b30      	cmp	r3, #48	; 0x30
 8008a3e:	d0f8      	beq.n	8008a32 <_dtoa_r+0x5fa>
 8008a40:	9700      	str	r7, [sp, #0]
 8008a42:	e049      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <_dtoa_r+0x624>)
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	4689      	mov	r9, r1
 8008a4e:	e7bd      	b.n	80089cc <_dtoa_r+0x594>
 8008a50:	0800a648 	.word	0x0800a648
 8008a54:	0800a620 	.word	0x0800a620
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	40240000 	.word	0x40240000
 8008a60:	401c0000 	.word	0x401c0000
 8008a64:	40140000 	.word	0x40140000
 8008a68:	3fe00000 	.word	0x3fe00000
 8008a6c:	9d01      	ldr	r5, [sp, #4]
 8008a6e:	4656      	mov	r6, sl
 8008a70:	465f      	mov	r7, fp
 8008a72:	4642      	mov	r2, r8
 8008a74:	464b      	mov	r3, r9
 8008a76:	4630      	mov	r0, r6
 8008a78:	4639      	mov	r1, r7
 8008a7a:	f7f7 fee7 	bl	800084c <__aeabi_ddiv>
 8008a7e:	f7f8 f86b 	bl	8000b58 <__aeabi_d2iz>
 8008a82:	4682      	mov	sl, r0
 8008a84:	f7f7 fd4e 	bl	8000524 <__aeabi_i2d>
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	f7f7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a9c:	f7f7 fbf4 	bl	8000288 <__aeabi_dsub>
 8008aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8008aa4:	9e01      	ldr	r6, [sp, #4]
 8008aa6:	9f03      	ldr	r7, [sp, #12]
 8008aa8:	1bae      	subs	r6, r5, r6
 8008aaa:	42b7      	cmp	r7, r6
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	d135      	bne.n	8008b1e <_dtoa_r+0x6e6>
 8008ab2:	f7f7 fbeb 	bl	800028c <__adddf3>
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	464b      	mov	r3, r9
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	f7f8 f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8008ac2:	b9d0      	cbnz	r0, 8008afa <_dtoa_r+0x6c2>
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad0:	b110      	cbz	r0, 8008ad8 <_dtoa_r+0x6a0>
 8008ad2:	f01a 0f01 	tst.w	sl, #1
 8008ad6:	d110      	bne.n	8008afa <_dtoa_r+0x6c2>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	f000 fae5 	bl	80090ac <_Bfree>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9800      	ldr	r0, [sp, #0]
 8008ae6:	702b      	strb	r3, [r5, #0]
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aea:	3001      	adds	r0, #1
 8008aec:	6018      	str	r0, [r3, #0]
 8008aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f43f acf1 	beq.w	80084d8 <_dtoa_r+0xa0>
 8008af6:	601d      	str	r5, [r3, #0]
 8008af8:	e4ee      	b.n	80084d8 <_dtoa_r+0xa0>
 8008afa:	9f00      	ldr	r7, [sp, #0]
 8008afc:	462b      	mov	r3, r5
 8008afe:	461d      	mov	r5, r3
 8008b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b04:	2a39      	cmp	r2, #57	; 0x39
 8008b06:	d106      	bne.n	8008b16 <_dtoa_r+0x6de>
 8008b08:	9a01      	ldr	r2, [sp, #4]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d1f7      	bne.n	8008afe <_dtoa_r+0x6c6>
 8008b0e:	9901      	ldr	r1, [sp, #4]
 8008b10:	2230      	movs	r2, #48	; 0x30
 8008b12:	3701      	adds	r7, #1
 8008b14:	700a      	strb	r2, [r1, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e790      	b.n	8008a40 <_dtoa_r+0x608>
 8008b1e:	4ba6      	ldr	r3, [pc, #664]	; (8008db8 <_dtoa_r+0x980>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	f7f7 fd69 	bl	80005f8 <__aeabi_dmul>
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	f7f7 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d09d      	beq.n	8008a72 <_dtoa_r+0x63a>
 8008b36:	e7cf      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008b38:	9a08      	ldr	r2, [sp, #32]
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	f000 80d7 	beq.w	8008cee <_dtoa_r+0x8b6>
 8008b40:	9a06      	ldr	r2, [sp, #24]
 8008b42:	2a01      	cmp	r2, #1
 8008b44:	f300 80ba 	bgt.w	8008cbc <_dtoa_r+0x884>
 8008b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	f000 80b2 	beq.w	8008cb4 <_dtoa_r+0x87c>
 8008b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b54:	9e07      	ldr	r6, [sp, #28]
 8008b56:	9d04      	ldr	r5, [sp, #16]
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	441a      	add	r2, r3
 8008b5c:	9204      	str	r2, [sp, #16]
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	2101      	movs	r1, #1
 8008b62:	441a      	add	r2, r3
 8008b64:	4620      	mov	r0, r4
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	f000 fb58 	bl	800921c <__i2b>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	dd0c      	ble.n	8008b8c <_dtoa_r+0x754>
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd09      	ble.n	8008b8c <_dtoa_r+0x754>
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	9a04      	ldr	r2, [sp, #16]
 8008b7c:	bfa8      	it	ge
 8008b7e:	462b      	movge	r3, r5
 8008b80:	1ad2      	subs	r2, r2, r3
 8008b82:	9204      	str	r2, [sp, #16]
 8008b84:	9a05      	ldr	r2, [sp, #20]
 8008b86:	1aed      	subs	r5, r5, r3
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	b31b      	cbz	r3, 8008bd8 <_dtoa_r+0x7a0>
 8008b90:	9b08      	ldr	r3, [sp, #32]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80af 	beq.w	8008cf6 <_dtoa_r+0x8be>
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	dd13      	ble.n	8008bc4 <_dtoa_r+0x78c>
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fbfb 	bl	800939c <__pow5mult>
 8008ba6:	ee18 2a10 	vmov	r2, s16
 8008baa:	4601      	mov	r1, r0
 8008bac:	4607      	mov	r7, r0
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f000 fb4a 	bl	8009248 <__multiply>
 8008bb4:	ee18 1a10 	vmov	r1, s16
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fa76 	bl	80090ac <_Bfree>
 8008bc0:	ee08 8a10 	vmov	s16, r8
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	1b9a      	subs	r2, r3, r6
 8008bc8:	d006      	beq.n	8008bd8 <_dtoa_r+0x7a0>
 8008bca:	ee18 1a10 	vmov	r1, s16
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fbe4 	bl	800939c <__pow5mult>
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	2101      	movs	r1, #1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fb1e 	bl	800921c <__i2b>
 8008be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	4606      	mov	r6, r0
 8008be6:	f340 8088 	ble.w	8008cfa <_dtoa_r+0x8c2>
 8008bea:	461a      	mov	r2, r3
 8008bec:	4601      	mov	r1, r0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 fbd4 	bl	800939c <__pow5mult>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	f340 8081 	ble.w	8008d00 <_dtoa_r+0x8c8>
 8008bfe:	f04f 0800 	mov.w	r8, #0
 8008c02:	6933      	ldr	r3, [r6, #16]
 8008c04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c08:	6918      	ldr	r0, [r3, #16]
 8008c0a:	f000 fab7 	bl	800917c <__hi0bits>
 8008c0e:	f1c0 0020 	rsb	r0, r0, #32
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	4418      	add	r0, r3
 8008c16:	f010 001f 	ands.w	r0, r0, #31
 8008c1a:	f000 8092 	beq.w	8008d42 <_dtoa_r+0x90a>
 8008c1e:	f1c0 0320 	rsb	r3, r0, #32
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	f340 808a 	ble.w	8008d3c <_dtoa_r+0x904>
 8008c28:	f1c0 001c 	rsb	r0, r0, #28
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	4403      	add	r3, r0
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	4403      	add	r3, r0
 8008c36:	4405      	add	r5, r0
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd07      	ble.n	8008c50 <_dtoa_r+0x818>
 8008c40:	ee18 1a10 	vmov	r1, s16
 8008c44:	461a      	mov	r2, r3
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 fc02 	bl	8009450 <__lshift>
 8008c4c:	ee08 0a10 	vmov	s16, r0
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd05      	ble.n	8008c62 <_dtoa_r+0x82a>
 8008c56:	4631      	mov	r1, r6
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fbf8 	bl	8009450 <__lshift>
 8008c60:	4606      	mov	r6, r0
 8008c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d06e      	beq.n	8008d46 <_dtoa_r+0x90e>
 8008c68:	ee18 0a10 	vmov	r0, s16
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	f000 fc5f 	bl	8009530 <__mcmp>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	da67      	bge.n	8008d46 <_dtoa_r+0x90e>
 8008c76:	9b00      	ldr	r3, [sp, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	ee18 1a10 	vmov	r1, s16
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	220a      	movs	r2, #10
 8008c82:	2300      	movs	r3, #0
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fa33 	bl	80090f0 <__multadd>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	ee08 0a10 	vmov	s16, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 81b1 	beq.w	8008ff8 <_dtoa_r+0xbc0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	4639      	mov	r1, r7
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fa27 	bl	80090f0 <__multadd>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f300 808e 	bgt.w	8008dc8 <_dtoa_r+0x990>
 8008cac:	9b06      	ldr	r3, [sp, #24]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dc51      	bgt.n	8008d56 <_dtoa_r+0x91e>
 8008cb2:	e089      	b.n	8008dc8 <_dtoa_r+0x990>
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cba:	e74b      	b.n	8008b54 <_dtoa_r+0x71c>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1e5e      	subs	r6, r3, #1
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	42b3      	cmp	r3, r6
 8008cc4:	bfbf      	itttt	lt
 8008cc6:	9b07      	ldrlt	r3, [sp, #28]
 8008cc8:	9607      	strlt	r6, [sp, #28]
 8008cca:	1af2      	sublt	r2, r6, r3
 8008ccc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008cce:	bfb6      	itet	lt
 8008cd0:	189b      	addlt	r3, r3, r2
 8008cd2:	1b9e      	subge	r6, r3, r6
 8008cd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	bfb8      	it	lt
 8008cda:	2600      	movlt	r6, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfb7      	itett	lt
 8008ce0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ce4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ce8:	1a9d      	sublt	r5, r3, r2
 8008cea:	2300      	movlt	r3, #0
 8008cec:	e734      	b.n	8008b58 <_dtoa_r+0x720>
 8008cee:	9e07      	ldr	r6, [sp, #28]
 8008cf0:	9d04      	ldr	r5, [sp, #16]
 8008cf2:	9f08      	ldr	r7, [sp, #32]
 8008cf4:	e73b      	b.n	8008b6e <_dtoa_r+0x736>
 8008cf6:	9a07      	ldr	r2, [sp, #28]
 8008cf8:	e767      	b.n	8008bca <_dtoa_r+0x792>
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	dc18      	bgt.n	8008d32 <_dtoa_r+0x8fa>
 8008d00:	f1ba 0f00 	cmp.w	sl, #0
 8008d04:	d115      	bne.n	8008d32 <_dtoa_r+0x8fa>
 8008d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d0a:	b993      	cbnz	r3, 8008d32 <_dtoa_r+0x8fa>
 8008d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d10:	0d1b      	lsrs	r3, r3, #20
 8008d12:	051b      	lsls	r3, r3, #20
 8008d14:	b183      	cbz	r3, 8008d38 <_dtoa_r+0x900>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	9b05      	ldr	r3, [sp, #20]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	f04f 0801 	mov.w	r8, #1
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f47f af6a 	bne.w	8008c02 <_dtoa_r+0x7ca>
 8008d2e:	2001      	movs	r0, #1
 8008d30:	e76f      	b.n	8008c12 <_dtoa_r+0x7da>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	e7f6      	b.n	8008d26 <_dtoa_r+0x8ee>
 8008d38:	4698      	mov	r8, r3
 8008d3a:	e7f4      	b.n	8008d26 <_dtoa_r+0x8ee>
 8008d3c:	f43f af7d 	beq.w	8008c3a <_dtoa_r+0x802>
 8008d40:	4618      	mov	r0, r3
 8008d42:	301c      	adds	r0, #28
 8008d44:	e772      	b.n	8008c2c <_dtoa_r+0x7f4>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc37      	bgt.n	8008dbc <_dtoa_r+0x984>
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	dd34      	ble.n	8008dbc <_dtoa_r+0x984>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	9b02      	ldr	r3, [sp, #8]
 8008d58:	b96b      	cbnz	r3, 8008d76 <_dtoa_r+0x93e>
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	2205      	movs	r2, #5
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 f9c6 	bl	80090f0 <__multadd>
 8008d64:	4601      	mov	r1, r0
 8008d66:	4606      	mov	r6, r0
 8008d68:	ee18 0a10 	vmov	r0, s16
 8008d6c:	f000 fbe0 	bl	8009530 <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f73f adbb 	bgt.w	80088ec <_dtoa_r+0x4b4>
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	9d01      	ldr	r5, [sp, #4]
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	f04f 0800 	mov.w	r8, #0
 8008d82:	4631      	mov	r1, r6
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 f991 	bl	80090ac <_Bfree>
 8008d8a:	2f00      	cmp	r7, #0
 8008d8c:	f43f aea4 	beq.w	8008ad8 <_dtoa_r+0x6a0>
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	d005      	beq.n	8008da2 <_dtoa_r+0x96a>
 8008d96:	45b8      	cmp	r8, r7
 8008d98:	d003      	beq.n	8008da2 <_dtoa_r+0x96a>
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f985 	bl	80090ac <_Bfree>
 8008da2:	4639      	mov	r1, r7
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 f981 	bl	80090ac <_Bfree>
 8008daa:	e695      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008dac:	2600      	movs	r6, #0
 8008dae:	4637      	mov	r7, r6
 8008db0:	e7e1      	b.n	8008d76 <_dtoa_r+0x93e>
 8008db2:	9700      	str	r7, [sp, #0]
 8008db4:	4637      	mov	r7, r6
 8008db6:	e599      	b.n	80088ec <_dtoa_r+0x4b4>
 8008db8:	40240000 	.word	0x40240000
 8008dbc:	9b08      	ldr	r3, [sp, #32]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 80ca 	beq.w	8008f58 <_dtoa_r+0xb20>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	dd05      	ble.n	8008dd8 <_dtoa_r+0x9a0>
 8008dcc:	4639      	mov	r1, r7
 8008dce:	462a      	mov	r2, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fb3d 	bl	8009450 <__lshift>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	f1b8 0f00 	cmp.w	r8, #0
 8008ddc:	d05b      	beq.n	8008e96 <_dtoa_r+0xa5e>
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 f923 	bl	800902c <_Balloc>
 8008de6:	4605      	mov	r5, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <_dtoa_r+0x9be>
 8008dea:	4b87      	ldr	r3, [pc, #540]	; (8009008 <_dtoa_r+0xbd0>)
 8008dec:	4602      	mov	r2, r0
 8008dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008df2:	f7ff bb3b 	b.w	800846c <_dtoa_r+0x34>
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	3202      	adds	r2, #2
 8008dfa:	0092      	lsls	r2, r2, #2
 8008dfc:	f107 010c 	add.w	r1, r7, #12
 8008e00:	300c      	adds	r0, #12
 8008e02:	f7fe fe0d 	bl	8007a20 <memcpy>
 8008e06:	2201      	movs	r2, #1
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fb20 	bl	8009450 <__lshift>
 8008e10:	9b01      	ldr	r3, [sp, #4]
 8008e12:	f103 0901 	add.w	r9, r3, #1
 8008e16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	f00a 0301 	and.w	r3, sl, #1
 8008e22:	46b8      	mov	r8, r7
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	4607      	mov	r7, r0
 8008e28:	4631      	mov	r1, r6
 8008e2a:	ee18 0a10 	vmov	r0, s16
 8008e2e:	f7ff fa77 	bl	8008320 <quorem>
 8008e32:	4641      	mov	r1, r8
 8008e34:	9002      	str	r0, [sp, #8]
 8008e36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e3a:	ee18 0a10 	vmov	r0, s16
 8008e3e:	f000 fb77 	bl	8009530 <__mcmp>
 8008e42:	463a      	mov	r2, r7
 8008e44:	9003      	str	r0, [sp, #12]
 8008e46:	4631      	mov	r1, r6
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fb8d 	bl	8009568 <__mdiff>
 8008e4e:	68c2      	ldr	r2, [r0, #12]
 8008e50:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e54:	4605      	mov	r5, r0
 8008e56:	bb02      	cbnz	r2, 8008e9a <_dtoa_r+0xa62>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	ee18 0a10 	vmov	r0, s16
 8008e5e:	f000 fb67 	bl	8009530 <__mcmp>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4629      	mov	r1, r5
 8008e66:	4620      	mov	r0, r4
 8008e68:	9207      	str	r2, [sp, #28]
 8008e6a:	f000 f91f 	bl	80090ac <_Bfree>
 8008e6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e72:	ea43 0102 	orr.w	r1, r3, r2
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	464d      	mov	r5, r9
 8008e7c:	d10f      	bne.n	8008e9e <_dtoa_r+0xa66>
 8008e7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e82:	d02a      	beq.n	8008eda <_dtoa_r+0xaa2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dd02      	ble.n	8008e90 <_dtoa_r+0xa58>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e90:	f88b a000 	strb.w	sl, [fp]
 8008e94:	e775      	b.n	8008d82 <_dtoa_r+0x94a>
 8008e96:	4638      	mov	r0, r7
 8008e98:	e7ba      	b.n	8008e10 <_dtoa_r+0x9d8>
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	e7e2      	b.n	8008e64 <_dtoa_r+0xa2c>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db04      	blt.n	8008eae <_dtoa_r+0xa76>
 8008ea4:	9906      	ldr	r1, [sp, #24]
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	9904      	ldr	r1, [sp, #16]
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	d122      	bne.n	8008ef4 <_dtoa_r+0xabc>
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	ddee      	ble.n	8008e90 <_dtoa_r+0xa58>
 8008eb2:	ee18 1a10 	vmov	r1, s16
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fac9 	bl	8009450 <__lshift>
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	ee08 0a10 	vmov	s16, r0
 8008ec4:	f000 fb34 	bl	8009530 <__mcmp>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dc03      	bgt.n	8008ed4 <_dtoa_r+0xa9c>
 8008ecc:	d1e0      	bne.n	8008e90 <_dtoa_r+0xa58>
 8008ece:	f01a 0f01 	tst.w	sl, #1
 8008ed2:	d0dd      	beq.n	8008e90 <_dtoa_r+0xa58>
 8008ed4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ed8:	d1d7      	bne.n	8008e8a <_dtoa_r+0xa52>
 8008eda:	2339      	movs	r3, #57	; 0x39
 8008edc:	f88b 3000 	strb.w	r3, [fp]
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eea:	2a39      	cmp	r2, #57	; 0x39
 8008eec:	d071      	beq.n	8008fd2 <_dtoa_r+0xb9a>
 8008eee:	3201      	adds	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e746      	b.n	8008d82 <_dtoa_r+0x94a>
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	dd07      	ble.n	8008f08 <_dtoa_r+0xad0>
 8008ef8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008efc:	d0ed      	beq.n	8008eda <_dtoa_r+0xaa2>
 8008efe:	f10a 0301 	add.w	r3, sl, #1
 8008f02:	f88b 3000 	strb.w	r3, [fp]
 8008f06:	e73c      	b.n	8008d82 <_dtoa_r+0x94a>
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f0e:	4599      	cmp	r9, r3
 8008f10:	d047      	beq.n	8008fa2 <_dtoa_r+0xb6a>
 8008f12:	ee18 1a10 	vmov	r1, s16
 8008f16:	2300      	movs	r3, #0
 8008f18:	220a      	movs	r2, #10
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f8e8 	bl	80090f0 <__multadd>
 8008f20:	45b8      	cmp	r8, r7
 8008f22:	ee08 0a10 	vmov	s16, r0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f04f 020a 	mov.w	r2, #10
 8008f2e:	4641      	mov	r1, r8
 8008f30:	4620      	mov	r0, r4
 8008f32:	d106      	bne.n	8008f42 <_dtoa_r+0xb0a>
 8008f34:	f000 f8dc 	bl	80090f0 <__multadd>
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	f109 0901 	add.w	r9, r9, #1
 8008f40:	e772      	b.n	8008e28 <_dtoa_r+0x9f0>
 8008f42:	f000 f8d5 	bl	80090f0 <__multadd>
 8008f46:	4639      	mov	r1, r7
 8008f48:	4680      	mov	r8, r0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 f8ce 	bl	80090f0 <__multadd>
 8008f54:	4607      	mov	r7, r0
 8008f56:	e7f1      	b.n	8008f3c <_dtoa_r+0xb04>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	9302      	str	r3, [sp, #8]
 8008f5c:	9d01      	ldr	r5, [sp, #4]
 8008f5e:	ee18 0a10 	vmov	r0, s16
 8008f62:	4631      	mov	r1, r6
 8008f64:	f7ff f9dc 	bl	8008320 <quorem>
 8008f68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008f72:	1aea      	subs	r2, r5, r3
 8008f74:	9b02      	ldr	r3, [sp, #8]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	dd09      	ble.n	8008f8e <_dtoa_r+0xb56>
 8008f7a:	ee18 1a10 	vmov	r1, s16
 8008f7e:	2300      	movs	r3, #0
 8008f80:	220a      	movs	r2, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f8b4 	bl	80090f0 <__multadd>
 8008f88:	ee08 0a10 	vmov	s16, r0
 8008f8c:	e7e7      	b.n	8008f5e <_dtoa_r+0xb26>
 8008f8e:	9b02      	ldr	r3, [sp, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfc8      	it	gt
 8008f94:	461d      	movgt	r5, r3
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	bfd8      	it	le
 8008f9a:	2501      	movle	r5, #1
 8008f9c:	441d      	add	r5, r3
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	ee18 1a10 	vmov	r1, s16
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fa51 	bl	8009450 <__lshift>
 8008fae:	4631      	mov	r1, r6
 8008fb0:	ee08 0a10 	vmov	s16, r0
 8008fb4:	f000 fabc 	bl	8009530 <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dc91      	bgt.n	8008ee0 <_dtoa_r+0xaa8>
 8008fbc:	d102      	bne.n	8008fc4 <_dtoa_r+0xb8c>
 8008fbe:	f01a 0f01 	tst.w	sl, #1
 8008fc2:	d18d      	bne.n	8008ee0 <_dtoa_r+0xaa8>
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	461d      	mov	r5, r3
 8008fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fcc:	2a30      	cmp	r2, #48	; 0x30
 8008fce:	d0fa      	beq.n	8008fc6 <_dtoa_r+0xb8e>
 8008fd0:	e6d7      	b.n	8008d82 <_dtoa_r+0x94a>
 8008fd2:	9a01      	ldr	r2, [sp, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d184      	bne.n	8008ee2 <_dtoa_r+0xaaa>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	2331      	movs	r3, #49	; 0x31
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e6ce      	b.n	8008d82 <_dtoa_r+0x94a>
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <_dtoa_r+0xbd4>)
 8008fe6:	f7ff ba95 	b.w	8008514 <_dtoa_r+0xdc>
 8008fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f47f aa6e 	bne.w	80084ce <_dtoa_r+0x96>
 8008ff2:	4b07      	ldr	r3, [pc, #28]	; (8009010 <_dtoa_r+0xbd8>)
 8008ff4:	f7ff ba8e 	b.w	8008514 <_dtoa_r+0xdc>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dcae      	bgt.n	8008f5c <_dtoa_r+0xb24>
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	2b02      	cmp	r3, #2
 8009002:	f73f aea8 	bgt.w	8008d56 <_dtoa_r+0x91e>
 8009006:	e7a9      	b.n	8008f5c <_dtoa_r+0xb24>
 8009008:	0800a5af 	.word	0x0800a5af
 800900c:	0800a50c 	.word	0x0800a50c
 8009010:	0800a530 	.word	0x0800a530

08009014 <_localeconv_r>:
 8009014:	4800      	ldr	r0, [pc, #0]	; (8009018 <_localeconv_r+0x4>)
 8009016:	4770      	bx	lr
 8009018:	200002d0 	.word	0x200002d0

0800901c <malloc>:
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <malloc+0xc>)
 800901e:	4601      	mov	r1, r0
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f000 bc09 	b.w	8009838 <_malloc_r>
 8009026:	bf00      	nop
 8009028:	2000017c 	.word	0x2000017c

0800902c <_Balloc>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	b976      	cbnz	r6, 8009054 <_Balloc+0x28>
 8009036:	2010      	movs	r0, #16
 8009038:	f7ff fff0 	bl	800901c <malloc>
 800903c:	4602      	mov	r2, r0
 800903e:	6260      	str	r0, [r4, #36]	; 0x24
 8009040:	b920      	cbnz	r0, 800904c <_Balloc+0x20>
 8009042:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <_Balloc+0x78>)
 8009044:	4818      	ldr	r0, [pc, #96]	; (80090a8 <_Balloc+0x7c>)
 8009046:	2166      	movs	r1, #102	; 0x66
 8009048:	f000 fc7a 	bl	8009940 <__assert_func>
 800904c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009050:	6006      	str	r6, [r0, #0]
 8009052:	60c6      	str	r6, [r0, #12]
 8009054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009056:	68f3      	ldr	r3, [r6, #12]
 8009058:	b183      	cbz	r3, 800907c <_Balloc+0x50>
 800905a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009062:	b9b8      	cbnz	r0, 8009094 <_Balloc+0x68>
 8009064:	2101      	movs	r1, #1
 8009066:	fa01 f605 	lsl.w	r6, r1, r5
 800906a:	1d72      	adds	r2, r6, #5
 800906c:	0092      	lsls	r2, r2, #2
 800906e:	4620      	mov	r0, r4
 8009070:	f000 fb60 	bl	8009734 <_calloc_r>
 8009074:	b160      	cbz	r0, 8009090 <_Balloc+0x64>
 8009076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800907a:	e00e      	b.n	800909a <_Balloc+0x6e>
 800907c:	2221      	movs	r2, #33	; 0x21
 800907e:	2104      	movs	r1, #4
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fb57 	bl	8009734 <_calloc_r>
 8009086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009088:	60f0      	str	r0, [r6, #12]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e4      	bne.n	800905a <_Balloc+0x2e>
 8009090:	2000      	movs	r0, #0
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	6802      	ldr	r2, [r0, #0]
 8009096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800909a:	2300      	movs	r3, #0
 800909c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090a0:	e7f7      	b.n	8009092 <_Balloc+0x66>
 80090a2:	bf00      	nop
 80090a4:	0800a53d 	.word	0x0800a53d
 80090a8:	0800a5c0 	.word	0x0800a5c0

080090ac <_Bfree>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	b976      	cbnz	r6, 80090d4 <_Bfree+0x28>
 80090b6:	2010      	movs	r0, #16
 80090b8:	f7ff ffb0 	bl	800901c <malloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	6268      	str	r0, [r5, #36]	; 0x24
 80090c0:	b920      	cbnz	r0, 80090cc <_Bfree+0x20>
 80090c2:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <_Bfree+0x3c>)
 80090c4:	4809      	ldr	r0, [pc, #36]	; (80090ec <_Bfree+0x40>)
 80090c6:	218a      	movs	r1, #138	; 0x8a
 80090c8:	f000 fc3a 	bl	8009940 <__assert_func>
 80090cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d0:	6006      	str	r6, [r0, #0]
 80090d2:	60c6      	str	r6, [r0, #12]
 80090d4:	b13c      	cbz	r4, 80090e6 <_Bfree+0x3a>
 80090d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090d8:	6862      	ldr	r2, [r4, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090e0:	6021      	str	r1, [r4, #0]
 80090e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	0800a53d 	.word	0x0800a53d
 80090ec:	0800a5c0 	.word	0x0800a5c0

080090f0 <__multadd>:
 80090f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f4:	690d      	ldr	r5, [r1, #16]
 80090f6:	4607      	mov	r7, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	461e      	mov	r6, r3
 80090fc:	f101 0c14 	add.w	ip, r1, #20
 8009100:	2000      	movs	r0, #0
 8009102:	f8dc 3000 	ldr.w	r3, [ip]
 8009106:	b299      	uxth	r1, r3
 8009108:	fb02 6101 	mla	r1, r2, r1, r6
 800910c:	0c1e      	lsrs	r6, r3, #16
 800910e:	0c0b      	lsrs	r3, r1, #16
 8009110:	fb02 3306 	mla	r3, r2, r6, r3
 8009114:	b289      	uxth	r1, r1
 8009116:	3001      	adds	r0, #1
 8009118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800911c:	4285      	cmp	r5, r0
 800911e:	f84c 1b04 	str.w	r1, [ip], #4
 8009122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009126:	dcec      	bgt.n	8009102 <__multadd+0x12>
 8009128:	b30e      	cbz	r6, 800916e <__multadd+0x7e>
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	42ab      	cmp	r3, r5
 800912e:	dc19      	bgt.n	8009164 <__multadd+0x74>
 8009130:	6861      	ldr	r1, [r4, #4]
 8009132:	4638      	mov	r0, r7
 8009134:	3101      	adds	r1, #1
 8009136:	f7ff ff79 	bl	800902c <_Balloc>
 800913a:	4680      	mov	r8, r0
 800913c:	b928      	cbnz	r0, 800914a <__multadd+0x5a>
 800913e:	4602      	mov	r2, r0
 8009140:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <__multadd+0x84>)
 8009142:	480d      	ldr	r0, [pc, #52]	; (8009178 <__multadd+0x88>)
 8009144:	21b5      	movs	r1, #181	; 0xb5
 8009146:	f000 fbfb 	bl	8009940 <__assert_func>
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	3202      	adds	r2, #2
 800914e:	f104 010c 	add.w	r1, r4, #12
 8009152:	0092      	lsls	r2, r2, #2
 8009154:	300c      	adds	r0, #12
 8009156:	f7fe fc63 	bl	8007a20 <memcpy>
 800915a:	4621      	mov	r1, r4
 800915c:	4638      	mov	r0, r7
 800915e:	f7ff ffa5 	bl	80090ac <_Bfree>
 8009162:	4644      	mov	r4, r8
 8009164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009168:	3501      	adds	r5, #1
 800916a:	615e      	str	r6, [r3, #20]
 800916c:	6125      	str	r5, [r4, #16]
 800916e:	4620      	mov	r0, r4
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	0800a5af 	.word	0x0800a5af
 8009178:	0800a5c0 	.word	0x0800a5c0

0800917c <__hi0bits>:
 800917c:	0c03      	lsrs	r3, r0, #16
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	b9d3      	cbnz	r3, 80091b8 <__hi0bits+0x3c>
 8009182:	0400      	lsls	r0, r0, #16
 8009184:	2310      	movs	r3, #16
 8009186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800918a:	bf04      	itt	eq
 800918c:	0200      	lsleq	r0, r0, #8
 800918e:	3308      	addeq	r3, #8
 8009190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009194:	bf04      	itt	eq
 8009196:	0100      	lsleq	r0, r0, #4
 8009198:	3304      	addeq	r3, #4
 800919a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800919e:	bf04      	itt	eq
 80091a0:	0080      	lsleq	r0, r0, #2
 80091a2:	3302      	addeq	r3, #2
 80091a4:	2800      	cmp	r0, #0
 80091a6:	db05      	blt.n	80091b4 <__hi0bits+0x38>
 80091a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091ac:	f103 0301 	add.w	r3, r3, #1
 80091b0:	bf08      	it	eq
 80091b2:	2320      	moveq	r3, #32
 80091b4:	4618      	mov	r0, r3
 80091b6:	4770      	bx	lr
 80091b8:	2300      	movs	r3, #0
 80091ba:	e7e4      	b.n	8009186 <__hi0bits+0xa>

080091bc <__lo0bits>:
 80091bc:	6803      	ldr	r3, [r0, #0]
 80091be:	f013 0207 	ands.w	r2, r3, #7
 80091c2:	4601      	mov	r1, r0
 80091c4:	d00b      	beq.n	80091de <__lo0bits+0x22>
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d423      	bmi.n	8009212 <__lo0bits+0x56>
 80091ca:	0798      	lsls	r0, r3, #30
 80091cc:	bf49      	itett	mi
 80091ce:	085b      	lsrmi	r3, r3, #1
 80091d0:	089b      	lsrpl	r3, r3, #2
 80091d2:	2001      	movmi	r0, #1
 80091d4:	600b      	strmi	r3, [r1, #0]
 80091d6:	bf5c      	itt	pl
 80091d8:	600b      	strpl	r3, [r1, #0]
 80091da:	2002      	movpl	r0, #2
 80091dc:	4770      	bx	lr
 80091de:	b298      	uxth	r0, r3
 80091e0:	b9a8      	cbnz	r0, 800920e <__lo0bits+0x52>
 80091e2:	0c1b      	lsrs	r3, r3, #16
 80091e4:	2010      	movs	r0, #16
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	b90a      	cbnz	r2, 80091ee <__lo0bits+0x32>
 80091ea:	3008      	adds	r0, #8
 80091ec:	0a1b      	lsrs	r3, r3, #8
 80091ee:	071a      	lsls	r2, r3, #28
 80091f0:	bf04      	itt	eq
 80091f2:	091b      	lsreq	r3, r3, #4
 80091f4:	3004      	addeq	r0, #4
 80091f6:	079a      	lsls	r2, r3, #30
 80091f8:	bf04      	itt	eq
 80091fa:	089b      	lsreq	r3, r3, #2
 80091fc:	3002      	addeq	r0, #2
 80091fe:	07da      	lsls	r2, r3, #31
 8009200:	d403      	bmi.n	800920a <__lo0bits+0x4e>
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	f100 0001 	add.w	r0, r0, #1
 8009208:	d005      	beq.n	8009216 <__lo0bits+0x5a>
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	4770      	bx	lr
 800920e:	4610      	mov	r0, r2
 8009210:	e7e9      	b.n	80091e6 <__lo0bits+0x2a>
 8009212:	2000      	movs	r0, #0
 8009214:	4770      	bx	lr
 8009216:	2020      	movs	r0, #32
 8009218:	4770      	bx	lr
	...

0800921c <__i2b>:
 800921c:	b510      	push	{r4, lr}
 800921e:	460c      	mov	r4, r1
 8009220:	2101      	movs	r1, #1
 8009222:	f7ff ff03 	bl	800902c <_Balloc>
 8009226:	4602      	mov	r2, r0
 8009228:	b928      	cbnz	r0, 8009236 <__i2b+0x1a>
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <__i2b+0x24>)
 800922c:	4805      	ldr	r0, [pc, #20]	; (8009244 <__i2b+0x28>)
 800922e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009232:	f000 fb85 	bl	8009940 <__assert_func>
 8009236:	2301      	movs	r3, #1
 8009238:	6144      	str	r4, [r0, #20]
 800923a:	6103      	str	r3, [r0, #16]
 800923c:	bd10      	pop	{r4, pc}
 800923e:	bf00      	nop
 8009240:	0800a5af 	.word	0x0800a5af
 8009244:	0800a5c0 	.word	0x0800a5c0

08009248 <__multiply>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	4691      	mov	r9, r2
 800924e:	690a      	ldr	r2, [r1, #16]
 8009250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	bfb8      	it	lt
 8009258:	460b      	movlt	r3, r1
 800925a:	460c      	mov	r4, r1
 800925c:	bfbc      	itt	lt
 800925e:	464c      	movlt	r4, r9
 8009260:	4699      	movlt	r9, r3
 8009262:	6927      	ldr	r7, [r4, #16]
 8009264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009268:	68a3      	ldr	r3, [r4, #8]
 800926a:	6861      	ldr	r1, [r4, #4]
 800926c:	eb07 060a 	add.w	r6, r7, sl
 8009270:	42b3      	cmp	r3, r6
 8009272:	b085      	sub	sp, #20
 8009274:	bfb8      	it	lt
 8009276:	3101      	addlt	r1, #1
 8009278:	f7ff fed8 	bl	800902c <_Balloc>
 800927c:	b930      	cbnz	r0, 800928c <__multiply+0x44>
 800927e:	4602      	mov	r2, r0
 8009280:	4b44      	ldr	r3, [pc, #272]	; (8009394 <__multiply+0x14c>)
 8009282:	4845      	ldr	r0, [pc, #276]	; (8009398 <__multiply+0x150>)
 8009284:	f240 115d 	movw	r1, #349	; 0x15d
 8009288:	f000 fb5a 	bl	8009940 <__assert_func>
 800928c:	f100 0514 	add.w	r5, r0, #20
 8009290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009294:	462b      	mov	r3, r5
 8009296:	2200      	movs	r2, #0
 8009298:	4543      	cmp	r3, r8
 800929a:	d321      	bcc.n	80092e0 <__multiply+0x98>
 800929c:	f104 0314 	add.w	r3, r4, #20
 80092a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092a4:	f109 0314 	add.w	r3, r9, #20
 80092a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092ac:	9202      	str	r2, [sp, #8]
 80092ae:	1b3a      	subs	r2, r7, r4
 80092b0:	3a15      	subs	r2, #21
 80092b2:	f022 0203 	bic.w	r2, r2, #3
 80092b6:	3204      	adds	r2, #4
 80092b8:	f104 0115 	add.w	r1, r4, #21
 80092bc:	428f      	cmp	r7, r1
 80092be:	bf38      	it	cc
 80092c0:	2204      	movcc	r2, #4
 80092c2:	9201      	str	r2, [sp, #4]
 80092c4:	9a02      	ldr	r2, [sp, #8]
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d80c      	bhi.n	80092e6 <__multiply+0x9e>
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	dd03      	ble.n	80092d8 <__multiply+0x90>
 80092d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d05a      	beq.n	800938e <__multiply+0x146>
 80092d8:	6106      	str	r6, [r0, #16]
 80092da:	b005      	add	sp, #20
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	f843 2b04 	str.w	r2, [r3], #4
 80092e4:	e7d8      	b.n	8009298 <__multiply+0x50>
 80092e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80092ea:	f1ba 0f00 	cmp.w	sl, #0
 80092ee:	d024      	beq.n	800933a <__multiply+0xf2>
 80092f0:	f104 0e14 	add.w	lr, r4, #20
 80092f4:	46a9      	mov	r9, r5
 80092f6:	f04f 0c00 	mov.w	ip, #0
 80092fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092fe:	f8d9 1000 	ldr.w	r1, [r9]
 8009302:	fa1f fb82 	uxth.w	fp, r2
 8009306:	b289      	uxth	r1, r1
 8009308:	fb0a 110b 	mla	r1, sl, fp, r1
 800930c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009310:	f8d9 2000 	ldr.w	r2, [r9]
 8009314:	4461      	add	r1, ip
 8009316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800931a:	fb0a c20b 	mla	r2, sl, fp, ip
 800931e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009322:	b289      	uxth	r1, r1
 8009324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009328:	4577      	cmp	r7, lr
 800932a:	f849 1b04 	str.w	r1, [r9], #4
 800932e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009332:	d8e2      	bhi.n	80092fa <__multiply+0xb2>
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	f845 c002 	str.w	ip, [r5, r2]
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009340:	3304      	adds	r3, #4
 8009342:	f1b9 0f00 	cmp.w	r9, #0
 8009346:	d020      	beq.n	800938a <__multiply+0x142>
 8009348:	6829      	ldr	r1, [r5, #0]
 800934a:	f104 0c14 	add.w	ip, r4, #20
 800934e:	46ae      	mov	lr, r5
 8009350:	f04f 0a00 	mov.w	sl, #0
 8009354:	f8bc b000 	ldrh.w	fp, [ip]
 8009358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800935c:	fb09 220b 	mla	r2, r9, fp, r2
 8009360:	4492      	add	sl, r2
 8009362:	b289      	uxth	r1, r1
 8009364:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009368:	f84e 1b04 	str.w	r1, [lr], #4
 800936c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009370:	f8be 1000 	ldrh.w	r1, [lr]
 8009374:	0c12      	lsrs	r2, r2, #16
 8009376:	fb09 1102 	mla	r1, r9, r2, r1
 800937a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800937e:	4567      	cmp	r7, ip
 8009380:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009384:	d8e6      	bhi.n	8009354 <__multiply+0x10c>
 8009386:	9a01      	ldr	r2, [sp, #4]
 8009388:	50a9      	str	r1, [r5, r2]
 800938a:	3504      	adds	r5, #4
 800938c:	e79a      	b.n	80092c4 <__multiply+0x7c>
 800938e:	3e01      	subs	r6, #1
 8009390:	e79c      	b.n	80092cc <__multiply+0x84>
 8009392:	bf00      	nop
 8009394:	0800a5af 	.word	0x0800a5af
 8009398:	0800a5c0 	.word	0x0800a5c0

0800939c <__pow5mult>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	4615      	mov	r5, r2
 80093a2:	f012 0203 	ands.w	r2, r2, #3
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	d007      	beq.n	80093bc <__pow5mult+0x20>
 80093ac:	4c25      	ldr	r4, [pc, #148]	; (8009444 <__pow5mult+0xa8>)
 80093ae:	3a01      	subs	r2, #1
 80093b0:	2300      	movs	r3, #0
 80093b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093b6:	f7ff fe9b 	bl	80090f0 <__multadd>
 80093ba:	4607      	mov	r7, r0
 80093bc:	10ad      	asrs	r5, r5, #2
 80093be:	d03d      	beq.n	800943c <__pow5mult+0xa0>
 80093c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093c2:	b97c      	cbnz	r4, 80093e4 <__pow5mult+0x48>
 80093c4:	2010      	movs	r0, #16
 80093c6:	f7ff fe29 	bl	800901c <malloc>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6270      	str	r0, [r6, #36]	; 0x24
 80093ce:	b928      	cbnz	r0, 80093dc <__pow5mult+0x40>
 80093d0:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <__pow5mult+0xac>)
 80093d2:	481e      	ldr	r0, [pc, #120]	; (800944c <__pow5mult+0xb0>)
 80093d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093d8:	f000 fab2 	bl	8009940 <__assert_func>
 80093dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093e0:	6004      	str	r4, [r0, #0]
 80093e2:	60c4      	str	r4, [r0, #12]
 80093e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093ec:	b94c      	cbnz	r4, 8009402 <__pow5mult+0x66>
 80093ee:	f240 2171 	movw	r1, #625	; 0x271
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7ff ff12 	bl	800921c <__i2b>
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80093fe:	4604      	mov	r4, r0
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	f04f 0900 	mov.w	r9, #0
 8009406:	07eb      	lsls	r3, r5, #31
 8009408:	d50a      	bpl.n	8009420 <__pow5mult+0x84>
 800940a:	4639      	mov	r1, r7
 800940c:	4622      	mov	r2, r4
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ff1a 	bl	8009248 <__multiply>
 8009414:	4639      	mov	r1, r7
 8009416:	4680      	mov	r8, r0
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff fe47 	bl	80090ac <_Bfree>
 800941e:	4647      	mov	r7, r8
 8009420:	106d      	asrs	r5, r5, #1
 8009422:	d00b      	beq.n	800943c <__pow5mult+0xa0>
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	b938      	cbnz	r0, 8009438 <__pow5mult+0x9c>
 8009428:	4622      	mov	r2, r4
 800942a:	4621      	mov	r1, r4
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff ff0b 	bl	8009248 <__multiply>
 8009432:	6020      	str	r0, [r4, #0]
 8009434:	f8c0 9000 	str.w	r9, [r0]
 8009438:	4604      	mov	r4, r0
 800943a:	e7e4      	b.n	8009406 <__pow5mult+0x6a>
 800943c:	4638      	mov	r0, r7
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	bf00      	nop
 8009444:	0800a710 	.word	0x0800a710
 8009448:	0800a53d 	.word	0x0800a53d
 800944c:	0800a5c0 	.word	0x0800a5c0

08009450 <__lshift>:
 8009450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	6849      	ldr	r1, [r1, #4]
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	4607      	mov	r7, r0
 8009462:	4691      	mov	r9, r2
 8009464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009468:	f108 0601 	add.w	r6, r8, #1
 800946c:	42b3      	cmp	r3, r6
 800946e:	db0b      	blt.n	8009488 <__lshift+0x38>
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff fddb 	bl	800902c <_Balloc>
 8009476:	4605      	mov	r5, r0
 8009478:	b948      	cbnz	r0, 800948e <__lshift+0x3e>
 800947a:	4602      	mov	r2, r0
 800947c:	4b2a      	ldr	r3, [pc, #168]	; (8009528 <__lshift+0xd8>)
 800947e:	482b      	ldr	r0, [pc, #172]	; (800952c <__lshift+0xdc>)
 8009480:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009484:	f000 fa5c 	bl	8009940 <__assert_func>
 8009488:	3101      	adds	r1, #1
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	e7ee      	b.n	800946c <__lshift+0x1c>
 800948e:	2300      	movs	r3, #0
 8009490:	f100 0114 	add.w	r1, r0, #20
 8009494:	f100 0210 	add.w	r2, r0, #16
 8009498:	4618      	mov	r0, r3
 800949a:	4553      	cmp	r3, sl
 800949c:	db37      	blt.n	800950e <__lshift+0xbe>
 800949e:	6920      	ldr	r0, [r4, #16]
 80094a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094a4:	f104 0314 	add.w	r3, r4, #20
 80094a8:	f019 091f 	ands.w	r9, r9, #31
 80094ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094b4:	d02f      	beq.n	8009516 <__lshift+0xc6>
 80094b6:	f1c9 0e20 	rsb	lr, r9, #32
 80094ba:	468a      	mov	sl, r1
 80094bc:	f04f 0c00 	mov.w	ip, #0
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	fa02 f209 	lsl.w	r2, r2, r9
 80094c6:	ea42 020c 	orr.w	r2, r2, ip
 80094ca:	f84a 2b04 	str.w	r2, [sl], #4
 80094ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d2:	4298      	cmp	r0, r3
 80094d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094d8:	d8f2      	bhi.n	80094c0 <__lshift+0x70>
 80094da:	1b03      	subs	r3, r0, r4
 80094dc:	3b15      	subs	r3, #21
 80094de:	f023 0303 	bic.w	r3, r3, #3
 80094e2:	3304      	adds	r3, #4
 80094e4:	f104 0215 	add.w	r2, r4, #21
 80094e8:	4290      	cmp	r0, r2
 80094ea:	bf38      	it	cc
 80094ec:	2304      	movcc	r3, #4
 80094ee:	f841 c003 	str.w	ip, [r1, r3]
 80094f2:	f1bc 0f00 	cmp.w	ip, #0
 80094f6:	d001      	beq.n	80094fc <__lshift+0xac>
 80094f8:	f108 0602 	add.w	r6, r8, #2
 80094fc:	3e01      	subs	r6, #1
 80094fe:	4638      	mov	r0, r7
 8009500:	612e      	str	r6, [r5, #16]
 8009502:	4621      	mov	r1, r4
 8009504:	f7ff fdd2 	bl	80090ac <_Bfree>
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009512:	3301      	adds	r3, #1
 8009514:	e7c1      	b.n	800949a <__lshift+0x4a>
 8009516:	3904      	subs	r1, #4
 8009518:	f853 2b04 	ldr.w	r2, [r3], #4
 800951c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009520:	4298      	cmp	r0, r3
 8009522:	d8f9      	bhi.n	8009518 <__lshift+0xc8>
 8009524:	e7ea      	b.n	80094fc <__lshift+0xac>
 8009526:	bf00      	nop
 8009528:	0800a5af 	.word	0x0800a5af
 800952c:	0800a5c0 	.word	0x0800a5c0

08009530 <__mcmp>:
 8009530:	b530      	push	{r4, r5, lr}
 8009532:	6902      	ldr	r2, [r0, #16]
 8009534:	690c      	ldr	r4, [r1, #16]
 8009536:	1b12      	subs	r2, r2, r4
 8009538:	d10e      	bne.n	8009558 <__mcmp+0x28>
 800953a:	f100 0314 	add.w	r3, r0, #20
 800953e:	3114      	adds	r1, #20
 8009540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800954c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009550:	42a5      	cmp	r5, r4
 8009552:	d003      	beq.n	800955c <__mcmp+0x2c>
 8009554:	d305      	bcc.n	8009562 <__mcmp+0x32>
 8009556:	2201      	movs	r2, #1
 8009558:	4610      	mov	r0, r2
 800955a:	bd30      	pop	{r4, r5, pc}
 800955c:	4283      	cmp	r3, r0
 800955e:	d3f3      	bcc.n	8009548 <__mcmp+0x18>
 8009560:	e7fa      	b.n	8009558 <__mcmp+0x28>
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	e7f7      	b.n	8009558 <__mcmp+0x28>

08009568 <__mdiff>:
 8009568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	460c      	mov	r4, r1
 800956e:	4606      	mov	r6, r0
 8009570:	4611      	mov	r1, r2
 8009572:	4620      	mov	r0, r4
 8009574:	4690      	mov	r8, r2
 8009576:	f7ff ffdb 	bl	8009530 <__mcmp>
 800957a:	1e05      	subs	r5, r0, #0
 800957c:	d110      	bne.n	80095a0 <__mdiff+0x38>
 800957e:	4629      	mov	r1, r5
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff fd53 	bl	800902c <_Balloc>
 8009586:	b930      	cbnz	r0, 8009596 <__mdiff+0x2e>
 8009588:	4b3a      	ldr	r3, [pc, #232]	; (8009674 <__mdiff+0x10c>)
 800958a:	4602      	mov	r2, r0
 800958c:	f240 2132 	movw	r1, #562	; 0x232
 8009590:	4839      	ldr	r0, [pc, #228]	; (8009678 <__mdiff+0x110>)
 8009592:	f000 f9d5 	bl	8009940 <__assert_func>
 8009596:	2301      	movs	r3, #1
 8009598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800959c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	bfa4      	itt	ge
 80095a2:	4643      	movge	r3, r8
 80095a4:	46a0      	movge	r8, r4
 80095a6:	4630      	mov	r0, r6
 80095a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095ac:	bfa6      	itte	ge
 80095ae:	461c      	movge	r4, r3
 80095b0:	2500      	movge	r5, #0
 80095b2:	2501      	movlt	r5, #1
 80095b4:	f7ff fd3a 	bl	800902c <_Balloc>
 80095b8:	b920      	cbnz	r0, 80095c4 <__mdiff+0x5c>
 80095ba:	4b2e      	ldr	r3, [pc, #184]	; (8009674 <__mdiff+0x10c>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095c2:	e7e5      	b.n	8009590 <__mdiff+0x28>
 80095c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095c8:	6926      	ldr	r6, [r4, #16]
 80095ca:	60c5      	str	r5, [r0, #12]
 80095cc:	f104 0914 	add.w	r9, r4, #20
 80095d0:	f108 0514 	add.w	r5, r8, #20
 80095d4:	f100 0e14 	add.w	lr, r0, #20
 80095d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095e0:	f108 0210 	add.w	r2, r8, #16
 80095e4:	46f2      	mov	sl, lr
 80095e6:	2100      	movs	r1, #0
 80095e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80095ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095f0:	fa1f f883 	uxth.w	r8, r3
 80095f4:	fa11 f18b 	uxtah	r1, r1, fp
 80095f8:	0c1b      	lsrs	r3, r3, #16
 80095fa:	eba1 0808 	sub.w	r8, r1, r8
 80095fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009606:	fa1f f888 	uxth.w	r8, r8
 800960a:	1419      	asrs	r1, r3, #16
 800960c:	454e      	cmp	r6, r9
 800960e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009612:	f84a 3b04 	str.w	r3, [sl], #4
 8009616:	d8e7      	bhi.n	80095e8 <__mdiff+0x80>
 8009618:	1b33      	subs	r3, r6, r4
 800961a:	3b15      	subs	r3, #21
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3304      	adds	r3, #4
 8009622:	3415      	adds	r4, #21
 8009624:	42a6      	cmp	r6, r4
 8009626:	bf38      	it	cc
 8009628:	2304      	movcc	r3, #4
 800962a:	441d      	add	r5, r3
 800962c:	4473      	add	r3, lr
 800962e:	469e      	mov	lr, r3
 8009630:	462e      	mov	r6, r5
 8009632:	4566      	cmp	r6, ip
 8009634:	d30e      	bcc.n	8009654 <__mdiff+0xec>
 8009636:	f10c 0203 	add.w	r2, ip, #3
 800963a:	1b52      	subs	r2, r2, r5
 800963c:	f022 0203 	bic.w	r2, r2, #3
 8009640:	3d03      	subs	r5, #3
 8009642:	45ac      	cmp	ip, r5
 8009644:	bf38      	it	cc
 8009646:	2200      	movcc	r2, #0
 8009648:	441a      	add	r2, r3
 800964a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800964e:	b17b      	cbz	r3, 8009670 <__mdiff+0x108>
 8009650:	6107      	str	r7, [r0, #16]
 8009652:	e7a3      	b.n	800959c <__mdiff+0x34>
 8009654:	f856 8b04 	ldr.w	r8, [r6], #4
 8009658:	fa11 f288 	uxtah	r2, r1, r8
 800965c:	1414      	asrs	r4, r2, #16
 800965e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009662:	b292      	uxth	r2, r2
 8009664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009668:	f84e 2b04 	str.w	r2, [lr], #4
 800966c:	1421      	asrs	r1, r4, #16
 800966e:	e7e0      	b.n	8009632 <__mdiff+0xca>
 8009670:	3f01      	subs	r7, #1
 8009672:	e7ea      	b.n	800964a <__mdiff+0xe2>
 8009674:	0800a5af 	.word	0x0800a5af
 8009678:	0800a5c0 	.word	0x0800a5c0

0800967c <__d2b>:
 800967c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4689      	mov	r9, r1
 8009682:	2101      	movs	r1, #1
 8009684:	ec57 6b10 	vmov	r6, r7, d0
 8009688:	4690      	mov	r8, r2
 800968a:	f7ff fccf 	bl	800902c <_Balloc>
 800968e:	4604      	mov	r4, r0
 8009690:	b930      	cbnz	r0, 80096a0 <__d2b+0x24>
 8009692:	4602      	mov	r2, r0
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <__d2b+0xb0>)
 8009696:	4826      	ldr	r0, [pc, #152]	; (8009730 <__d2b+0xb4>)
 8009698:	f240 310a 	movw	r1, #778	; 0x30a
 800969c:	f000 f950 	bl	8009940 <__assert_func>
 80096a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096a8:	bb35      	cbnz	r5, 80096f8 <__d2b+0x7c>
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	d028      	beq.n	8009702 <__d2b+0x86>
 80096b0:	4668      	mov	r0, sp
 80096b2:	9600      	str	r6, [sp, #0]
 80096b4:	f7ff fd82 	bl	80091bc <__lo0bits>
 80096b8:	9900      	ldr	r1, [sp, #0]
 80096ba:	b300      	cbz	r0, 80096fe <__d2b+0x82>
 80096bc:	9a01      	ldr	r2, [sp, #4]
 80096be:	f1c0 0320 	rsb	r3, r0, #32
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	430b      	orrs	r3, r1
 80096c8:	40c2      	lsrs	r2, r0
 80096ca:	6163      	str	r3, [r4, #20]
 80096cc:	9201      	str	r2, [sp, #4]
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	61a3      	str	r3, [r4, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bf14      	ite	ne
 80096d6:	2202      	movne	r2, #2
 80096d8:	2201      	moveq	r2, #1
 80096da:	6122      	str	r2, [r4, #16]
 80096dc:	b1d5      	cbz	r5, 8009714 <__d2b+0x98>
 80096de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096e2:	4405      	add	r5, r0
 80096e4:	f8c9 5000 	str.w	r5, [r9]
 80096e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096ec:	f8c8 0000 	str.w	r0, [r8]
 80096f0:	4620      	mov	r0, r4
 80096f2:	b003      	add	sp, #12
 80096f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096fc:	e7d5      	b.n	80096aa <__d2b+0x2e>
 80096fe:	6161      	str	r1, [r4, #20]
 8009700:	e7e5      	b.n	80096ce <__d2b+0x52>
 8009702:	a801      	add	r0, sp, #4
 8009704:	f7ff fd5a 	bl	80091bc <__lo0bits>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	2201      	movs	r2, #1
 800970e:	6122      	str	r2, [r4, #16]
 8009710:	3020      	adds	r0, #32
 8009712:	e7e3      	b.n	80096dc <__d2b+0x60>
 8009714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800971c:	f8c9 0000 	str.w	r0, [r9]
 8009720:	6918      	ldr	r0, [r3, #16]
 8009722:	f7ff fd2b 	bl	800917c <__hi0bits>
 8009726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800972a:	e7df      	b.n	80096ec <__d2b+0x70>
 800972c:	0800a5af 	.word	0x0800a5af
 8009730:	0800a5c0 	.word	0x0800a5c0

08009734 <_calloc_r>:
 8009734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009736:	fba1 2402 	umull	r2, r4, r1, r2
 800973a:	b94c      	cbnz	r4, 8009750 <_calloc_r+0x1c>
 800973c:	4611      	mov	r1, r2
 800973e:	9201      	str	r2, [sp, #4]
 8009740:	f000 f87a 	bl	8009838 <_malloc_r>
 8009744:	9a01      	ldr	r2, [sp, #4]
 8009746:	4605      	mov	r5, r0
 8009748:	b930      	cbnz	r0, 8009758 <_calloc_r+0x24>
 800974a:	4628      	mov	r0, r5
 800974c:	b003      	add	sp, #12
 800974e:	bd30      	pop	{r4, r5, pc}
 8009750:	220c      	movs	r2, #12
 8009752:	6002      	str	r2, [r0, #0]
 8009754:	2500      	movs	r5, #0
 8009756:	e7f8      	b.n	800974a <_calloc_r+0x16>
 8009758:	4621      	mov	r1, r4
 800975a:	f7fe f96f 	bl	8007a3c <memset>
 800975e:	e7f4      	b.n	800974a <_calloc_r+0x16>

08009760 <_free_r>:
 8009760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009762:	2900      	cmp	r1, #0
 8009764:	d044      	beq.n	80097f0 <_free_r+0x90>
 8009766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976a:	9001      	str	r0, [sp, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f1a1 0404 	sub.w	r4, r1, #4
 8009772:	bfb8      	it	lt
 8009774:	18e4      	addlt	r4, r4, r3
 8009776:	f000 f925 	bl	80099c4 <__malloc_lock>
 800977a:	4a1e      	ldr	r2, [pc, #120]	; (80097f4 <_free_r+0x94>)
 800977c:	9801      	ldr	r0, [sp, #4]
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	b933      	cbnz	r3, 8009790 <_free_r+0x30>
 8009782:	6063      	str	r3, [r4, #4]
 8009784:	6014      	str	r4, [r2, #0]
 8009786:	b003      	add	sp, #12
 8009788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800978c:	f000 b920 	b.w	80099d0 <__malloc_unlock>
 8009790:	42a3      	cmp	r3, r4
 8009792:	d908      	bls.n	80097a6 <_free_r+0x46>
 8009794:	6825      	ldr	r5, [r4, #0]
 8009796:	1961      	adds	r1, r4, r5
 8009798:	428b      	cmp	r3, r1
 800979a:	bf01      	itttt	eq
 800979c:	6819      	ldreq	r1, [r3, #0]
 800979e:	685b      	ldreq	r3, [r3, #4]
 80097a0:	1949      	addeq	r1, r1, r5
 80097a2:	6021      	streq	r1, [r4, #0]
 80097a4:	e7ed      	b.n	8009782 <_free_r+0x22>
 80097a6:	461a      	mov	r2, r3
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	b10b      	cbz	r3, 80097b0 <_free_r+0x50>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d9fa      	bls.n	80097a6 <_free_r+0x46>
 80097b0:	6811      	ldr	r1, [r2, #0]
 80097b2:	1855      	adds	r5, r2, r1
 80097b4:	42a5      	cmp	r5, r4
 80097b6:	d10b      	bne.n	80097d0 <_free_r+0x70>
 80097b8:	6824      	ldr	r4, [r4, #0]
 80097ba:	4421      	add	r1, r4
 80097bc:	1854      	adds	r4, r2, r1
 80097be:	42a3      	cmp	r3, r4
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	d1e0      	bne.n	8009786 <_free_r+0x26>
 80097c4:	681c      	ldr	r4, [r3, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	6053      	str	r3, [r2, #4]
 80097ca:	4421      	add	r1, r4
 80097cc:	6011      	str	r1, [r2, #0]
 80097ce:	e7da      	b.n	8009786 <_free_r+0x26>
 80097d0:	d902      	bls.n	80097d8 <_free_r+0x78>
 80097d2:	230c      	movs	r3, #12
 80097d4:	6003      	str	r3, [r0, #0]
 80097d6:	e7d6      	b.n	8009786 <_free_r+0x26>
 80097d8:	6825      	ldr	r5, [r4, #0]
 80097da:	1961      	adds	r1, r4, r5
 80097dc:	428b      	cmp	r3, r1
 80097de:	bf04      	itt	eq
 80097e0:	6819      	ldreq	r1, [r3, #0]
 80097e2:	685b      	ldreq	r3, [r3, #4]
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	bf04      	itt	eq
 80097e8:	1949      	addeq	r1, r1, r5
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	6054      	str	r4, [r2, #4]
 80097ee:	e7ca      	b.n	8009786 <_free_r+0x26>
 80097f0:	b003      	add	sp, #12
 80097f2:	bd30      	pop	{r4, r5, pc}
 80097f4:	20001c94 	.word	0x20001c94

080097f8 <sbrk_aligned>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4e0e      	ldr	r6, [pc, #56]	; (8009834 <sbrk_aligned+0x3c>)
 80097fc:	460c      	mov	r4, r1
 80097fe:	6831      	ldr	r1, [r6, #0]
 8009800:	4605      	mov	r5, r0
 8009802:	b911      	cbnz	r1, 800980a <sbrk_aligned+0x12>
 8009804:	f000 f88c 	bl	8009920 <_sbrk_r>
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f887 	bl	8009920 <_sbrk_r>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d00a      	beq.n	800982c <sbrk_aligned+0x34>
 8009816:	1cc4      	adds	r4, r0, #3
 8009818:	f024 0403 	bic.w	r4, r4, #3
 800981c:	42a0      	cmp	r0, r4
 800981e:	d007      	beq.n	8009830 <sbrk_aligned+0x38>
 8009820:	1a21      	subs	r1, r4, r0
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f87c 	bl	8009920 <_sbrk_r>
 8009828:	3001      	adds	r0, #1
 800982a:	d101      	bne.n	8009830 <sbrk_aligned+0x38>
 800982c:	f04f 34ff 	mov.w	r4, #4294967295
 8009830:	4620      	mov	r0, r4
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	20001c98 	.word	0x20001c98

08009838 <_malloc_r>:
 8009838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983c:	1ccd      	adds	r5, r1, #3
 800983e:	f025 0503 	bic.w	r5, r5, #3
 8009842:	3508      	adds	r5, #8
 8009844:	2d0c      	cmp	r5, #12
 8009846:	bf38      	it	cc
 8009848:	250c      	movcc	r5, #12
 800984a:	2d00      	cmp	r5, #0
 800984c:	4607      	mov	r7, r0
 800984e:	db01      	blt.n	8009854 <_malloc_r+0x1c>
 8009850:	42a9      	cmp	r1, r5
 8009852:	d905      	bls.n	8009860 <_malloc_r+0x28>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	2600      	movs	r6, #0
 800985a:	4630      	mov	r0, r6
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	4e2e      	ldr	r6, [pc, #184]	; (800991c <_malloc_r+0xe4>)
 8009862:	f000 f8af 	bl	80099c4 <__malloc_lock>
 8009866:	6833      	ldr	r3, [r6, #0]
 8009868:	461c      	mov	r4, r3
 800986a:	bb34      	cbnz	r4, 80098ba <_malloc_r+0x82>
 800986c:	4629      	mov	r1, r5
 800986e:	4638      	mov	r0, r7
 8009870:	f7ff ffc2 	bl	80097f8 <sbrk_aligned>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	4604      	mov	r4, r0
 8009878:	d14d      	bne.n	8009916 <_malloc_r+0xde>
 800987a:	6834      	ldr	r4, [r6, #0]
 800987c:	4626      	mov	r6, r4
 800987e:	2e00      	cmp	r6, #0
 8009880:	d140      	bne.n	8009904 <_malloc_r+0xcc>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	4631      	mov	r1, r6
 8009886:	4638      	mov	r0, r7
 8009888:	eb04 0803 	add.w	r8, r4, r3
 800988c:	f000 f848 	bl	8009920 <_sbrk_r>
 8009890:	4580      	cmp	r8, r0
 8009892:	d13a      	bne.n	800990a <_malloc_r+0xd2>
 8009894:	6821      	ldr	r1, [r4, #0]
 8009896:	3503      	adds	r5, #3
 8009898:	1a6d      	subs	r5, r5, r1
 800989a:	f025 0503 	bic.w	r5, r5, #3
 800989e:	3508      	adds	r5, #8
 80098a0:	2d0c      	cmp	r5, #12
 80098a2:	bf38      	it	cc
 80098a4:	250c      	movcc	r5, #12
 80098a6:	4629      	mov	r1, r5
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff ffa5 	bl	80097f8 <sbrk_aligned>
 80098ae:	3001      	adds	r0, #1
 80098b0:	d02b      	beq.n	800990a <_malloc_r+0xd2>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	442b      	add	r3, r5
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	e00e      	b.n	80098d8 <_malloc_r+0xa0>
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	1b52      	subs	r2, r2, r5
 80098be:	d41e      	bmi.n	80098fe <_malloc_r+0xc6>
 80098c0:	2a0b      	cmp	r2, #11
 80098c2:	d916      	bls.n	80098f2 <_malloc_r+0xba>
 80098c4:	1961      	adds	r1, r4, r5
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	6025      	str	r5, [r4, #0]
 80098ca:	bf18      	it	ne
 80098cc:	6059      	strne	r1, [r3, #4]
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	bf08      	it	eq
 80098d2:	6031      	streq	r1, [r6, #0]
 80098d4:	5162      	str	r2, [r4, r5]
 80098d6:	604b      	str	r3, [r1, #4]
 80098d8:	4638      	mov	r0, r7
 80098da:	f104 060b 	add.w	r6, r4, #11
 80098de:	f000 f877 	bl	80099d0 <__malloc_unlock>
 80098e2:	f026 0607 	bic.w	r6, r6, #7
 80098e6:	1d23      	adds	r3, r4, #4
 80098e8:	1af2      	subs	r2, r6, r3
 80098ea:	d0b6      	beq.n	800985a <_malloc_r+0x22>
 80098ec:	1b9b      	subs	r3, r3, r6
 80098ee:	50a3      	str	r3, [r4, r2]
 80098f0:	e7b3      	b.n	800985a <_malloc_r+0x22>
 80098f2:	6862      	ldr	r2, [r4, #4]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	bf0c      	ite	eq
 80098f8:	6032      	streq	r2, [r6, #0]
 80098fa:	605a      	strne	r2, [r3, #4]
 80098fc:	e7ec      	b.n	80098d8 <_malloc_r+0xa0>
 80098fe:	4623      	mov	r3, r4
 8009900:	6864      	ldr	r4, [r4, #4]
 8009902:	e7b2      	b.n	800986a <_malloc_r+0x32>
 8009904:	4634      	mov	r4, r6
 8009906:	6876      	ldr	r6, [r6, #4]
 8009908:	e7b9      	b.n	800987e <_malloc_r+0x46>
 800990a:	230c      	movs	r3, #12
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4638      	mov	r0, r7
 8009910:	f000 f85e 	bl	80099d0 <__malloc_unlock>
 8009914:	e7a1      	b.n	800985a <_malloc_r+0x22>
 8009916:	6025      	str	r5, [r4, #0]
 8009918:	e7de      	b.n	80098d8 <_malloc_r+0xa0>
 800991a:	bf00      	nop
 800991c:	20001c94 	.word	0x20001c94

08009920 <_sbrk_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d06      	ldr	r5, [pc, #24]	; (800993c <_sbrk_r+0x1c>)
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	f7f9 f818 	bl	8002960 <_sbrk>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_sbrk_r+0x1a>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_sbrk_r+0x1a>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20001c9c 	.word	0x20001c9c

08009940 <__assert_func>:
 8009940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009942:	4614      	mov	r4, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <__assert_func+0x2c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4605      	mov	r5, r0
 800994c:	68d8      	ldr	r0, [r3, #12]
 800994e:	b14c      	cbz	r4, 8009964 <__assert_func+0x24>
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <__assert_func+0x30>)
 8009952:	9100      	str	r1, [sp, #0]
 8009954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009958:	4906      	ldr	r1, [pc, #24]	; (8009974 <__assert_func+0x34>)
 800995a:	462b      	mov	r3, r5
 800995c:	f000 f80e 	bl	800997c <fiprintf>
 8009960:	f000 fa64 	bl	8009e2c <abort>
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <__assert_func+0x38>)
 8009966:	461c      	mov	r4, r3
 8009968:	e7f3      	b.n	8009952 <__assert_func+0x12>
 800996a:	bf00      	nop
 800996c:	2000017c 	.word	0x2000017c
 8009970:	0800a71c 	.word	0x0800a71c
 8009974:	0800a729 	.word	0x0800a729
 8009978:	0800a757 	.word	0x0800a757

0800997c <fiprintf>:
 800997c:	b40e      	push	{r1, r2, r3}
 800997e:	b503      	push	{r0, r1, lr}
 8009980:	4601      	mov	r1, r0
 8009982:	ab03      	add	r3, sp, #12
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <fiprintf+0x20>)
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f000 f84f 	bl	8009a30 <_vfiprintf_r>
 8009992:	b002      	add	sp, #8
 8009994:	f85d eb04 	ldr.w	lr, [sp], #4
 8009998:	b003      	add	sp, #12
 800999a:	4770      	bx	lr
 800999c:	2000017c 	.word	0x2000017c

080099a0 <__ascii_mbtowc>:
 80099a0:	b082      	sub	sp, #8
 80099a2:	b901      	cbnz	r1, 80099a6 <__ascii_mbtowc+0x6>
 80099a4:	a901      	add	r1, sp, #4
 80099a6:	b142      	cbz	r2, 80099ba <__ascii_mbtowc+0x1a>
 80099a8:	b14b      	cbz	r3, 80099be <__ascii_mbtowc+0x1e>
 80099aa:	7813      	ldrb	r3, [r2, #0]
 80099ac:	600b      	str	r3, [r1, #0]
 80099ae:	7812      	ldrb	r2, [r2, #0]
 80099b0:	1e10      	subs	r0, r2, #0
 80099b2:	bf18      	it	ne
 80099b4:	2001      	movne	r0, #1
 80099b6:	b002      	add	sp, #8
 80099b8:	4770      	bx	lr
 80099ba:	4610      	mov	r0, r2
 80099bc:	e7fb      	b.n	80099b6 <__ascii_mbtowc+0x16>
 80099be:	f06f 0001 	mvn.w	r0, #1
 80099c2:	e7f8      	b.n	80099b6 <__ascii_mbtowc+0x16>

080099c4 <__malloc_lock>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__malloc_lock+0x8>)
 80099c6:	f000 bbf1 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	20001ca0 	.word	0x20001ca0

080099d0 <__malloc_unlock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__malloc_unlock+0x8>)
 80099d2:	f000 bbec 	b.w	800a1ae <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	20001ca0 	.word	0x20001ca0

080099dc <__sfputc_r>:
 80099dc:	6893      	ldr	r3, [r2, #8]
 80099de:	3b01      	subs	r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	b410      	push	{r4}
 80099e4:	6093      	str	r3, [r2, #8]
 80099e6:	da08      	bge.n	80099fa <__sfputc_r+0x1e>
 80099e8:	6994      	ldr	r4, [r2, #24]
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	db01      	blt.n	80099f2 <__sfputc_r+0x16>
 80099ee:	290a      	cmp	r1, #10
 80099f0:	d103      	bne.n	80099fa <__sfputc_r+0x1e>
 80099f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f6:	f000 b94b 	b.w	8009c90 <__swbuf_r>
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	1c58      	adds	r0, r3, #1
 80099fe:	6010      	str	r0, [r2, #0]
 8009a00:	7019      	strb	r1, [r3, #0]
 8009a02:	4608      	mov	r0, r1
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <__sfputs_r>:
 8009a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	18d5      	adds	r5, r2, r3
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	d101      	bne.n	8009a1c <__sfputs_r+0x12>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e007      	b.n	8009a2c <__sfputs_r+0x22>
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	463a      	mov	r2, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffda 	bl	80099dc <__sfputc_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d1f3      	bne.n	8009a14 <__sfputs_r+0xa>
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460d      	mov	r5, r1
 8009a36:	b09d      	sub	sp, #116	; 0x74
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6983      	ldr	r3, [r0, #24]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f000 fb14 	bl	800a070 <__sinit>
 8009a48:	4b89      	ldr	r3, [pc, #548]	; (8009c70 <_vfiprintf_r+0x240>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	d11b      	bne.n	8009a86 <_vfiprintf_r+0x56>
 8009a4e:	6875      	ldr	r5, [r6, #4]
 8009a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a52:	07d9      	lsls	r1, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a5e:	f000 fba5 	bl	800a1ac <__retarget_lock_acquire_recursive>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	071b      	lsls	r3, r3, #28
 8009a66:	d501      	bpl.n	8009a6c <_vfiprintf_r+0x3c>
 8009a68:	692b      	ldr	r3, [r5, #16]
 8009a6a:	b9eb      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x78>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 f96e 	bl	8009d50 <__swsetup_r>
 8009a74:	b1c0      	cbz	r0, 8009aa8 <_vfiprintf_r+0x78>
 8009a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a78:	07dc      	lsls	r4, r3, #31
 8009a7a:	d50e      	bpl.n	8009a9a <_vfiprintf_r+0x6a>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	; 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	4b7b      	ldr	r3, [pc, #492]	; (8009c74 <_vfiprintf_r+0x244>)
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	d101      	bne.n	8009a90 <_vfiprintf_r+0x60>
 8009a8c:	68b5      	ldr	r5, [r6, #8]
 8009a8e:	e7df      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a90:	4b79      	ldr	r3, [pc, #484]	; (8009c78 <_vfiprintf_r+0x248>)
 8009a92:	429d      	cmp	r5, r3
 8009a94:	bf08      	it	eq
 8009a96:	68f5      	ldreq	r5, [r6, #12]
 8009a98:	e7da      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	0598      	lsls	r0, r3, #22
 8009a9e:	d4ed      	bmi.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa2:	f000 fb84 	bl	800a1ae <__retarget_lock_release_recursive>
 8009aa6:	e7e9      	b.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	2320      	movs	r3, #32
 8009aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab6:	2330      	movs	r3, #48	; 0x30
 8009ab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c7c <_vfiprintf_r+0x24c>
 8009abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac0:	f04f 0901 	mov.w	r9, #1
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_vfiprintf_r+0xa2>
 8009ace:	2a25      	cmp	r2, #37	; 0x25
 8009ad0:	d1f9      	bne.n	8009ac6 <_vfiprintf_r+0x96>
 8009ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad6:	d00b      	beq.n	8009af0 <_vfiprintf_r+0xc0>
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff93 	bl	8009a0a <__sfputs_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f000 80aa 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aec:	445a      	add	r2, fp
 8009aee:	9209      	str	r2, [sp, #36]	; 0x24
 8009af0:	f89a 3000 	ldrb.w	r3, [sl]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80a2 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b04:	f10a 0a01 	add.w	sl, sl, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b10:	931a      	str	r3, [sp, #104]	; 0x68
 8009b12:	4654      	mov	r4, sl
 8009b14:	2205      	movs	r2, #5
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4858      	ldr	r0, [pc, #352]	; (8009c7c <_vfiprintf_r+0x24c>)
 8009b1c:	f7f6 fb60 	bl	80001e0 <memchr>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	b9d8      	cbnz	r0, 8009b5c <_vfiprintf_r+0x12c>
 8009b24:	06d1      	lsls	r1, r2, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2320      	movmi	r3, #32
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2e:	0713      	lsls	r3, r2, #28
 8009b30:	bf44      	itt	mi
 8009b32:	232b      	movmi	r3, #43	; 0x2b
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3e:	d015      	beq.n	8009b6c <_vfiprintf_r+0x13c>
 8009b40:	9a07      	ldr	r2, [sp, #28]
 8009b42:	4654      	mov	r4, sl
 8009b44:	2000      	movs	r0, #0
 8009b46:	f04f 0c0a 	mov.w	ip, #10
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b50:	3b30      	subs	r3, #48	; 0x30
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d94e      	bls.n	8009bf4 <_vfiprintf_r+0x1c4>
 8009b56:	b1b0      	cbz	r0, 8009b86 <_vfiprintf_r+0x156>
 8009b58:	9207      	str	r2, [sp, #28]
 8009b5a:	e014      	b.n	8009b86 <_vfiprintf_r+0x156>
 8009b5c:	eba0 0308 	sub.w	r3, r0, r8
 8009b60:	fa09 f303 	lsl.w	r3, r9, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	46a2      	mov	sl, r4
 8009b6a:	e7d2      	b.n	8009b12 <_vfiprintf_r+0xe2>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9103      	str	r1, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	425b      	neglt	r3, r3
 8009b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7e:	9307      	strge	r3, [sp, #28]
 8009b80:	9307      	strlt	r3, [sp, #28]
 8009b82:	bfb8      	it	lt
 8009b84:	9204      	strlt	r2, [sp, #16]
 8009b86:	7823      	ldrb	r3, [r4, #0]
 8009b88:	2b2e      	cmp	r3, #46	; 0x2e
 8009b8a:	d10c      	bne.n	8009ba6 <_vfiprintf_r+0x176>
 8009b8c:	7863      	ldrb	r3, [r4, #1]
 8009b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b90:	d135      	bne.n	8009bfe <_vfiprintf_r+0x1ce>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	1d1a      	adds	r2, r3, #4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	9203      	str	r2, [sp, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bfb8      	it	lt
 8009b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba2:	3402      	adds	r4, #2
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c8c <_vfiprintf_r+0x25c>
 8009baa:	7821      	ldrb	r1, [r4, #0]
 8009bac:	2203      	movs	r2, #3
 8009bae:	4650      	mov	r0, sl
 8009bb0:	f7f6 fb16 	bl	80001e0 <memchr>
 8009bb4:	b140      	cbz	r0, 8009bc8 <_vfiprintf_r+0x198>
 8009bb6:	2340      	movs	r3, #64	; 0x40
 8009bb8:	eba0 000a 	sub.w	r0, r0, sl
 8009bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	4303      	orrs	r3, r0
 8009bc4:	3401      	adds	r4, #1
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bcc:	482c      	ldr	r0, [pc, #176]	; (8009c80 <_vfiprintf_r+0x250>)
 8009bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd2:	2206      	movs	r2, #6
 8009bd4:	f7f6 fb04 	bl	80001e0 <memchr>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d03f      	beq.n	8009c5c <_vfiprintf_r+0x22c>
 8009bdc:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <_vfiprintf_r+0x254>)
 8009bde:	bb1b      	cbnz	r3, 8009c28 <_vfiprintf_r+0x1f8>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	3308      	adds	r3, #8
 8009bea:	9303      	str	r3, [sp, #12]
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	443b      	add	r3, r7
 8009bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf2:	e767      	b.n	8009ac4 <_vfiprintf_r+0x94>
 8009bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7a5      	b.n	8009b4a <_vfiprintf_r+0x11a>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	3401      	adds	r4, #1
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f04f 0c0a 	mov.w	ip, #10
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c10:	3a30      	subs	r2, #48	; 0x30
 8009c12:	2a09      	cmp	r2, #9
 8009c14:	d903      	bls.n	8009c1e <_vfiprintf_r+0x1ee>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c5      	beq.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1a:	9105      	str	r1, [sp, #20]
 8009c1c:	e7c3      	b.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c22:	4604      	mov	r4, r0
 8009c24:	2301      	movs	r3, #1
 8009c26:	e7f0      	b.n	8009c0a <_vfiprintf_r+0x1da>
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <_vfiprintf_r+0x258>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7fd ffaa 	bl	8007b8c <_printf_float>
 8009c38:	4607      	mov	r7, r0
 8009c3a:	1c78      	adds	r0, r7, #1
 8009c3c:	d1d6      	bne.n	8009bec <_vfiprintf_r+0x1bc>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c40:	07d9      	lsls	r1, r3, #31
 8009c42:	d405      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	059a      	lsls	r2, r3, #22
 8009c48:	d402      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4c:	f000 faaf 	bl	800a1ae <__retarget_lock_release_recursive>
 8009c50:	89ab      	ldrh	r3, [r5, #12]
 8009c52:	065b      	lsls	r3, r3, #25
 8009c54:	f53f af12 	bmi.w	8009a7c <_vfiprintf_r+0x4c>
 8009c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5a:	e711      	b.n	8009a80 <_vfiprintf_r+0x50>
 8009c5c:	ab03      	add	r3, sp, #12
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	462a      	mov	r2, r5
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <_vfiprintf_r+0x258>)
 8009c64:	a904      	add	r1, sp, #16
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7fe fa34 	bl	80080d4 <_printf_i>
 8009c6c:	e7e4      	b.n	8009c38 <_vfiprintf_r+0x208>
 8009c6e:	bf00      	nop
 8009c70:	0800a894 	.word	0x0800a894
 8009c74:	0800a8b4 	.word	0x0800a8b4
 8009c78:	0800a874 	.word	0x0800a874
 8009c7c:	0800a762 	.word	0x0800a762
 8009c80:	0800a76c 	.word	0x0800a76c
 8009c84:	08007b8d 	.word	0x08007b8d
 8009c88:	08009a0b 	.word	0x08009a0b
 8009c8c:	0800a768 	.word	0x0800a768

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f000 f9e7 	bl	800a070 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f93c 	bl	8009f48 <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f927 	bl	8009f48 <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f81a 	bl	8009d50 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	0800a894 	.word	0x0800a894
 8009d2c:	0800a8b4 	.word	0x0800a8b4
 8009d30:	0800a874 	.word	0x0800a874

08009d34 <__ascii_wctomb>:
 8009d34:	b149      	cbz	r1, 8009d4a <__ascii_wctomb+0x16>
 8009d36:	2aff      	cmp	r2, #255	; 0xff
 8009d38:	bf85      	ittet	hi
 8009d3a:	238a      	movhi	r3, #138	; 0x8a
 8009d3c:	6003      	strhi	r3, [r0, #0]
 8009d3e:	700a      	strbls	r2, [r1, #0]
 8009d40:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d44:	bf98      	it	ls
 8009d46:	2001      	movls	r0, #1
 8009d48:	4770      	bx	lr
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	4770      	bx	lr
	...

08009d50 <__swsetup_r>:
 8009d50:	4b32      	ldr	r3, [pc, #200]	; (8009e1c <__swsetup_r+0xcc>)
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	4606      	mov	r6, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	b125      	cbz	r5, 8009d66 <__swsetup_r+0x16>
 8009d5c:	69ab      	ldr	r3, [r5, #24]
 8009d5e:	b913      	cbnz	r3, 8009d66 <__swsetup_r+0x16>
 8009d60:	4628      	mov	r0, r5
 8009d62:	f000 f985 	bl	800a070 <__sinit>
 8009d66:	4b2e      	ldr	r3, [pc, #184]	; (8009e20 <__swsetup_r+0xd0>)
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	d10f      	bne.n	8009d8c <__swsetup_r+0x3c>
 8009d6c:	686c      	ldr	r4, [r5, #4]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d74:	0719      	lsls	r1, r3, #28
 8009d76:	d42c      	bmi.n	8009dd2 <__swsetup_r+0x82>
 8009d78:	06dd      	lsls	r5, r3, #27
 8009d7a:	d411      	bmi.n	8009da0 <__swsetup_r+0x50>
 8009d7c:	2309      	movs	r3, #9
 8009d7e:	6033      	str	r3, [r6, #0]
 8009d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	e03e      	b.n	8009e0a <__swsetup_r+0xba>
 8009d8c:	4b25      	ldr	r3, [pc, #148]	; (8009e24 <__swsetup_r+0xd4>)
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d101      	bne.n	8009d96 <__swsetup_r+0x46>
 8009d92:	68ac      	ldr	r4, [r5, #8]
 8009d94:	e7eb      	b.n	8009d6e <__swsetup_r+0x1e>
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <__swsetup_r+0xd8>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	bf08      	it	eq
 8009d9c:	68ec      	ldreq	r4, [r5, #12]
 8009d9e:	e7e6      	b.n	8009d6e <__swsetup_r+0x1e>
 8009da0:	0758      	lsls	r0, r3, #29
 8009da2:	d512      	bpl.n	8009dca <__swsetup_r+0x7a>
 8009da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da6:	b141      	cbz	r1, 8009dba <__swsetup_r+0x6a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__swsetup_r+0x66>
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff fcd5 	bl	8009760 <_free_r>
 8009db6:	2300      	movs	r3, #0
 8009db8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f043 0308 	orr.w	r3, r3, #8
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	b94b      	cbnz	r3, 8009dea <__swsetup_r+0x9a>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de0:	d003      	beq.n	8009dea <__swsetup_r+0x9a>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4630      	mov	r0, r6
 8009de6:	f000 fa09 	bl	800a1fc <__smakebuf_r>
 8009dea:	89a0      	ldrh	r0, [r4, #12]
 8009dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df0:	f010 0301 	ands.w	r3, r0, #1
 8009df4:	d00a      	beq.n	8009e0c <__swsetup_r+0xbc>
 8009df6:	2300      	movs	r3, #0
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	6963      	ldr	r3, [r4, #20]
 8009dfc:	425b      	negs	r3, r3
 8009dfe:	61a3      	str	r3, [r4, #24]
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	b943      	cbnz	r3, 8009e16 <__swsetup_r+0xc6>
 8009e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e08:	d1ba      	bne.n	8009d80 <__swsetup_r+0x30>
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	0781      	lsls	r1, r0, #30
 8009e0e:	bf58      	it	pl
 8009e10:	6963      	ldrpl	r3, [r4, #20]
 8009e12:	60a3      	str	r3, [r4, #8]
 8009e14:	e7f4      	b.n	8009e00 <__swsetup_r+0xb0>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e7f7      	b.n	8009e0a <__swsetup_r+0xba>
 8009e1a:	bf00      	nop
 8009e1c:	2000017c 	.word	0x2000017c
 8009e20:	0800a894 	.word	0x0800a894
 8009e24:	0800a8b4 	.word	0x0800a8b4
 8009e28:	0800a874 	.word	0x0800a874

08009e2c <abort>:
 8009e2c:	b508      	push	{r3, lr}
 8009e2e:	2006      	movs	r0, #6
 8009e30:	f000 fa4c 	bl	800a2cc <raise>
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7f8 fd65 	bl	8002904 <_exit>
	...

08009e3c <__sflush_r>:
 8009e3c:	898a      	ldrh	r2, [r1, #12]
 8009e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e42:	4605      	mov	r5, r0
 8009e44:	0710      	lsls	r0, r2, #28
 8009e46:	460c      	mov	r4, r1
 8009e48:	d458      	bmi.n	8009efc <__sflush_r+0xc0>
 8009e4a:	684b      	ldr	r3, [r1, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dc05      	bgt.n	8009e5c <__sflush_r+0x20>
 8009e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dc02      	bgt.n	8009e5c <__sflush_r+0x20>
 8009e56:	2000      	movs	r0, #0
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	d0f9      	beq.n	8009e56 <__sflush_r+0x1a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e68:	682f      	ldr	r7, [r5, #0]
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	d032      	beq.n	8009ed4 <__sflush_r+0x98>
 8009e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	075a      	lsls	r2, r3, #29
 8009e74:	d505      	bpl.n	8009e82 <__sflush_r+0x46>
 8009e76:	6863      	ldr	r3, [r4, #4]
 8009e78:	1ac0      	subs	r0, r0, r3
 8009e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e7c:	b10b      	cbz	r3, 8009e82 <__sflush_r+0x46>
 8009e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	2300      	movs	r3, #0
 8009e84:	4602      	mov	r2, r0
 8009e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e88:	6a21      	ldr	r1, [r4, #32]
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b0      	blx	r6
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	d106      	bne.n	8009ea2 <__sflush_r+0x66>
 8009e94:	6829      	ldr	r1, [r5, #0]
 8009e96:	291d      	cmp	r1, #29
 8009e98:	d82c      	bhi.n	8009ef4 <__sflush_r+0xb8>
 8009e9a:	4a2a      	ldr	r2, [pc, #168]	; (8009f44 <__sflush_r+0x108>)
 8009e9c:	40ca      	lsrs	r2, r1
 8009e9e:	07d6      	lsls	r6, r2, #31
 8009ea0:	d528      	bpl.n	8009ef4 <__sflush_r+0xb8>
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	6062      	str	r2, [r4, #4]
 8009ea6:	04d9      	lsls	r1, r3, #19
 8009ea8:	6922      	ldr	r2, [r4, #16]
 8009eaa:	6022      	str	r2, [r4, #0]
 8009eac:	d504      	bpl.n	8009eb8 <__sflush_r+0x7c>
 8009eae:	1c42      	adds	r2, r0, #1
 8009eb0:	d101      	bne.n	8009eb6 <__sflush_r+0x7a>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b903      	cbnz	r3, 8009eb8 <__sflush_r+0x7c>
 8009eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8009eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eba:	602f      	str	r7, [r5, #0]
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d0ca      	beq.n	8009e56 <__sflush_r+0x1a>
 8009ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ec4:	4299      	cmp	r1, r3
 8009ec6:	d002      	beq.n	8009ece <__sflush_r+0x92>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f7ff fc49 	bl	8009760 <_free_r>
 8009ece:	2000      	movs	r0, #0
 8009ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ed2:	e7c1      	b.n	8009e58 <__sflush_r+0x1c>
 8009ed4:	6a21      	ldr	r1, [r4, #32]
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b0      	blx	r6
 8009edc:	1c41      	adds	r1, r0, #1
 8009ede:	d1c7      	bne.n	8009e70 <__sflush_r+0x34>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0c4      	beq.n	8009e70 <__sflush_r+0x34>
 8009ee6:	2b1d      	cmp	r3, #29
 8009ee8:	d001      	beq.n	8009eee <__sflush_r+0xb2>
 8009eea:	2b16      	cmp	r3, #22
 8009eec:	d101      	bne.n	8009ef2 <__sflush_r+0xb6>
 8009eee:	602f      	str	r7, [r5, #0]
 8009ef0:	e7b1      	b.n	8009e56 <__sflush_r+0x1a>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	e7ad      	b.n	8009e58 <__sflush_r+0x1c>
 8009efc:	690f      	ldr	r7, [r1, #16]
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	d0a9      	beq.n	8009e56 <__sflush_r+0x1a>
 8009f02:	0793      	lsls	r3, r2, #30
 8009f04:	680e      	ldr	r6, [r1, #0]
 8009f06:	bf08      	it	eq
 8009f08:	694b      	ldreq	r3, [r1, #20]
 8009f0a:	600f      	str	r7, [r1, #0]
 8009f0c:	bf18      	it	ne
 8009f0e:	2300      	movne	r3, #0
 8009f10:	eba6 0807 	sub.w	r8, r6, r7
 8009f14:	608b      	str	r3, [r1, #8]
 8009f16:	f1b8 0f00 	cmp.w	r8, #0
 8009f1a:	dd9c      	ble.n	8009e56 <__sflush_r+0x1a>
 8009f1c:	6a21      	ldr	r1, [r4, #32]
 8009f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f20:	4643      	mov	r3, r8
 8009f22:	463a      	mov	r2, r7
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b0      	blx	r6
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	dc06      	bgt.n	8009f3a <__sflush_r+0xfe>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e78e      	b.n	8009e58 <__sflush_r+0x1c>
 8009f3a:	4407      	add	r7, r0
 8009f3c:	eba8 0800 	sub.w	r8, r8, r0
 8009f40:	e7e9      	b.n	8009f16 <__sflush_r+0xda>
 8009f42:	bf00      	nop
 8009f44:	20400001 	.word	0x20400001

08009f48 <_fflush_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	b913      	cbnz	r3, 8009f58 <_fflush_r+0x10>
 8009f52:	2500      	movs	r5, #0
 8009f54:	4628      	mov	r0, r5
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	b118      	cbz	r0, 8009f62 <_fflush_r+0x1a>
 8009f5a:	6983      	ldr	r3, [r0, #24]
 8009f5c:	b90b      	cbnz	r3, 8009f62 <_fflush_r+0x1a>
 8009f5e:	f000 f887 	bl	800a070 <__sinit>
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <_fflush_r+0x6c>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	d11b      	bne.n	8009fa0 <_fflush_r+0x58>
 8009f68:	686c      	ldr	r4, [r5, #4]
 8009f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0ef      	beq.n	8009f52 <_fflush_r+0xa>
 8009f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f74:	07d0      	lsls	r0, r2, #31
 8009f76:	d404      	bmi.n	8009f82 <_fflush_r+0x3a>
 8009f78:	0599      	lsls	r1, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_fflush_r+0x3a>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f000 f915 	bl	800a1ac <__retarget_lock_acquire_recursive>
 8009f82:	4628      	mov	r0, r5
 8009f84:	4621      	mov	r1, r4
 8009f86:	f7ff ff59 	bl	8009e3c <__sflush_r>
 8009f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f8c:	07da      	lsls	r2, r3, #31
 8009f8e:	4605      	mov	r5, r0
 8009f90:	d4e0      	bmi.n	8009f54 <_fflush_r+0xc>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	059b      	lsls	r3, r3, #22
 8009f96:	d4dd      	bmi.n	8009f54 <_fflush_r+0xc>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f000 f908 	bl	800a1ae <__retarget_lock_release_recursive>
 8009f9e:	e7d9      	b.n	8009f54 <_fflush_r+0xc>
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <_fflush_r+0x70>)
 8009fa2:	429c      	cmp	r4, r3
 8009fa4:	d101      	bne.n	8009faa <_fflush_r+0x62>
 8009fa6:	68ac      	ldr	r4, [r5, #8]
 8009fa8:	e7df      	b.n	8009f6a <_fflush_r+0x22>
 8009faa:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <_fflush_r+0x74>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	bf08      	it	eq
 8009fb0:	68ec      	ldreq	r4, [r5, #12]
 8009fb2:	e7da      	b.n	8009f6a <_fflush_r+0x22>
 8009fb4:	0800a894 	.word	0x0800a894
 8009fb8:	0800a8b4 	.word	0x0800a8b4
 8009fbc:	0800a874 	.word	0x0800a874

08009fc0 <std>:
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fce:	6083      	str	r3, [r0, #8]
 8009fd0:	8181      	strh	r1, [r0, #12]
 8009fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fd4:	81c2      	strh	r2, [r0, #14]
 8009fd6:	6183      	str	r3, [r0, #24]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	2208      	movs	r2, #8
 8009fdc:	305c      	adds	r0, #92	; 0x5c
 8009fde:	f7fd fd2d 	bl	8007a3c <memset>
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <std+0x38>)
 8009fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fe6:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <std+0x3c>)
 8009fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x40>)
 8009fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x44>)
 8009ff0:	6224      	str	r4, [r4, #32]
 8009ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800a305 	.word	0x0800a305
 8009ffc:	0800a327 	.word	0x0800a327
 800a000:	0800a35f 	.word	0x0800a35f
 800a004:	0800a383 	.word	0x0800a383

0800a008 <_cleanup_r>:
 800a008:	4901      	ldr	r1, [pc, #4]	; (800a010 <_cleanup_r+0x8>)
 800a00a:	f000 b8af 	b.w	800a16c <_fwalk_reent>
 800a00e:	bf00      	nop
 800a010:	08009f49 	.word	0x08009f49

0800a014 <__sfmoreglue>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	2268      	movs	r2, #104	; 0x68
 800a018:	1e4d      	subs	r5, r1, #1
 800a01a:	4355      	muls	r5, r2
 800a01c:	460e      	mov	r6, r1
 800a01e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a022:	f7ff fc09 	bl	8009838 <_malloc_r>
 800a026:	4604      	mov	r4, r0
 800a028:	b140      	cbz	r0, 800a03c <__sfmoreglue+0x28>
 800a02a:	2100      	movs	r1, #0
 800a02c:	e9c0 1600 	strd	r1, r6, [r0]
 800a030:	300c      	adds	r0, #12
 800a032:	60a0      	str	r0, [r4, #8]
 800a034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a038:	f7fd fd00 	bl	8007a3c <memset>
 800a03c:	4620      	mov	r0, r4
 800a03e:	bd70      	pop	{r4, r5, r6, pc}

0800a040 <__sfp_lock_acquire>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sfp_lock_acquire+0x8>)
 800a042:	f000 b8b3 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20001ca1 	.word	0x20001ca1

0800a04c <__sfp_lock_release>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__sfp_lock_release+0x8>)
 800a04e:	f000 b8ae 	b.w	800a1ae <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20001ca1 	.word	0x20001ca1

0800a058 <__sinit_lock_acquire>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__sinit_lock_acquire+0x8>)
 800a05a:	f000 b8a7 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 800a05e:	bf00      	nop
 800a060:	20001ca2 	.word	0x20001ca2

0800a064 <__sinit_lock_release>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__sinit_lock_release+0x8>)
 800a066:	f000 b8a2 	b.w	800a1ae <__retarget_lock_release_recursive>
 800a06a:	bf00      	nop
 800a06c:	20001ca2 	.word	0x20001ca2

0800a070 <__sinit>:
 800a070:	b510      	push	{r4, lr}
 800a072:	4604      	mov	r4, r0
 800a074:	f7ff fff0 	bl	800a058 <__sinit_lock_acquire>
 800a078:	69a3      	ldr	r3, [r4, #24]
 800a07a:	b11b      	cbz	r3, 800a084 <__sinit+0x14>
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a080:	f7ff bff0 	b.w	800a064 <__sinit_lock_release>
 800a084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a088:	6523      	str	r3, [r4, #80]	; 0x50
 800a08a:	4b13      	ldr	r3, [pc, #76]	; (800a0d8 <__sinit+0x68>)
 800a08c:	4a13      	ldr	r2, [pc, #76]	; (800a0dc <__sinit+0x6c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	62a2      	str	r2, [r4, #40]	; 0x28
 800a092:	42a3      	cmp	r3, r4
 800a094:	bf04      	itt	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	61a3      	streq	r3, [r4, #24]
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 f820 	bl	800a0e0 <__sfp>
 800a0a0:	6060      	str	r0, [r4, #4]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f81c 	bl	800a0e0 <__sfp>
 800a0a8:	60a0      	str	r0, [r4, #8]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f818 	bl	800a0e0 <__sfp>
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	60e0      	str	r0, [r4, #12]
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	6860      	ldr	r0, [r4, #4]
 800a0b8:	f7ff ff82 	bl	8009fc0 <std>
 800a0bc:	68a0      	ldr	r0, [r4, #8]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	2109      	movs	r1, #9
 800a0c2:	f7ff ff7d 	bl	8009fc0 <std>
 800a0c6:	68e0      	ldr	r0, [r4, #12]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	2112      	movs	r1, #18
 800a0cc:	f7ff ff78 	bl	8009fc0 <std>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	61a3      	str	r3, [r4, #24]
 800a0d4:	e7d2      	b.n	800a07c <__sinit+0xc>
 800a0d6:	bf00      	nop
 800a0d8:	0800a4f8 	.word	0x0800a4f8
 800a0dc:	0800a009 	.word	0x0800a009

0800a0e0 <__sfp>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	f7ff ffac 	bl	800a040 <__sfp_lock_acquire>
 800a0e8:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <__sfp+0x84>)
 800a0ea:	681e      	ldr	r6, [r3, #0]
 800a0ec:	69b3      	ldr	r3, [r6, #24]
 800a0ee:	b913      	cbnz	r3, 800a0f6 <__sfp+0x16>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff ffbd 	bl	800a070 <__sinit>
 800a0f6:	3648      	adds	r6, #72	; 0x48
 800a0f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	d503      	bpl.n	800a108 <__sfp+0x28>
 800a100:	6833      	ldr	r3, [r6, #0]
 800a102:	b30b      	cbz	r3, 800a148 <__sfp+0x68>
 800a104:	6836      	ldr	r6, [r6, #0]
 800a106:	e7f7      	b.n	800a0f8 <__sfp+0x18>
 800a108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a10c:	b9d5      	cbnz	r5, 800a144 <__sfp+0x64>
 800a10e:	4b16      	ldr	r3, [pc, #88]	; (800a168 <__sfp+0x88>)
 800a110:	60e3      	str	r3, [r4, #12]
 800a112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a116:	6665      	str	r5, [r4, #100]	; 0x64
 800a118:	f000 f847 	bl	800a1aa <__retarget_lock_init_recursive>
 800a11c:	f7ff ff96 	bl	800a04c <__sfp_lock_release>
 800a120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a128:	6025      	str	r5, [r4, #0]
 800a12a:	61a5      	str	r5, [r4, #24]
 800a12c:	2208      	movs	r2, #8
 800a12e:	4629      	mov	r1, r5
 800a130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a134:	f7fd fc82 	bl	8007a3c <memset>
 800a138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a13c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a140:	4620      	mov	r0, r4
 800a142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a144:	3468      	adds	r4, #104	; 0x68
 800a146:	e7d9      	b.n	800a0fc <__sfp+0x1c>
 800a148:	2104      	movs	r1, #4
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7ff ff62 	bl	800a014 <__sfmoreglue>
 800a150:	4604      	mov	r4, r0
 800a152:	6030      	str	r0, [r6, #0]
 800a154:	2800      	cmp	r0, #0
 800a156:	d1d5      	bne.n	800a104 <__sfp+0x24>
 800a158:	f7ff ff78 	bl	800a04c <__sfp_lock_release>
 800a15c:	230c      	movs	r3, #12
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	e7ee      	b.n	800a140 <__sfp+0x60>
 800a162:	bf00      	nop
 800a164:	0800a4f8 	.word	0x0800a4f8
 800a168:	ffff0001 	.word	0xffff0001

0800a16c <_fwalk_reent>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4606      	mov	r6, r0
 800a172:	4688      	mov	r8, r1
 800a174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a178:	2700      	movs	r7, #0
 800a17a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a17e:	f1b9 0901 	subs.w	r9, r9, #1
 800a182:	d505      	bpl.n	800a190 <_fwalk_reent+0x24>
 800a184:	6824      	ldr	r4, [r4, #0]
 800a186:	2c00      	cmp	r4, #0
 800a188:	d1f7      	bne.n	800a17a <_fwalk_reent+0xe>
 800a18a:	4638      	mov	r0, r7
 800a18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a190:	89ab      	ldrh	r3, [r5, #12]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d907      	bls.n	800a1a6 <_fwalk_reent+0x3a>
 800a196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a19a:	3301      	adds	r3, #1
 800a19c:	d003      	beq.n	800a1a6 <_fwalk_reent+0x3a>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	47c0      	blx	r8
 800a1a4:	4307      	orrs	r7, r0
 800a1a6:	3568      	adds	r5, #104	; 0x68
 800a1a8:	e7e9      	b.n	800a17e <_fwalk_reent+0x12>

0800a1aa <__retarget_lock_init_recursive>:
 800a1aa:	4770      	bx	lr

0800a1ac <__retarget_lock_acquire_recursive>:
 800a1ac:	4770      	bx	lr

0800a1ae <__retarget_lock_release_recursive>:
 800a1ae:	4770      	bx	lr

0800a1b0 <__swhatbuf_r>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	b096      	sub	sp, #88	; 0x58
 800a1bc:	4614      	mov	r4, r2
 800a1be:	461d      	mov	r5, r3
 800a1c0:	da08      	bge.n	800a1d4 <__swhatbuf_r+0x24>
 800a1c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	602a      	str	r2, [r5, #0]
 800a1ca:	061a      	lsls	r2, r3, #24
 800a1cc:	d410      	bmi.n	800a1f0 <__swhatbuf_r+0x40>
 800a1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d2:	e00e      	b.n	800a1f2 <__swhatbuf_r+0x42>
 800a1d4:	466a      	mov	r2, sp
 800a1d6:	f000 f8fb 	bl	800a3d0 <_fstat_r>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	dbf1      	blt.n	800a1c2 <__swhatbuf_r+0x12>
 800a1de:	9a01      	ldr	r2, [sp, #4]
 800a1e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1e8:	425a      	negs	r2, r3
 800a1ea:	415a      	adcs	r2, r3
 800a1ec:	602a      	str	r2, [r5, #0]
 800a1ee:	e7ee      	b.n	800a1ce <__swhatbuf_r+0x1e>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	b016      	add	sp, #88	; 0x58
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1fc <__smakebuf_r>:
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a200:	079d      	lsls	r5, r3, #30
 800a202:	4606      	mov	r6, r0
 800a204:	460c      	mov	r4, r1
 800a206:	d507      	bpl.n	800a218 <__smakebuf_r+0x1c>
 800a208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2301      	movs	r3, #1
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	b002      	add	sp, #8
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	ab01      	add	r3, sp, #4
 800a21a:	466a      	mov	r2, sp
 800a21c:	f7ff ffc8 	bl	800a1b0 <__swhatbuf_r>
 800a220:	9900      	ldr	r1, [sp, #0]
 800a222:	4605      	mov	r5, r0
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff fb07 	bl	8009838 <_malloc_r>
 800a22a:	b948      	cbnz	r0, 800a240 <__smakebuf_r+0x44>
 800a22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d4ef      	bmi.n	800a214 <__smakebuf_r+0x18>
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7e3      	b.n	800a208 <__smakebuf_r+0xc>
 800a240:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <__smakebuf_r+0x7c>)
 800a242:	62b3      	str	r3, [r6, #40]	; 0x28
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	6020      	str	r0, [r4, #0]
 800a248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	6163      	str	r3, [r4, #20]
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	6120      	str	r0, [r4, #16]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x74>
 800a258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f8c9 	bl	800a3f4 <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x74>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a0      	ldrh	r0, [r4, #12]
 800a272:	4305      	orrs	r5, r0
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cd      	b.n	800a214 <__smakebuf_r+0x18>
 800a278:	0800a009 	.word	0x0800a009

0800a27c <_raise_r>:
 800a27c:	291f      	cmp	r1, #31
 800a27e:	b538      	push	{r3, r4, r5, lr}
 800a280:	4604      	mov	r4, r0
 800a282:	460d      	mov	r5, r1
 800a284:	d904      	bls.n	800a290 <_raise_r+0x14>
 800a286:	2316      	movs	r3, #22
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	f04f 30ff 	mov.w	r0, #4294967295
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a292:	b112      	cbz	r2, 800a29a <_raise_r+0x1e>
 800a294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a298:	b94b      	cbnz	r3, 800a2ae <_raise_r+0x32>
 800a29a:	4620      	mov	r0, r4
 800a29c:	f000 f830 	bl	800a300 <_getpid_r>
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2aa:	f000 b817 	b.w	800a2dc <_kill_r>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d00a      	beq.n	800a2c8 <_raise_r+0x4c>
 800a2b2:	1c59      	adds	r1, r3, #1
 800a2b4:	d103      	bne.n	800a2be <_raise_r+0x42>
 800a2b6:	2316      	movs	r3, #22
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e7e7      	b.n	800a28e <_raise_r+0x12>
 800a2be:	2400      	movs	r4, #0
 800a2c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	4798      	blx	r3
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7e0      	b.n	800a28e <_raise_r+0x12>

0800a2cc <raise>:
 800a2cc:	4b02      	ldr	r3, [pc, #8]	; (800a2d8 <raise+0xc>)
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f7ff bfd3 	b.w	800a27c <_raise_r>
 800a2d6:	bf00      	nop
 800a2d8:	2000017c 	.word	0x2000017c

0800a2dc <_kill_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4d07      	ldr	r5, [pc, #28]	; (800a2fc <_kill_r+0x20>)
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	f7f8 fb03 	bl	80028f4 <_kill>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	d102      	bne.n	800a2f8 <_kill_r+0x1c>
 800a2f2:	682b      	ldr	r3, [r5, #0]
 800a2f4:	b103      	cbz	r3, 800a2f8 <_kill_r+0x1c>
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	bd38      	pop	{r3, r4, r5, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20001c9c 	.word	0x20001c9c

0800a300 <_getpid_r>:
 800a300:	f7f8 baf6 	b.w	80028f0 <_getpid>

0800a304 <__sread>:
 800a304:	b510      	push	{r4, lr}
 800a306:	460c      	mov	r4, r1
 800a308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30c:	f000 f894 	bl	800a438 <_read_r>
 800a310:	2800      	cmp	r0, #0
 800a312:	bfab      	itete	ge
 800a314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a316:	89a3      	ldrhlt	r3, [r4, #12]
 800a318:	181b      	addge	r3, r3, r0
 800a31a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a31e:	bfac      	ite	ge
 800a320:	6563      	strge	r3, [r4, #84]	; 0x54
 800a322:	81a3      	strhlt	r3, [r4, #12]
 800a324:	bd10      	pop	{r4, pc}

0800a326 <__swrite>:
 800a326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	461f      	mov	r7, r3
 800a32c:	898b      	ldrh	r3, [r1, #12]
 800a32e:	05db      	lsls	r3, r3, #23
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	4616      	mov	r6, r2
 800a336:	d505      	bpl.n	800a344 <__swrite+0x1e>
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	2302      	movs	r3, #2
 800a33e:	2200      	movs	r2, #0
 800a340:	f000 f868 	bl	800a414 <_lseek_r>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a34a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	f000 b817 	b.w	800a38c <_write_r>

0800a35e <__sseek>:
 800a35e:	b510      	push	{r4, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a366:	f000 f855 	bl	800a414 <_lseek_r>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	bf15      	itete	ne
 800a370:	6560      	strne	r0, [r4, #84]	; 0x54
 800a372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a37a:	81a3      	strheq	r3, [r4, #12]
 800a37c:	bf18      	it	ne
 800a37e:	81a3      	strhne	r3, [r4, #12]
 800a380:	bd10      	pop	{r4, pc}

0800a382 <__sclose>:
 800a382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a386:	f000 b813 	b.w	800a3b0 <_close_r>
	...

0800a38c <_write_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d07      	ldr	r5, [pc, #28]	; (800a3ac <_write_r+0x20>)
 800a390:	4604      	mov	r4, r0
 800a392:	4608      	mov	r0, r1
 800a394:	4611      	mov	r1, r2
 800a396:	2200      	movs	r2, #0
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	f7f8 fac6 	bl	800292c <_write>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_write_r+0x1e>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_write_r+0x1e>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	20001c9c 	.word	0x20001c9c

0800a3b0 <_close_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d06      	ldr	r5, [pc, #24]	; (800a3cc <_close_r+0x1c>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f8 fac4 	bl	8002948 <_close>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_close_r+0x1a>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_close_r+0x1a>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20001c9c 	.word	0x20001c9c

0800a3d0 <_fstat_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_fstat_r+0x20>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	4611      	mov	r1, r2
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	f7f8 fab6 	bl	800294e <_fstat>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d102      	bne.n	800a3ec <_fstat_r+0x1c>
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	b103      	cbz	r3, 800a3ec <_fstat_r+0x1c>
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	bd38      	pop	{r3, r4, r5, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20001c9c 	.word	0x20001c9c

0800a3f4 <_isatty_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d06      	ldr	r5, [pc, #24]	; (800a410 <_isatty_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7f8 faaa 	bl	8002958 <_isatty>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_isatty_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_isatty_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	20001c9c 	.word	0x20001c9c

0800a414 <_lseek_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d07      	ldr	r5, [pc, #28]	; (800a434 <_lseek_r+0x20>)
 800a418:	4604      	mov	r4, r0
 800a41a:	4608      	mov	r0, r1
 800a41c:	4611      	mov	r1, r2
 800a41e:	2200      	movs	r2, #0
 800a420:	602a      	str	r2, [r5, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	f7f8 fa9a 	bl	800295c <_lseek>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_lseek_r+0x1e>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_lseek_r+0x1e>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20001c9c 	.word	0x20001c9c

0800a438 <_read_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	; (800a458 <_read_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f8 fa62 	bl	8002910 <_read>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_read_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_read_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20001c9c 	.word	0x20001c9c

0800a45c <_init>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr

0800a468 <_fini>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr
